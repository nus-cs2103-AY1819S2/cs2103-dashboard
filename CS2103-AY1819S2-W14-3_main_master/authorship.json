[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d CLI Battleship"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": "https://github.com/CS2103-AY1819S2-W14-3/main[image:https://travis-ci.org/CS2103-AY1819S2-W14-3/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "https://github.com/CS2103-AY1819S2-W14-3/main[image:https://coveralls.io/repos/github/CS2103-AY1819S2-W14-3/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": "ifdef::sdsdds[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "https://ci.appveyor.com/project/damithc/addressbook-level4[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "https://coveralls.io/github/se-edu/addressbook-level4?branch\u003dmaster[image:https://coveralls.io/repos/github/se-edu/addressbook-level4/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "* This is a desktop Battleship application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "* One can play the classic Battleship game against the computer on this app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "* This application is designed for people who want to play Battleship but prefer to use the command-line or are otherwise unable to operate a GUI."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": "** This project is written in an OOP style."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "** Support for _Build Automation_ using Gradle and for _Continuous Integration_ using Travis CI."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* This application is a fork of https://github.com/nus-cs2103-AY1819S2/[addressbook-level4] by"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "s-tr"
        },
        "content": "the se-edu team."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 4,
      "iwle": 4,
      "s-tr": 6,
      "-": 27
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "  ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "      \"githubId\": \"bos10\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "      \"displayName\": \"CHE...TON\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "      \"authorNames\": [\"bos10\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": "      \"githubId\": \"s-tr\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": "      \"displayName\": \"CHO...WEI\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": "      \"authorNames\": [\"s-tr\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "      \"githubId\": \"iwle\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "      \"displayName\": \"IAN... EN\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "      \"authorNames\": [\"iwle\", \"Ian Wu\", \"iwle@u.nus.edu\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": "      \"githubId\": \"lucydotc\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "      \"displayName\": \"LUC...YAN\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": "      \"authorNames\": [\"lucydotc\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "    },"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": "      \"githubId\": \"erjillsison\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": "      \"displayName\": \"SIS...NES\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": "      \"authorNames\": [\"erjillsison\"]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 30
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        \u0027site-name\u0027: \u0027Battleship\u0027,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/CS2103-AY1819S2-W14-3/main\u0027,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 2,
      "-": 235
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "Battleship was developed by Team W14-G3. We are a team from Singapore developing retro games for the world. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": "We are based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d Boston Cheong"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "image::bos10.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "{empty}[https://github.com/bos10[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "Responsibility: Statistics management feature"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d Erjill Sison"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "image::erjillsison.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "{empty}[http://github.com/erjillsison[github]] [\u003c\u003cerjillsison#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "Responsibilities: Map management feature"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d Esther Chong"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "image::s-tr.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": "{empty}[http://github.com/s-tr[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "Responsibilities: Battle management feature"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d Ian Wu"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "image::iwle.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "{empty}[http://github.com/iwle[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "Responsibilities: Ship management feature"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d Lucy Chan"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "image::lucydotc.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iwle"
        },
        "content": "{empty}[http://github.com/lucydotc[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "Responsibilities: Computer Enemy management feature"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 11,
      "iwle": 13,
      "-": 32
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/se-edu/addressbook-level4/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "* *Email us* : You can also reach us at `battleshipdevelopers [at] gmail.com`"
      }
    ],
    "authorContributionMap": {
      "iwle": 1,
      "-": 6
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d CLI Battleship - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bos10"
        },
        "content": "By: `Team W14-3`      Since: `Jan 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "s-tr"
        },
        "content": "[[Design-Battle]]"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d Battle component"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "s-tr"
        },
        "content": ".Structure of the Battle Component"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "s-tr"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "s-tr"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/logic/battle/Battle.java[`Battle.java`]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "s-tr"
        },
        "content": "The `Battle` component,"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* keeps track of the progress of the battle,"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* restricts the computer to place its ships at the correct time,"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* allows the user and the computer enemy to attack each other and maintain proper turn-taking while doing so."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "s-tr"
        },
        "content": "As the"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "// tag::map[]"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d\u003d\u003d Map Feature"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "The map feature is facilitated by `MapGrid` and `Cell`."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "The map grid is stored internally in `MapGrid` as a 2D array of `Cell` objects."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "`MapGrid` implements the following method to initialise the map."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "* `MapGrid#initialise(Cell[][] map)` -- initialises the map using the given `Cell` 2D array."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "Below is the code snippet for the `initialise` method"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "----"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "include::../src/main/java/seedu/address/model/MapGrid.java[lines\u003d64..71]"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "----"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "`cellGrid` is the internal 2D array comprising of `Cell` objects. +"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "The method `copy2dArray` copies the `map` parameter passed in to the internal `cellGrid`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "Below is the code snippet for the `copy2dArray` method."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "----"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "include::../src/main/java/seedu/address/model/MapGrid.java[lines\u003d118..124]"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "----"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "The `copy2dArray` method creates a new `Cell` object for each of the input `Cell` objects."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "The copying is done using a constructor in `Cell` that takes in a parameter `Cell`."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "This constructor copies the private attributes of the given `Cell` parameter."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "The following sequence diagram shows how a map is initialised:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "image::InitialiseMapCommandSequenceDiagram.png[width\u003d800]"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How initialise map works"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "* **Alternative 1 (current choice):** `MapGrid` will have an initialise method that takes in a 2D array of `Cell` objects."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "The initialise method in `MapGrid` will then do a deep copy of the passed in 2D array to initialise the internal 2D array of `Cell`."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "** Pros: The underlying 2D array in `MapGrid` is better protected from modification as it can only be modified through the initialise method."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "** Cons: Might have more overhead due to deep copying."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "* **Alternative 2:** `MapGrid` will have a getter method that returns the 2D array of `Cell`."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "`InitialiseMapCommand` will then use this method to get the internal 2D array and populate it from outside of the `MapGrid` class."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "** Cons: The 2D array within `MapGrid` is unprotected and open for modification."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "Alternative 1 was chosen as the overhead is negligible and a defensive approach to the design is preferable."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the map"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "* **Alternative 1 (current choice):** 2D array of `Cell` objects."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "** Pros: Resulting code is simple and readable."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "** Cons: More changes to be done from the original AB4 codebase."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "* **Alternative 2:** List of lists of `Cell` objects."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "** Pros: Easier to implement from the original AB4 codebase."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "** Cons: Bad code readability and more complicated."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "Alternative 1 was chosen because of good code readability and it being the simpler implementation."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "Good code readability is important for new developers taking on the project."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "Simpler implementation means the likelihood of bugs being introduced is less when changes are made."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "// end::map[]"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d Battleship Feature"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "iwle"
        },
        "content": "A battleship is a basic class representing a battleship that can be placed on the map grid. The length of the battleship varies, depending on the type of battleship. There are three types of battleships: +"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "iwle"
        },
        "content": "1. Cruiser of length 2."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "iwle"
        },
        "content": "1. Destroyer of length 3."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "iwle"
        },
        "content": "1. Aircraft carrier of length 5."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "iwle"
        },
        "content": "The number of battleship types that a user can deploy on the map depends on the size of the map. It is given by the formula:"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "iwle"
        },
        "content": "1. Number of cruisers \u003d `mapSize` - 5."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "iwle"
        },
        "content": "1. Number of destroyers \u003d (`mapSize` + 2) / 5."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "iwle"
        },
        "content": "1. Number of aircraft carriers \u003d 1."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "iwle"
        },
        "content": "The user can tag a battleship using a `t/[TAG]` parameter in the `put` command. Tagging battleships is optional."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "iwle"
        },
        "content": "The head of a battleship refers to the top-most and left-most cell of the battleship. When coordinates are specified in the `put` command, it specifies the coordinates of the head of the battleship, as shown in the figure below."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "iwle"
        },
        "content": "image:BattleshipHeadExample.png[width\u003d800]"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "iwle"
        },
        "content": ".The coordinates of the `put` command refer to the coordinates of the battleship head."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "iwle"
        },
        "content": "image:BattleshipHeadExample2.png[width\u003d800]"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "iwle"
        },
        "content": "The following operations are called when the `put` command is called."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "iwle"
        },
        "content": "* `performChecks()` - performs boundary checks on the map grid to ensure that the battleship can be placed on the map."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "iwle"
        },
        "content": "* `putShip()` - puts the battleship into the cell."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "iwle"
        },
        "content": "* `getCell()` - gets the cell that is specified by the coordinates provided by the user."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "iwle"
        },
        "content": "Here is an example of a given user scenario."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "iwle"
        },
        "content": "Step 1. Initialise the map to a map of size 10."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "iwle"
        },
        "content": "image:PutShipWalkThrough1.png[width\u003d800]"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "iwle"
        },
        "content": "Step 2. Put the battleship on the map by specifying the name, coordinates, orientation, and tags."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "iwle"
        },
        "content": "image:PutShipWalkThrough2.png[width\u003d800]"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "iwle"
        },
        "content": "The following sequence diagram shows how a battleship is put on the map."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "iwle"
        },
        "content": ".Sequence diagram of putting a battleship on the map."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "iwle"
        },
        "content": "image::PutShipSequenceDiagram.png[width\u003d800]"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "iwle"
        },
        "content": "Battleships can be tagged. You can list all the tags used by battleships that have been deployed on the map grid using the `listTags` command. The sequence diagram below shows how the tags are listed."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "iwle"
        },
        "content": ".Sequence diagram of listing battleship tags."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "iwle"
        },
        "content": "image::ListTagsSequenceDiagram.png[width\u003d800]"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "iwle"
        },
        "content": "Battleships that have been deployed can also be listed. Battleships can be listed in four different ways:"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "iwle"
        },
        "content": "1. List all battleships."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "iwle"
        },
        "content": "1. List battleships that have certain tags."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "iwle"
        },
        "content": "1. List battleships of a certain type."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "iwle"
        },
        "content": "1. List battleships of a certain type that have certain tags."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "iwle"
        },
        "content": "Here is an example of a given user scenario. In this scenario, the user has deployed some battleships on a 10 by 10 map grid with various tags."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "iwle"
        },
        "content": "Step 1. Initialise the map to a map of size 10."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "iwle"
        },
        "content": "Step 2. Deploy battleships by specifying the name, coordinates, orientation, and tags. We will deploy the following battleships:"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "iwle"
        },
        "content": "* Cruiser at a4 vertical with tag `tag1`."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "iwle"
        },
        "content": "* Cruiser at d4 vertical with tag `tag1`."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "iwle"
        },
        "content": "* Cruiser at f7 horizontal with tag `tag2`."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "iwle"
        },
        "content": "* Cruiser at h8 horizontal with tag `tag2`."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "iwle"
        },
        "content": "* Destroyer at d4 horizontal with tag `tag1`."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "iwle"
        },
        "content": "Step 3. List the battleships."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "iwle"
        },
        "content": "image::ListExample1.png[width\u003d800]"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "iwle"
        },
        "content": "Step 4. List the battleships by name. Use `cruiser`."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "iwle"
        },
        "content": "image::ListExample2.png[width\u003d800]"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "iwle"
        },
        "content": "Step 5. List the battleships by name and tags. Use `cruiser` with `tag2`."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "iwle"
        },
        "content": "image::ListExample3.png[width\u003d800]"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "iwle"
        },
        "content": "The following sequence diagram shows how deployed battleships are listed when the `list` command is entered into the command line."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "iwle"
        },
        "content": ".Sequence diagram of listing battleships deployed on the map."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "iwle"
        },
        "content": "image::ListShipSequenceDiagram.png[width\u003d1499][height\u003d2249]"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How a battleship is placed on the map"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "iwle"
        },
        "content": "* **Alternative 1 (current choice):** The same `Battleship` object is put in multiple cells."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "iwle"
        },
        "content": "** Pros: This allows any cell that is hit to access the same `Battleship` object without having to separately find the `Battleship` object."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "iwle"
        },
        "content": "** Cons: Difficult to keep track of each `Battleship` position."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "iwle"
        },
        "content": "* **Alternative 2:** Have a separate `Battleship` object and `BattleshipPart` object that points to the main `Battleship` object."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "iwle"
        },
        "content": "** Pros: Clearer separation between the \"body\" of the Battleship and the Battleship itself."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "iwle"
        },
        "content": "** Cons: Difficult to handle being hit on a cell."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to record battleships in player"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "iwle"
        },
        "content": "* **Alternative 1 (current choice):** `ArrayList` of `FleetEntry`, where `FleetEntry` contains a reference to the `Battleship`, its `Orientation` and `Coordinates` of the head."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "iwle"
        },
        "content": "** Pros: Can identify `Battleship` by position."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "iwle"
        },
        "content": "** Cons: Harder to implement."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "iwle"
        },
        "content": "* **Alternative 2:** `ArrayList` of `Battleship`."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "iwle"
        },
        "content": "** Pros: Cleaner and easier to implement."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "iwle"
        },
        "content": "** Cons: Cannot check position of `Battleship` on the map grid."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003d\u003d\u003d Battle Feature"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "s-tr"
        },
        "content": "The Battle feature handles the following:"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* keeping track of the stage of the battle, and ensuring that the player does not"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  enter a command in the wrong stage of the game,"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* allowing the computer to place its ships at the correct time,"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* allowing the user and the computer enemy to attack each other and maintain proper turn-taking while doing so."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "s-tr"
        },
        "content": "The Battle feature is split between several packages:"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  * `seedu.address.battle`: the main `Battle` class is implemented here"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  * `seedu.address.battle.state`: the battle state classes are implemented here, and"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    can be stored and retrieved via `Model`."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  * `seedu.address.battle.result`: the attack result classes are implemented here."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    These classes are returned by `Battle#humanPerformAttack(coordinates)` and"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    `Battle#takeComputerTurn()`."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  * `BeginCommand`, `AttackCommand` and `EndTurnCommand` handle the player\u0027s interaction"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    with this component."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* **Alternative 1 (current choice):** +"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  `BattleManager` is stored under `Model`. Every time `Attack`, `EndTurn` or `Begin` commands"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  are executed, they will use this `BattleManager` to actually perform the actions,"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  with the logic in the `Command`-s mostly being error handling. +"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  When AI performs attacks, the `BattleManager` will call the AI to compute its attack"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  and return it, then call an internal method to actually perform the attack."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "bos10"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "s-tr"
        },
        "content": "*** Command logic is abstracted into places where it can be reused by the AI."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "bos10"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "s-tr"
        },
        "content": "*** The `Model` component now contains game logic (`BattleManager`) within it."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* **Alternative 2:** +"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  `BattleManager` is stored under `Logic`. Every time `Attack`, `EndTurn` or `Begin` commands"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  are executed, they will perform the action using the logic coded within themselves, not"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  interfacing with `BattleManager`. +"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  When AI performs attacks, the `BattleManager` will create these commands and execute them."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  In the `Model`, the current attacking player is kept track of, allowing the commands to be"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  used for both a human and AI player."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "bos10"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "s-tr"
        },
        "content": "*** The game\u0027s model and logic are kept separate from each other."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "bos10"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "s-tr"
        },
        "content": "*** AttackCommand is now state-dependent (the state being the current attacking player) which"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    can more easily lead to bugs and race conditions."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003d\u003d\u003d Enemy AI Feature"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003cLucy\u003e"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "bos10"
        },
        "content": "* **Alternative 1 (current choice):**"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "bos10"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "bos10"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "bos10"
        },
        "content": "* **Alternative 2:**"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "bos10"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "bos10"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003d\u003d\u003d Statistics Feature"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "bos10"
        },
        "content": "The `stats` feature allows users to view their current gameplay information. This information will be displayed in a pop-up window and will include: Number of Attacks Made, Number of Successful Hits, Number of Misses, Number of Enemy Ships Destroyed and Accuracy of Shots made."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "bos10"
        },
        "content": "This feature stems from a central abstract class that is extended to for a player. It is initialized with the main components upon the start of the application and is subsequently passed down as a parameter to the relevant methods which will invoke the corresponding updating methods to the statistical information."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "bos10"
        },
        "content": "The following operations are invoked upon the calling of the `stats` command."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "bos10"
        },
        "content": "** `getAttacksMade()` - Returns the number of attacks made by the User"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "bos10"
        },
        "content": "** `getMovesLeft()` - Returns the remaining number of moves left for the User"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "bos10"
        },
        "content": "** `getHitCount()` - Returns the number of successful hit on enemy ships"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "bos10"
        },
        "content": "** `getMissCount()` Returns the number of misses made"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "bos10"
        },
        "content": "** `getEnemyShipsDestroyed()` Returns the number of Enemy Ships Destroyed by the player"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "bos10"
        },
        "content": "** `getAccuracy()` Returns the current Hit-Miss Ratio of the User based on the game so far"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "bos10"
        },
        "content": "Given below is an example usage scenario and how the `stats` command behaves at each step."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "bos10"
        },
        "content": "Step 1. The User initializes the game with the `init 8` which will create a 8x8 map."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "bos10"
        },
        "content": "! The Map can be initialized to any valid size (This is just a sample scenario)"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "bos10"
        },
        "content": "Step 2. Put the ships accordingly..."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "bos10"
        },
        "content": "Step 3. Input `stats` into the command-line and press enter to obtain the current statistical data."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "bos10"
        },
        "content": "image::inputStatsCommandSS.png[width\u003d250]"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "bos10"
        },
        "content": "! Note, there should not be any valid data at the moment as the game as not started."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "bos10"
        },
        "content": "! Include Screenshot explaining pop-up window and lack of data"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "bos10"
        },
        "content": "image::StatsWindowSS.png[width\u003d600]"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "bos10"
        },
        "content": "Step 4. Now proceed with the game and perform an attack ...."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "bos10"
        },
        "content": "Step 5. Invoke the `stats` command again to view the updated statistics"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "bos10"
        },
        "content": "image::StatsWindowUpdatedSS.PNG[width\u003d400]"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "bos10"
        },
        "content": "The following sequence diagram summarizes what happens when a User invokes the `stats` command."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "bos10"
        },
        "content": "image::StatsSequenceDiagram.PNG[width\u003d800]"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003d\u003d\u003d\u003d Output Statistical Data"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "bos10"
        },
        "content": "Besides the pop-up window, the data is also captured in the command-line result box."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "bos10"
        },
        "content": "image::StatsCommandBox.PNG[width\u003d400]"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "bos10"
        },
        "content": "* **Alternative 1 (current choice):** Statistics class will have an initialise method that with a set of default configuration that are used by any Statistics Variant."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "bos10"
        },
        "content": "** Pros: The underlying variables and values in Statistics is better protected from modification."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "bos10"
        },
        "content": "** Cons: It does not accommodate changes in default settings."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "bos10"
        },
        "content": "* **Alternative 2:** Statistics is stored entirely within StatsCommands"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "bos10"
        },
        "content": "** Pros: Easy to code and less lines of code."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "bos10"
        },
        "content": "** Cons: Does not abide by Single Responsibility Principle as the `StatsCommand` will also contain filtering and analysis of data."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "*Value proposition*: manage contacts faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "|`* * *` |new player |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "|`* * *` | player |initialise a new game board / map|start a new game"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "|`* * *` | player | put a battleship on the map |play the game"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "iwle"
        },
        "content": "|`* * *` | player | tag my battleships | manage my battleships during the game"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "iwle"
        },
        "content": "|`* * *` | player | list my battleships | check the status of my battleships during the game"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "iwle"
        },
        "content": "|`* * *` | player | list my battleships by tag | check the status of specific battleships during the game"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "bos10"
        },
        "content": "|`* * *` | user | see the number of actions I made |keep track of my play style"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "bos10"
        },
        "content": "|`* * *` | user | see the number of successful attacks I made |keep track of how well I am doing in the game"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "iwle"
        },
        "content": "|`* * *` | user | see where my battleships are on the map |have a visual representation of the game"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "iwle"
        },
        "content": "|`* * *` | user | list my battleships |know the status of my fleet"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "iwle"
        },
        "content": "|`* * *` | player | end my turn |the enemy can start its turn"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "(For all use cases below, the *System* is the `Battleship` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d\u003d\u003d Use case: Initialise Maps"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "1.  User requests to initialise maps"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "2.  Battleship creates and displays both player\u0027s maps"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "* 2a. The map size is invalid."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "** 2a1. Battleship shows an error message"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d Use case: Put Battleship"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "iwle"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "iwle"
        },
        "content": "1. User requests to add battleship to given coordinate specified."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "iwle"
        },
        "content": "2. Battleship adds a ship to the given coordinate specified, in the cell."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "iwle"
        },
        "content": "+"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "iwle"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "iwle"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "iwle"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "iwle"
        },
        "content": "* 2a. If there is a ship present in the cell, show an error."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d Use case: List Battleship"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "iwle"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "iwle"
        },
        "content": "1. User requests to list battleships deployed on map."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "iwle"
        },
        "content": "2. Shows all of the user\u0027s battleships deployed on map."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "iwle"
        },
        "content": "+"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "iwle"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "iwle"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "iwle"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "iwle"
        },
        "content": "* 2a. If there are no ships deployed, inform the user."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d Use case: List tags that Battleships have"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "iwle"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "iwle"
        },
        "content": "1. User requests to list tags of battleships that have already been deployed on map."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "iwle"
        },
        "content": "2. Shows all of the tags of battleships that have already been deployed on map."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "iwle"
        },
        "content": "+"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "iwle"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d Use case: List Battleships by tag"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "iwle"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "iwle"
        },
        "content": "1. User requests to list battleships deployed on map that have certain tags."
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "iwle"
        },
        "content": "2. Shows all of the user\u0027s battleships deployed on map that have certain tags."
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "iwle"
        },
        "content": "+"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "iwle"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "iwle"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "iwle"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "iwle"
        },
        "content": "* 2a. If there are no ships deployed, inform the user."
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "\u003d\u003d\u003d Use case: End player turn"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "1. User requests for enemy to start turn."
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "2. User\u0027s turn is automatically ended."
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "3. Enemy player turn starts."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "\u003d\u003d\u003d Use case: Play enemy turn"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "*Actor:* `enemy player`"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "1. Enemy turn starts."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "2. Enemy performs Enemy Attack(See Enemy Attack Use Case)."
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "3. Enemy turn ends."
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "4. Control is given back to Player"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003d\u003d Instructions for Manual Testing (!!Must change to fit our context!!)"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d\u003d\u003d Initialising the maps"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ". Initialising the maps after launching the game"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ".. Test case: `init 7` +"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "   Expected: Displays two empty map grids of size 7 in the GUI. Both maps will have the appropriate alphanumeric labels on the first row and column."
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ".. Test case: `init 0` +"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "   Expected: If this is the first command ran, no map will be displayed. Otherwise, no changes will be made to the displayed maps."
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "   Error message will be displayed in the result display box."
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ".. Other incorrect initialise commands to try: `init`, `init x` (where x is smaller or larger than the specified minimum or maximum map size respectively). +"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "   Expected: No map will be displayed if this is the first command ran. Otherwise, no changes will be made to the displayed map."
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d Putting a ship"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "iwle"
        },
        "content": ". Putting a ship on the map after initialising the map."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "iwle"
        },
        "content": ".. Prerequisites: There are ships in your fleet ready to be deployed. This means that the number of battleships in the fleet is more than 0. The map is initialised to a size between 6 and 10."
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "iwle"
        },
        "content": ".. Test case: `put n/destroyer r/horizontal c/b1` +"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "iwle"
        },
        "content": "   Expected: Destroyer battleship of size 3 will be put horizontally on coordinates `b1`, `b2` and `b3`. The map is updated with 3 black cells on each of these coordinates representing the Destroyer battleship."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "iwle"
        },
        "content": ".. Test case: `put n/aircraft carrier r/horizontal c/c1 t/bluefleet` +"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "iwle"
        },
        "content": "   Expected: Aircraft Carrier battleship of size 5 will be put horizontally on coordinates `c1`, `c2`, `c3`, `c4` and `c5`. The map is updated with 5 black cells on each of these coordinates representing the Aircraft Carrier battleship."
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "iwle"
        },
        "content": ".. Test case: `put n/aircraft carrier r/horizontal c/e1 t/nomore` +"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "iwle"
        },
        "content": "   Expected: No battleship is put down on the map. Error details shown in the status message. Map remains the same."
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "iwle"
        },
        "content": ".. Test case: `put n/destroyer r/vertical c/b1` +"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "iwle"
        },
        "content": "   Expected: No battleship is put down on the map. Error details shown in the status message. Map remains the same."
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "iwle"
        },
        "content": ".. Test case: `put n/destroyer r/vertical c/a1` +"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "iwle"
        },
        "content": "   Expected: No battleship is put down on the map. Error details shown in the status message. Map remains the same."
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "iwle"
        },
        "content": ".. Test case: `put n/destroyer r/vertical c/z1` +"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "iwle"
        },
        "content": "   Expected: No battleship is put down on the map. Error details shown in the status message. Map remains the same."
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003d\u003d\u003d Viewing the statistics"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "bos10"
        },
        "content": "To test the `stats` feature. We will perform a before and after check to see if the statistical data of a simple behaviour is captured. In this case, we will perform an attack with a miss result."
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "bos10"
        },
        "content": "1. Initialize a 8x8 map using `init 8`."
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "bos10"
        },
        "content": "2. Run the `stats` command and observe the results"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "bos10"
        },
        "content": ".. Test case : `stats`  (before) +"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "bos10"
        },
        "content": "   Expected: All fields are 0."
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "bos10"
        },
        "content": "3. Now input `attack c1` to simulate an attack on the enemy map."
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "bos10"
        },
        "content": ".. Test case : `stats` (after) +"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "bos10"
        },
        "content": "    Expected: Number of attacks : 1, Number of Misses : 1"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 69,
      "iwle": 150,
      "lucydotc": 15,
      "bos10": 76,
      "s-tr": 51,
      "-": 629
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d CLI Battleship - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "By: `Team W14-3`      Since: `Jan 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "Ships ahoy! Battleships is a retro game for people who want to have the joy of playing Battleships without the hassle and fuss of a physical game."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "Battleships is optimised for people who want to use a Command Line Interface (CLI), while still retaining the benefits of a Graphical User Interface (GUI). It can guarantee many hours of fun, especially between those long and boring periods of the day. Can\u0027t wait to get started? Head over to \u003c\u003cQuick Start\u003e\u003e to fire away!"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Download the latest `addressbook.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Address Book."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* *`list`* : lists all battleships"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* **`put`**`a1` : Puts a battleship with its head at the A1 cell"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* **`play`** : Start the game"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* **`shoot`**`a1` : Attacks the enemy\u0027s A1 cell"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "s-tr"
        },
        "content": "Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "s-tr"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "s-tr"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "s-tr"
        },
        "content": "Opens a help window that displays this User Guide. +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "// tag::map[]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d\u003d\u003d Map : `init`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "s-tr"
        },
        "content": "Initialises both player\u0027s maps to the specified size. +"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "Format: `init MAP_SIZE` +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "Example: `init 10`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "_Figure 1_ below shows how the maps will be displayed in the UI."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ".Player and enemy maps"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "image::initmapresult.png[width\u003d750]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "Throughout the course of the game, the cells in the map will change colour based on their status. +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ".Cell statuses:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "- Hidden - Enemy map cell that has not been hit"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "- Water - Empty (i.e cell with no ship) player cell that has not been hit"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "- Water Hit - Empty cell that has been hit"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "- Ship - Player cell that has a ship and has not been hit"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "- Ship Hit - Ship cell that has been hit but not yet destroyed"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "- Ship Destroyed - Ship cell that has been destroyed"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "_Figure 2_ below shows which colour is used for each status."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ".Cell colours"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "image::maplegend.png[width\u003d400]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "// end::map[]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d Placing a ship on the map: `put`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iwle"
        },
        "content": "Adds a battleship onto the player\u0027s map. The coordinates specified is the position of the battleship\u0027s head. +"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iwle"
        },
        "content": "Format: `put n/NAME c/COORDINATES r/ORIENTATION t/TAG` +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iwle"
        },
        "content": "* `put n/Destroyer c/a1 r/vertical`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iwle"
        },
        "content": "* `put n/Aircraft Carrier c/b1 r/h` +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iwle"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iwle"
        },
        "content": "The head of a battleship refers to the top-most and left-most cell of the battleship. When coordinates are specified in the `put` command, it specifies the coordinates of the head of the battleship, as shown in the figure below."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iwle"
        },
        "content": "image:BattleshipHeadExample.png[width\u003d800]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iwle"
        },
        "content": ".The coordinates of the `put` command refer to the coordinates of the battleship head."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iwle"
        },
        "content": "image:BattleshipHeadExample2.png[width\u003d800]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iwle"
        },
        "content": "_Figure 3_ shows how a battleship is put at coordinate `a5`. The head of the battleship is therefore at `a5`. +"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iwle"
        },
        "content": ".The `put` command will put the battleship at a5, which is the battleship\u0027s head coordinate."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iwle"
        },
        "content": "image::putshipheadexample.png[width\u003d750]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iwle"
        },
        "content": "The orientation of the battleship can be horizontal or vertical. The orientation of the battleship must be specified. It may be shortened to `h` or `v`. +"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d Listing all ships : `list`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iwle"
        },
        "content": "Shows a list of all the player\u0027s battleships that are have been deployed on the map. There are four ways of using the `list` command:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iwle"
        },
        "content": "1. List all the battleships."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iwle"
        },
        "content": "1. List all the battleships that match a list of tags."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iwle"
        },
        "content": "1. List all the battleships of a certain type."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iwle"
        },
        "content": "1. List all the battleships of a certain type that match a list of tags."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iwle"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iwle"
        },
        "content": "* `list`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iwle"
        },
        "content": "* `list t/[TAGS]`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iwle"
        },
        "content": "* `list n/[NAME]`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iwle"
        },
        "content": "* `list n/[NAME] t/[TAGS]`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iwle"
        },
        "content": "* `list`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iwle"
        },
        "content": "* `list t/blueFleet`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iwle"
        },
        "content": "* `list n/destroyer`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iwle"
        },
        "content": "* `list n/destroyer t/blueFleet`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iwle"
        },
        "content": "The list will show the battleship\u0027s head coordinate, the battleship\u0027s orientation, and the battleship\u0027s tags in square brackets. +"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iwle"
        },
        "content": "The format of each entry in the list is: `[NAME] [CURRENT LIFE] at [HEAD COORDINATE] [ORIENTATION] [TAGS]`."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iwle"
        },
        "content": ".The `list` command"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iwle"
        },
        "content": "image::listexample.png[width\u003d750]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iwle"
        },
        "content": "The `list` command can also be used with tags. In the example provided, we have added the tag `bluefleet` to our destroyer at `f7`. Using the command `list t/bluefleet` will allow us to list all the battleships tagged with `bluefleet`."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iwle"
        },
        "content": ".The `list` command with tags"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iwle"
        },
        "content": "image::listwithtagexample.png[width\u003d750]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iwle"
        },
        "content": "The `list` command can be used with both the name of the battleship and a list of tags. In this example from _Figure 6_ and _Figure 7_, we have created a fleet with two tags: `blue` and `green`."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iwle"
        },
        "content": ".The `list` command showing our fleet"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iwle"
        },
        "content": "image::listall.png[width\u003d750]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iwle"
        },
        "content": "We are able to list a specific battleship by the name of `destroyer` with the tag `blue`, as in _Figure 7_."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iwle"
        },
        "content": ".The `list` command with name and tags"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iwle"
        },
        "content": "image::listbytagbyname.png[width\u003d750]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d Locating ships by name: `find`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iwle"
        },
        "content": "Finds battleships whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iwle"
        },
        "content": "Format: `find NAME [MORE_NAMES]`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* The search is case insensitive. e.g `hood` will match `Hood`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* The order of the keywords does not matter. e.g. `Wales Prince` will match `Prince Of Wales`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* Only full words will be matched e.g. `Bel` will not match `Belfast`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* Persons matching at least one keyword will be returned (i.e. `OR` search). +"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "s-tr"
        },
        "content": "e.g. `King York` will return `King George V`, `Duke of York`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* `find Vengeance` +"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "s-tr"
        },
        "content": "Returns `Name: RSS Vengeance, Size: 4, Command: true, Position: d2`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iwle"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iwle"
        },
        "content": "The position may not be displayed if the ship has not been placed."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d List all tags: `listTags`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iwle"
        },
        "content": "Lists all the tags that have been used to tag the battleships deployed on the map. +"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iwle"
        },
        "content": "Format: `listTags` +"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iwle"
        },
        "content": "Examples: `listTags`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iwle"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iwle"
        },
        "content": "The list of tags is given in square brackets."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d Selecting a ship : `select`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "s-tr"
        },
        "content": "Selects the battleship identified by the index number used in the displayed ship list. +"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* The index refers to the index number shown in the displayed ship list."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "`select 2` +"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iwle"
        },
        "content": "Selects the 2nd battleship in the inventory."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* `find Prinz Eugen` +"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "`select 1` +"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iwle"
        },
        "content": "Selects the 1st battleship in the results of the `find` command."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d Beginning the battle: `begin`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "s-tr"
        },
        "content": "Begins the battle against the computer enemy. +"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "s-tr"
        },
        "content": "Format: `begin` +"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "s-tr"
        },
        "content": "Alternative command: `start`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "s-tr"
        },
        "content": "****"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* After this command is entered, the program\u0027s AI will place its own ships."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "s-tr"
        },
        "content": "****"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d Shooting at a coordinate: `shoot`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "s-tr"
        },
        "content": "Launches an attack against given coordinate on the enemy\u0027s map. +"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "s-tr"
        },
        "content": "Format: `shoot COORDINATES` +"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "s-tr"
        },
        "content": "Alternative command: `attack`, `fire`, `hit`"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "iwle"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "* `shoot A6`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "iwle"
        },
        "content": "****"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* The program will prevent an attack on an invalid coordinate.."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* The program will prevent an attack on a square that has already been attacked."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* The program will prevent the user when attacking when they have already attacked. +"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "s-tr"
        },
        "content": "After attacking, they should use `endturn` to allow the computer to make its move."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "iwle"
        },
        "content": "****"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d Finishing a turn: `endturn`"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "Ends Player turn and starts Enemy\u0027s turn. +"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "s-tr"
        },
        "content": "Format: `endturn` +"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "s-tr"
        },
        "content": "Alternative command: `end`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "****"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* The program will end the player\u0027s turn and automatically play the Enemy\u0027s turn."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "s-tr"
        },
        "content": "The player can see the enemy\u0027s attack reflected on the map and in the results box."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "****"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "\u003d\u003d\u003d Retrieving game statistics: `stats`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "iwle"
        },
        "content": "Prints a list of statistics related to gameplay, such as accuracy and current hits. +"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "iwle"
        },
        "content": "Format: `stats`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "iwle"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "iwle"
        },
        "content": "* `stats`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "iwle"
        },
        "content": "Restores the inventory to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "iwle"
        },
        "content": "Undoable commands: those commands that modify the inventory\u0027s content (`add`, `delete`, `edit` and `clear`)."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "iwle"
        },
        "content": "Clears all entries from the inventory. +"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "s-tr"
        },
        "content": "(placeholder for Statistics saving)"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "iwle"
        },
        "content": "* **Exit**: `exit`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "iwle"
        },
        "content": "* **Clear**: `clear`"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "iwle"
        },
        "content": "* **Redo**: `redo`"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "iwle"
        },
        "content": "* **Undo**: `undo`"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "bos10"
        },
        "content": "* **Statistics**: `stats`"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "iwle"
        },
        "content": "* **Stats**: `stats`"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "iwle"
        },
        "content": "* **enemyTurn**: `enemyturn`"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* **Shoot**: `shoot COORDINATES`"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "iwle"
        },
        "content": "* **Play**: `play`"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "iwle"
        },
        "content": "* **Select**: `select INDEX`"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "iwle"
        },
        "content": "* **Find Tag**: `findTag TAG [MORE_TAGS]`"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "iwle"
        },
        "content": "* **Find**: `find NAME [MORE_NAMES]`"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "* **Put**: `put c/COORDINATES r/ORIENTATION`"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "iwle"
        },
        "content": "* **List**: `list`"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "* **Initialise maps**: `init [s/MAP_SIZE]`"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "iwle"
        },
        "content": "* **Help**: `help`"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 34,
      "iwle": 107,
      "lucydotc": 7,
      "s-tr": 43,
      "bos10": 1,
      "-": 167
    }
  },
  {
    "path": "docs/team/erjillsison.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d Erjill Sison - Project Portfolio for Battleship"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d\u003d Project Overview"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "My team and I were presented with an existing code base for a command line interface(CLI) address book application."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "We were tasked to enhance or morph the product in to a product of our own choice."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "We chose to morph it into Battleship."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "Battleship is a desktop game application based on the classic Battleship game."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "The user interacts with it using a CLI and it has a graphical user interface(GUI) created using JavaFX."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "My role was to design and write the code for the `map` feature of the game."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "The following sections illustrate the feature in more detail, as well as the relevant sections I have added to the user and developer guides in relation to this feature."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "* *Major enhancement*: added *the map feature of the game*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "** What it does: The player can initialise the maps to the size they specified at the start of the game. The players can place ships on their own map and shoot the opposing players map. The maps are displayed in the UI and each cell will change colour depending on its status."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "** Justification: The map feature is crucial to the development of the game as it is the basis of all the interactions made in the game."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "** Highlights: [placeholder]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "** Credits: [placeholder]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "*** Managed releases `v1.3` - `v1.4` (2 releases) on GitHub"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "*** Overhaul of UI to display the maps (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "*** PRs reviewed (with non-trivial review comments):"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "*** Integrated Netlify to the project"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "include::../UserGuide.adoc[tag\u003dmap]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dmap]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "---"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.MapGrid;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing MapGrid ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample MapGrid\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty MapGrid\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            initialData \u003d new MapGrid();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty MapGrid\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            initialData \u003d new MapGrid();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty MapGrid\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        logger.info(\"Starting MapGrid \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 9,
      "-": 178
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The cell index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String MESSAGE_BODY_LENGTH_TOO_LONG \u003d \"The battleship cannot fit into the space provided.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 1,
      "iwle": 2,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/Index.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return Integer.hashCode(zeroBasedIndex);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 5,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/CommandHistory.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores the history of commands executed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandHistory {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cString\u003e userInputHistory \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cString\u003e unmodifiableUserInputHistory \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(userInputHistory);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public CommandHistory() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandHistory(CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory.addAll(commandHistory.userInputHistory);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code userInput} to the list of user input entered."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(String userInput) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory.add(userInput);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of {@code userInputHistory}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return unmodifiableUserInputHistory;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof CommandHistory)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory other \u003d (CommandHistory) obj;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.equals(other.userInputHistory);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bos10": 4,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import javafx.beans.value.ObservableBooleanValue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.MapGrid;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Cell;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns the MapGrid."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    ObservableList\u003cCell\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of commands entered by the user."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The list is ordered from the least recent command to the most recent command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cString\u003e getHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Selected cell in the filtered cell list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * null if no cell is selected."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#selectedPersonProperty()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    ReadOnlyProperty\u003cCell\u003e selectedPersonProperty();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Used for the Ui to listen to and trigger changes."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    ObservableBooleanValue getHumanMapObservable();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Used for the Ui to listen to and trigger changes."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    ObservableBooleanValue getEnemyMapObservable();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns the player map grid"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    MapGrid getHumanMapGrid();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns the enemy map grid"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    MapGrid getEnemyMapGrid();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Sets the selected cell in the filtered cell list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * @see seedu.address.model.Model#setSelectedPerson(Cell)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    void setSelectedPerson(Cell cell);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 30,
      "-": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import javafx.beans.value.ObservableBooleanValue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.MapGrid;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Cell;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.model.statistics.PlayerStatistics;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private final PlayerStatistics statistics;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean addressBookModified;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.statistics \u003d new PlayerStatistics();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set addressBookModified to true whenever the models\u0027 address book is modified."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        model.getAddressBook().addListener(observable -\u003e addressBookModified \u003d true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookModified \u003d false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bos10"
        },
        "content": "        boolean validCommand \u003d false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            commandResult \u003d command.execute(model, history);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bos10"
        },
        "content": "            addToStatistics(commandText);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bos10"
        },
        "content": "            validCommand \u003d true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bos10"
        },
        "content": "            if (validCommand) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                history.add(commandText);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (addressBookModified) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Address book modified, saving to file.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * keeps track of specific commands for statistics (eg. attack)."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void addToStatistics (String commandText) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bos10"
        },
        "content": "        String commandKeyword \u003d commandText.split(\" \")[0]; // Take first word"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bos10"
        },
        "content": "        if (commandKeyword.equals(\"attack\")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bos10"
        },
        "content": "            int numMovesLeft \u003d statistics.minusMove();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bos10"
        },
        "content": "            statistics.addAttack();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bos10"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public ObservableList\u003cCell\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return history.getHistory();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public ReadOnlyProperty\u003cCell\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.selectedPersonProperty();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public ObservableBooleanValue getHumanMapObservable() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return model.getHumanMapObservable();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public ObservableBooleanValue getEnemyMapObservable() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return model.getEnemyMapObservable();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public MapGrid getHumanMapGrid() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return model.getHumanMapGrid();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public MapGrid getEnemyMapGrid() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return model.getEnemyMapGrid();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void setSelectedPerson(Cell cell) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        model.setSelectedPerson(cell);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 26,
      "bos10": 19,
      "-": 105
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/battle/AttackDestroyedShip.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "s-tr"
        },
        "content": "package seedu.address.logic.battle;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Player;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * Represents the result of an attack that hit and destroyed a ship."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": "public class AttackDestroyedShip extends AttackResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private Battleship destroyedShip;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public AttackDestroyedShip(Player attacker, Player target, Coordinates cell, Battleship destroyedShip) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        super(attacker, target, cell);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        this.destroyedShip \u003d destroyedShip;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public boolean isHit() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return String.format(ATTACK + \"destroyed %s\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            attacker.getName(), coords, target.getName(), destroyedShip.getName());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "s-tr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/battle/AttackFailed.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "s-tr"
        },
        "content": "package seedu.address.logic.battle;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Player;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * Represents the result of an invalid attack (e.g. to a non-existent player, or an invalid coordinate)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": "public class AttackFailed extends AttackResult {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private String reason;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private String enemyName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public AttackFailed(Player attacker, String target, Coordinates cell, String reason) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        super(attacker, null, cell);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        this.reason \u003d reason;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        this.enemyName \u003d target;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public AttackFailed(Player attacker, Player target, Coordinates cell, String reason) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        super(attacker, null, cell);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        this.reason \u003d reason;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        this.target \u003d target;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        this.enemyName \u003d target.getName();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Checks if this AttackResult is a hit or a miss"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * (guess they never miss, huh?)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public boolean isHit() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Returns a String representation of the attack result."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return String.format(ATTACK + \"failed: %s\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            attacker.getName(), coords, enemyName, reason);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "s-tr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/battle/AttackHit.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "s-tr"
        },
        "content": "package seedu.address.logic.battle;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Player;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * Represents the result of an attack that hit, but did not destroy, a ship"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": "public class AttackHit extends AttackResult {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public AttackHit(Player attacker, Player target, Coordinates cell) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        super(attacker, target, cell);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public boolean isHit() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return String.format(ATTACK + \"hit\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            attacker.getName(), coords, target.getName());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "s-tr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/battle/AttackMissed.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "s-tr"
        },
        "content": "package seedu.address.logic.battle;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Player;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * AttackMissed represents the result of an attack that missed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": "public class AttackMissed extends AttackResult {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public AttackMissed(Player attacker, Player target, Coordinates cell) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        super(attacker, target, cell);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public boolean isHit() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return String.format(ATTACK + \"missed\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            attacker.getName(), coords, target.getName());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "s-tr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/battle/AttackResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "s-tr"
        },
        "content": "package seedu.address.logic.battle;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.cell.Status;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Player;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * An AttackResult represents the end result of an attack."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": "public abstract class AttackResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String ATTACK \u003d \"Attack by player %s on cell %s of player %s \";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    protected Player attacker;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    protected Player target;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    protected Coordinates coords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    protected AttackResult(Player attacker, Player target, Coordinates coords) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        this.attacker \u003d attacker;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        this.target \u003d target;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        this.coords \u003d coords;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Returns the Player object of the attacker."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public Player getAttacker() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return attacker;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Returns the Player object of the attacked."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public Player getTarget() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return target;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Returns the coordinate of the cell which was attacked."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public Coordinates getCoords() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return coords;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Checks if this AttackResult is a hit or a miss"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * (guess they never miss, huh?)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public abstract boolean isHit();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public Status getStatus() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return attacker.getMapGrid().getCell(coords).getStatus();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Returns a String representation of the attack result."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public abstract String toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "s-tr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/battle/Battle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "s-tr"
        },
        "content": "package seedu.address.logic.battle;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Enemy;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Player;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * API of the Battle component"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * The Battle component manages the battle between a human player and an enemy player."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": "public interface Battle {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Begins the game and gives all players a Map View."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void beginGame();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Handles the human player attacking another player."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * @return Result of the player attack."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public AttackResult humanPerformAttack(Coordinates coord);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Ends the player turn and causes the AI to make its attack."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public AttackResult takeComputerTurn();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Returns the human player."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    Player getHumanPlayer();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Returns the computer player."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    Enemy getEnemyPlayer();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "s-tr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/battle/BattleManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "s-tr"
        },
        "content": "package seedu.address.logic.battle;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.cell.Cell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Enemy;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Player;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * BattleManager is the implementor of the Battle interface."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * In this game, we implement the case of one human player and N AI players (here N\u003d1)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": "public class BattleManager implements Battle {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(BattleManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * The human player"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private Player humanPlayer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * The enemy player"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private Enemy enemyPlayer;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public BattleManager(Player humanPlayer, Enemy enemyPlayer) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        requireNonNull(humanPlayer);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        requireNonNull(enemyPlayer);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        this.humanPlayer \u003d humanPlayer;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        this.enemyPlayer \u003d enemyPlayer;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void beginGame() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        enemyPlayer.prepEnemy();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public AttackResult humanPerformAttack(Coordinates coord) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        requireNonNull(coord);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return performAttack(humanPlayer, enemyPlayer, coord);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * A Player attacks another Player."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private AttackResult performAttack(Player attacker, Player target, Coordinates coord) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        logger.info(String.format(AttackResult.ATTACK, attacker.getName(), coord, target.getName()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            if (target.getMapGrid().attackCell(coord)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                // we hit a ship"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                Cell cell \u003d target.getMapGrid().getCell(coord);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                Battleship hitShip \u003d cell.getBattleship().get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                if (hitShip.isDestroyed()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                    return new AttackDestroyedShip(attacker, target, coord, hitShip);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                    return new AttackHit(attacker, target, coord);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                return new AttackMissed(attacker, target, coord);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        } catch (IndexOutOfBoundsException ioobe) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            return new AttackFailed(attacker, target, coord, \"coordinates out of bounds\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            return new AttackFailed(attacker, target, coord, ex.getMessage());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public AttackResult takeComputerTurn() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // AI takes its turn"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Coordinates enemyAttack \u003d enemyPlayer.enemyShootAt();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        AttackResult res \u003d performAttack(enemyPlayer, humanPlayer, enemyAttack);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // update the enemy with it\u0027s result"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        logger.info(String.format(\"+++++++BATMAN SAYS: LAST HIT ON: \" + enemyAttack.toString()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                + \" status: \" + res.toString()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return res;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Returns the human player in the game."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public Player getHumanPlayer() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return humanPlayer;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Returns the computer player."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public Enemy getEnemyPlayer() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return enemyPlayer;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "s-tr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lucydotc": 2,
      "s-tr": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/battle/state/BattleState.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "s-tr"
        },
        "content": "package seedu.address.logic.battle.state;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * Enum that represents the state the battle is currently in."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": "public enum BattleState {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * The battle has not begun yet."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    PRE_BATTLE(\"Preparing for battle...\", Stage.STAGE_BEFORE),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * The human player is currently putting their ships."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    PLAYER_PUT_SHIP(\"You are currently placing ships...\", Stage.STAGE_SHIP),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * The enemy player is currently putting their ships."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    ENEMY_PUT_SHIP(\"Enemy is currently placing ships...\", Stage.STAGE_SHIP),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * The human player is currently planning their attack."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    PLAYER_ATTACK(\"You are currently planning attack...\", Stage.STAGE_BATTLE),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * The human player is currently planning their attack."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    PLAYER_ATTACK_AFTER(\"You have finished attacking...\", Stage.STAGE_BATTLE),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * The human player is currently planning their attack."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    ENEMY_ATTACK(\"Enemy is currently planning attack...\", Stage.STAGE_BATTLE),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * The human player has won the game."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    PLAYER_WIN(\"You have won!\", Stage.STAGE_AFTER),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * The human player has lost the game.."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    ENEMY_WIN(\"You have lost...\", Stage.STAGE_AFTER);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private static final String STAGE_BEFORE \u003d \"game has not started\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private static final String STAGE_SHIP \u003d \"placing ships\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private static final String STAGE_BATTLE \u003d \"battling\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private static final String STAGE_AFTER \u003d \"game has finished\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * A human-readable description of the state."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Usage: as-is"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * A human-readable description of the current stage of battle."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003cbr\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Usage: \"Cannot (action) while (stage)\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * e.g. \"Cannot put ship while battle is happening\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * e.g. \"Cannot attack while game is finished\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * e.g. \"Cannot attack while game has not started\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private final Stage stage;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private BattleState(String description, Stage stage) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        this.stage \u003d stage;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public String getStage() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return stage.toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Stores the current stage of the game."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Reason for this class is because of this bug:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * https://bugs.java.com/bugdatabase/view_bug.do?bug_id\u003d6676362"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private enum Stage {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        STAGE_BEFORE(\"game has not started\"),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        STAGE_SHIP(\"placing ships\"),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        STAGE_BATTLE(\"battling\"),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        STAGE_AFTER(\"game has finished\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        private final String stage;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Stage(String stage) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            this.stage \u003d stage;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            return stage;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "s-tr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 96
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Cell;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * Adds a cell to the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"a\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a cell to the address book. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New cell added: %1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This cell already exists in the address book\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private final Cell toAdd;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Cell}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public AddCommand(Cell cell) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        requireNonNull(cell);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        toAdd \u003d cell;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 11,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AttackCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "s-tr"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import java.util.EnumSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.battle.AttackResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.battle.state.BattleState;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Player;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * Attacks a cell on the board."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": "public class AttackCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"attack\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String COMMAND_ALIAS1 \u003d \"shoot\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String COMMAND_ALIAS2 \u003d \"hit\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String COMMAND_ALIAS3 \u003d \"fire\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Attacks the specified cell.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        + \"SQUARE (a letter followed by a positive integer)\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        + \"Example: attack b5\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String MESSAGE_DUPLICATE \u003d \"You have already attacked cell \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private Coordinates coord;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public AttackCommand(Coordinates coord) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        requireNonNull(coord);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        this.coord \u003d coord;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        setPermissibleStates(EnumSet.of(BattleState.PLAYER_ATTACK));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // assert canExecuteIn(model.getBattleState());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Player human \u003d model.getHumanPlayer();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        AttackResult res;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // check if the coordinate is already hit, prevent duplicate attacks"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        if (human.addToTargetHistory(coord)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bos10"
        },
        "content": "            res \u003d model.getBattle().humanPerformAttack(coord);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE + coord);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bos10"
        },
        "content": "        model.getPlayerStats().addResultToStats(res);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        model.updateUi();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return new CommandResult(res.toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        if (other instanceof AttackCommand) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            AttackCommand o \u003d (AttackCommand) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            return (this \u003d\u003d o) || (this.coord.equals(o.coord));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "s-tr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 66,
      "bos10": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/BeginCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "s-tr"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import java.util.EnumSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.battle.state.BattleState;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * Ends the ship-placing phase and begins the attacking phase."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": "public class BeginCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"begin\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String COMMAND_ALIAS1 \u003d \"start\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        + \": Finishes placing ships and starts the game..\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String MESSAGE_BEGIN_SUCCESS \u003d \"Game has started\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public BeginCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        setPermissibleStates(EnumSet.of(BattleState.PLAYER_PUT_SHIP));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // assert canExecuteIn(model.getBattleState());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        model.setBattleState(BattleState.ENEMY_PUT_SHIP);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        model.getEnemyPlayer().prepEnemy();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        model.setBattleState(BattleState.PLAYER_ATTACK);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return new CommandResult(MESSAGE_BEGIN_SUCCESS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "s-tr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.MapGrid;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Input has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        model.setAddressBook(new MapGrid());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 2,
      "bos10": 1,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/Command.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import java.util.EnumSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.battle.state.BattleState;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * The states that this command can be executed in."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private Set\u003cBattleState\u003e permissibleStates \u003d EnumSet.allOf(BattleState.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model, CommandHistory history) throws CommandException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Changes the permissible states of the command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    protected final void setPermissibleStates(Set\u003cBattleState\u003e permissibleStates) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        requireNonNull(permissibleStates);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        this.permissibleStates \u003d permissibleStates;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Checks if this command can be executed in a certain state."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003cbr\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * By default, commands can be run in all states. Those commands which are not"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * should set the permissible states using \u003ccode\u003esetPermissibleStates()\u003c/code\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * inside the constructor."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003cbr\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Before calling execute() using a \u003ccode\u003eModel\u003c/code\u003e, one must call this"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * method on the BattleState stored in it."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public final boolean canExecuteIn(BattleState battleState) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return permissibleStates.contains(battleState);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 31,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Cell;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * Deletes a cell identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"d\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            + \": Deletes the cell identified by the index number used in the displayed cell list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Cell: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        List\u003cCell\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell cellToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        model.deletePerson(cellToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, cellToDelete));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 9,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Cell;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * Edits the details of an existing cell in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the cell identified \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            + \"by the index number used in the displayed cell list. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Cell: %1$s\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This cell already exists in the address book.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * @param index of the cell in the filtered cell list to edit"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * @param editPersonDescriptor details to edit the cell with"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        List\u003cCell\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell cellToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell editedCell \u003d createEditedPerson(cellToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        if (!cellToEdit.isSamePerson(editedCell) \u0026\u0026 model.hasPerson(editedCell)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        model.setPerson(cellToEdit, editedCell);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedCell));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Creates and returns a {@code Cell} with the details of {@code cellToEdit}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private static Cell createEditedPerson(Cell cellToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assert cellToEdit !\u003d null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(cellToEdit.getName());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(cellToEdit.getPhone());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(cellToEdit.getEmail());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(cellToEdit.getAddress());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(cellToEdit.getTags());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return new Cell(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Stores the details to edit the cell with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * corresponding field value of the cell."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 28,
      "iwle": 1,
      "-": 199
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EndTurnCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "s-tr"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import java.util.EnumSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.battle.AttackResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.battle.state.BattleState;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * Ends the player\u0027s turn."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": "public class EndTurnCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"end\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String COMMAND_ALIAS1 \u003d \"endturn\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Ends the player\u0027s turn.\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public EndTurnCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        setPermissibleStates(EnumSet.of(BattleState.PLAYER_ATTACK, BattleState.PLAYER_ATTACK_AFTER));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // assert canExecuteIn(model.getBattleState());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        model.setBattleState(BattleState.ENEMY_ATTACK);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        AttackResult res \u003d model.getBattle().takeComputerTurn();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        model.getEnemyPlayer().receiveStatus(res.getStatus());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        model.updateUi();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        model.setBattleState(BattleState.PLAYER_ATTACK);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return new CommandResult(res.toString() + \"\\nYour turn.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "s-tr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 1,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/InitialiseMapCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Cell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * Initialise map to size input by user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public class InitialiseMapCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"init\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"i\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static final int MAXIMUM_MAP_SIZE \u003d 10;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static final int MINIMUM_MAP_SIZE \u003d 6;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Initialise the map to specified size. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            + \"MAPSIZE (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            + \"8 \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Map initialised to size: %d\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static final String MESSAGE_INVALID_MAP_SIZE \u003d \"Map size must be between %d to %d, inclusive.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private final int mapSize;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Initialise map command"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public InitialiseMapCommand(int size) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        mapSize \u003d size;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        if (mapSize \u003e MAXIMUM_MAP_SIZE || mapSize \u003c MINIMUM_MAP_SIZE) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_MAP_SIZE, MINIMUM_MAP_SIZE, MAXIMUM_MAP_SIZE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell[][] cellGrid \u003d initialise2dArray(mapSize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        model.getHumanMapGrid().initialise(cellGrid);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        model.getEnemyMapGrid().initialise(cellGrid);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        model.getHumanPlayer().resetFleet(mapSize);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        model.getEnemyPlayer().resetFleet(mapSize);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, mapSize));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Initialise the 2D array given the map size"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private Cell[][] initialise2dArray(int mapSize) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell[][] cellGrid \u003d new Cell[mapSize][mapSize];"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        char row \u003d \u0027a\u0027;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        for (int i \u003d 0; i \u003c mapSize; i++) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            for (int j \u003d 0; j \u003c mapSize; j++) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                cellGrid[i][j] \u003d new Cell(new Coordinates(String.format(\"%c%d\", row + i, j + 1)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return cellGrid;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                || (other instanceof InitialiseMapCommand); // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                //\u0026\u0026 toAdd.equals(((InitialiseMapCommand) other).toAdd));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.player.Fleet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e optionalTagSet;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private Optional\u003cName\u003e optionalName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public ListCommand(Optional\u003cSet\u003cTag\u003e\u003e optionalTagSet, Optional\u003cName\u003e optionalName) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.optionalTagSet \u003d optionalTagSet;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.optionalName \u003d optionalName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Fleet fleet \u003d model.getHumanPlayer().getFleet();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (fleet.getDeployedFleet().size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return new CommandResult(\"No ships put down.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Set\u003cFleet.FleetEntry\u003e fleetResult \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (!optionalTagSet.isPresent() \u0026\u0026 !optionalName.isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iwle"
        },
        "content": "            // list all battleships"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": "            for (int i \u003d 0; i \u003c fleet.getDeployedFleet().size(); i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iwle"
        },
        "content": "                builder.append(fleet.getDeployedFleet().get(i))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iwle"
        },
        "content": "                        .append(\"\\n\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return new CommandResult(builder.toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iwle"
        },
        "content": "        } else if (optionalName.isPresent() \u0026\u0026 optionalTagSet.isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iwle"
        },
        "content": "            fleetResult.addAll(fleet.getDeployedFleet().stream()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    .filter(fleetEntry -\u003e fleetEntry.getBattleship().getName().equals(optionalName.get()))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    .filter(fleetEntry -\u003e fleetEntry.getBattleship().getTags().containsAll(optionalTagSet.get()))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    .collect(Collectors.toList())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iwle"
        },
        "content": "            );"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iwle"
        },
        "content": "        } else if (optionalName.isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iwle"
        },
        "content": "            fleetResult.addAll(fleet.getByName(optionalName.get()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iwle"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iwle"
        },
        "content": "            fleetResult.addAll(fleet.getByTags(optionalTagSet.get()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iwle"
        },
        "content": "        for (Fleet.FleetEntry fleetEntry : fleetResult) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iwle"
        },
        "content": "            builder.append(fleetEntry)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    .append(\"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (builder.toString().isEmpty()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return new CommandResult(\"There are no results.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return new CommandResult(builder.toString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Optional\u003cName\u003e getOptionalName() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return optionalName;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Optional\u003cSet\u003cTag\u003e\u003e getOptionalTagSet() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return optionalTagSet;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iwle"
        },
        "content": "                || (other instanceof ListCommand) // instanceof handles nulls"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iwle"
        },
        "content": "                \u0026\u0026 this.getOptionalName().equals(((ListCommand) other).getOptionalName())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iwle"
        },
        "content": "                \u0026\u0026 this.getOptionalTagSet().equals(((ListCommand) other).getOptionalTagSet());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 70,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListTagsCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class ListTagsCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listTags\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"List all tags: \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + model.getHumanPlayer().getFleet().getAllTags());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/PutShipCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COORDINATES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ORIENTATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.BoundaryValueChecker;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.MapGrid;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Orientation;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.cell.Cell;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": " * Puts ship in an existing cell on the map."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class PutShipCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"put\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"p\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Puts ship in cell that is identified \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + \"by the row number and orientation (vertical/horizontal) provided by the user. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + \"[\" + PREFIX_COORDINATES + \"COORDINATES]\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + \"[\" + PREFIX_ORIENTATION + \"ORIENTATION]\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + PREFIX_NAME + \"Destroyer \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + PREFIX_COORDINATES + \"c1\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + PREFIX_ORIENTATION + \"vertical\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Put ship in cell: %1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String MESSAGE_BATTLESHIP_PRESENT \u003d \"There is already a ship on the coordinate.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String MESSAGE_BATTLESHIP_PRESENT_BODY_VERTICAL \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": "            \"There is already a ship along the vertical coordinates\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String MESSAGE_BATTLESHIP_PRESENT_BODY_HORIZONTAL \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": "            \"There is already a ship along the horizontal coordinates\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String MESSAGE_OUT_OF_BOUNDS \u003d \"Out of bounds\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private final Coordinates coordinates;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private final Battleship battleship;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private final Orientation orientation;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param coordinates of the cell in the filtered cell list to edit"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param battleship battleship to place in the cell"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public PutShipCommand(Coordinates coordinates, Battleship battleship, Orientation orientation) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iwle"
        },
        "content": "        requireNonNull(coordinates);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iwle"
        },
        "content": "        requireNonNull(battleship);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iwle"
        },
        "content": "        requireNonNull(orientation);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.coordinates \u003d coordinates;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.battleship \u003d battleship;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.orientation \u003d orientation;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iwle"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iwle"
        },
        "content": "        MapGrid mapGrid \u003d model.getHumanMapGrid();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iwle"
        },
        "content": "        BoundaryValueChecker boundaryValueChecker \u003d new BoundaryValueChecker(mapGrid, battleship,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iwle"
        },
        "content": "                coordinates, orientation);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iwle"
        },
        "content": "        boundaryValueChecker.performChecks();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iwle"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iwle"
        },
        "content": "            checkEnoughBattleships(model, battleship, 1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iwle"
        },
        "content": "            mapGrid.putShip(battleship, coordinates, orientation);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iwle"
        },
        "content": "            model.deployBattleship(battleship, coordinates, orientation);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iwle"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException aiobe) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iwle"
        },
        "content": "            throw new CommandException(MESSAGE_OUT_OF_BOUNDS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iwle"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iwle"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell cellToEdit \u003d model.getHumanMapGrid().getCell(coordinates);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iwle"
        },
        "content": "        model.updateUi();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, cellToEdit));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Checks if there are enough battleships to use. Throws exception if otherwise."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static void checkEnoughBattleships(Model model, Battleship battleship, int numBattleship)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iwle"
        },
        "content": "            throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (!model.isEnoughBattleships(battleship, numBattleship)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iwle"
        },
        "content": "            throw new Exception(\"Not enough \" + battleship.getName() + \"s.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (!(other instanceof PutShipCommand)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iwle"
        },
        "content": "        PutShipCommand e \u003d (PutShipCommand) other;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return battleship.equals(e.battleship)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iwle"
        },
        "content": "                \u0026\u0026 coordinates.equals(e.coordinates);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "erjillsison": 1,
      "iwle": 117
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Cell;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * Selects a cell identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            + \": Selects the cell identified by the index number used in the displayed cell list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Cell: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        List\u003cCell\u003e filteredCellList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredCellList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        model.setSelectedPerson(filteredCellList.get(targetIndex.getZeroBased()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 7,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/StatsCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bos10"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.model.statistics.PlayerStatistics;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.ui.StatisticView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bos10"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bos10"
        },
        "content": "public class StatsCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"stats\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"CURRENT STATISTICS:\\n%1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bos10"
        },
        "content": "        ArrayList\u003cString\u003e outputStatistics \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bos10"
        },
        "content": "        PlayerStatistics playerStats \u003d model.getPlayerStats();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bos10"
        },
        "content": "        String attacksMade \u003d \"Attacks Made : \" + playerStats.getAttacksMade();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bos10"
        },
        "content": "        String movesLeft \u003d \"Moves Left : \" + playerStats.getMovesLeft();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bos10"
        },
        "content": "        String hitCount \u003d \"Successful Hit : \" + playerStats.getHitCount();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bos10"
        },
        "content": "        String missCount \u003d \"Misses : \" + playerStats.getMissCount();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bos10"
        },
        "content": "        String shipsDestroyed \u003d \"Enemy Ships Destroyed : \" + playerStats.getEnemyShipsDestroyed();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bos10"
        },
        "content": "        String accuracy \u003d \"Accuracy : \" + playerStats.getAccuracy();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bos10"
        },
        "content": "        // Group data together in a list"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bos10"
        },
        "content": "        outputStatistics.add(movesLeft);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bos10"
        },
        "content": "        outputStatistics.add(attacksMade);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bos10"
        },
        "content": "        outputStatistics.add(hitCount);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bos10"
        },
        "content": "        outputStatistics.add(missCount);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bos10"
        },
        "content": "        outputStatistics.add(shipsDestroyed);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bos10"
        },
        "content": "        outputStatistics.add(accuracy);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bos10"
        },
        "content": "        new StatisticView(new Stage(), playerStats.generateData()).show();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", outputStatistics)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bos10": 28,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Cell;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell cell \u003d new Cell(name, phone, email, address, tagList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return new AddCommand(cell);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 6,
      "iwle": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.commands.AttackCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.commands.BeginCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.commands.EndTurnCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.logic.commands.InitialiseMapCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.logic.commands.ListTagsCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.logic.commands.PutShipCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.logic.commands.StatsCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        case AddCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        case DeleteCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return new ListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iwle"
        },
        "content": "        case ListTagsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return new ListTagsCommand();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bos10"
        },
        "content": "        case StatsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bos10"
        },
        "content": "            return new StatsCommand();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        case InitialiseMapCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        case InitialiseMapCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            return new InitialiseMapCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iwle"
        },
        "content": "        case PutShipCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iwle"
        },
        "content": "        case PutShipCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return new PutShipCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        case AttackCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        case AttackCommand.COMMAND_ALIAS1:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        case AttackCommand.COMMAND_ALIAS2:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        case AttackCommand.COMMAND_ALIAS3:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            return new AttackCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        case EndTurnCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        case EndTurnCommand.COMMAND_ALIAS1:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            return new EndTurnCommand();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        case BeginCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        case BeginCommand.COMMAND_ALIAS1:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            return new BeginCommand();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 8,
      "iwle": 9,
      "s-tr": 17,
      "bos10": 3,
      "-": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AttackCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "s-tr"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.commands.AttackCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * Parses attack commands."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": "public class AttackCommandParser implements Parser\u003cAttackCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public AttackCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        String uInput \u003d userInput.trim();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        if (Coordinates.isValidCoordinates(uInput)) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            return new AttackCommand(new Coordinates(uInput));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AttackCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final Prefix PREFIX_COORDINATES \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final Prefix PREFIX_ORIENTATION \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 2,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 1,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/InitialiseMapCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.logic.commands.InitialiseMapCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * Parses input arguments and creates a new InitialiseMapCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public class InitialiseMapCommandParser implements Parser\u003cInitialiseMapCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public InitialiseMapCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        int mapSize;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            mapSize \u003d ParserUtil.parseMapSize(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                    InitialiseMapCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return new InitialiseMapCommand(mapSize);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class ListCommandParser implements Parser\u003cListCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e tagSet \u003d Optional.empty();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private Optional\u003cName\u003e name \u003d Optional.empty();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public ListCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TAG, PREFIX_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_TAG)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iwle"
        },
        "content": "            tagSet \u003d Optional.of(ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_NAME)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iwle"
        },
        "content": "            name \u003d Optional.of(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return (new ListCommand(this.tagSet, this.name));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.AircraftCarrierBattleship;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.CruiserBattleship;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.DestroyerBattleship;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Orientation;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static final String MESSAGE_INVALID_SIZE \u003d \"Map size is not a non-zero unsigned integer\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Parses mapSize into an int and returns it."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * @param mapSize"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * @throws ParseException if the specified mapSize is invalid (not non-zero unsigned integer)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static int parseMapSize(String mapSize) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        String trimmedSize \u003d mapSize.trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedSize)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_SIZE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return Integer.parseInt(trimmedSize);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Parses a {@code Name name} into a {@code Battleship}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @throws ParseException if the given (@code name} is invalid."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static Battleship parseBattleship(Name name, Set\u003cTag\u003e tagSet) throws ParseException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iwle"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleship;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (name.fullName.toLowerCase().equals(\"destroyer\")) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iwle"
        },
        "content": "            battleship \u003d new DestroyerBattleship(tagSet);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iwle"
        },
        "content": "        } else if (name.fullName.toLowerCase().equals(\"cruiser\")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iwle"
        },
        "content": "            battleship \u003d new CruiserBattleship(tagSet);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iwle"
        },
        "content": "        } else if (name.fullName.toLowerCase().equals(\"aircraft carrier\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iwle"
        },
        "content": "            battleship \u003d new AircraftCarrierBattleship(tagSet);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iwle"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iwle"
        },
        "content": "            throw new ParseException(\"Error\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return battleship;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Parses a {@code String coordinate} into a {@code Coordinate}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @throws ParseException if the given {@code coordinate} is invalid."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static Coordinates parseCoordinates(String coordinate) throws ParseException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iwle"
        },
        "content": "        requireNonNull(coordinate);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iwle"
        },
        "content": "        String trimmedCoordinate \u003d coordinate.trim();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (!Coordinates.isValidCoordinates(trimmedCoordinate)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iwle"
        },
        "content": "            throw new ParseException(Coordinates.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return new Coordinates(trimmedCoordinate);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Parses a {@code String orientation} into a {@code Orientation}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static Orientation parseOrientation(String orientation) throws ParseException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iwle"
        },
        "content": "        requireNonNull(orientation);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iwle"
        },
        "content": "        String trimmedOrientation \u003d orientation.trim();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (!Orientation.isValidOrientation(trimmedOrientation)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iwle"
        },
        "content": "            throw new ParseException(Orientation.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return new Orientation(trimmedOrientation);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 17,
      "iwle": 60,
      "-": 121
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/PutShipCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COORDINATES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ORIENTATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.logic.commands.PutShipCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Orientation;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": " * Parses input arguments and creates a new PutShipCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class PutShipCommandParser implements Parser\u003cPutShipCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the PutShipCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * and returns an PutShipCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public PutShipCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iwle"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iwle"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_COORDINATES, PREFIX_ORIENTATION, PREFIX_TAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_COORDINATES, PREFIX_ORIENTATION)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iwle"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, PutShipCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Coordinates coordinates \u003d ParserUtil.parseCoordinates(argMultimap.getValue(PREFIX_COORDINATES).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation orientation \u003d ParserUtil.parseOrientation(argMultimap.getValue(PREFIX_ORIENTATION).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_TAG)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": "            Set\u003cTag\u003e tagSet \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iwle"
        },
        "content": "            // Default 1 by 1 battleship"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iwle"
        },
        "content": "            Battleship battleship \u003d ParserUtil.parseBattleship(name, tagSet);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return new PutShipCommand(coordinates, ParserUtil.parseBattleship(name, tagSet), orientation);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return new PutShipCommand(coordinates, ParserUtil.parseBattleship(name, new HashSet\u003c\u003e()), orientation);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/BoundaryValueChecker.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Orientation;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.cell.Cell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class BoundaryValueChecker {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Put ship in cell: %1$s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String MESSAGE_BATTLESHIP_PRESENT \u003d \"There is already a ship on the coordinate.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String MESSAGE_BATTLESHIP_PRESENT_BODY_VERTICAL \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "            \"There is already a ship along the vertical coordinates\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String MESSAGE_BATTLESHIP_PRESENT_BODY_HORIZONTAL \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "            \"There is already a ship along the horizontal coordinates\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String MESSAGE_OUT_OF_BOUNDS \u003d \"Out of bounds\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private final MapGrid mapGrid;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private final Battleship battleship;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private final Coordinates coordinates;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private final Orientation orientation;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public BoundaryValueChecker(MapGrid mapGrid, Battleship battleship,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": "                                Coordinates coordinates, Orientation orientation) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.mapGrid \u003d mapGrid;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.battleship \u003d battleship;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.coordinates \u003d coordinates;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.orientation \u003d orientation;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Performs all the relevant checks."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @throws CommandException when a check fails"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void performChecks() throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (!this.isHeadWithinBounds()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iwle"
        },
        "content": "        } else if (this.orientation.isHorizontal()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": "            if (!this.isBattleshipAbsent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iwle"
        },
        "content": "                throw new CommandException(MESSAGE_BATTLESHIP_PRESENT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iwle"
        },
        "content": "            } else if (!this.isBodyWithinHorizontalBounds()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iwle"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_BODY_LENGTH_TOO_LONG);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iwle"
        },
        "content": "            } else if (!this.isHorizontalClear()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iwle"
        },
        "content": "                throw new CommandException(MESSAGE_BATTLESHIP_PRESENT_BODY_HORIZONTAL);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iwle"
        },
        "content": "        } else if (this.orientation.isVertical()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iwle"
        },
        "content": "            if (!this.isBattleshipAbsent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iwle"
        },
        "content": "                throw new CommandException(MESSAGE_BATTLESHIP_PRESENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iwle"
        },
        "content": "            } else if (!this.isBodyWithinVerticalBounds()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iwle"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_BODY_LENGTH_TOO_LONG);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iwle"
        },
        "content": "            } else if (!this.isVerticalClear()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iwle"
        },
        "content": "                throw new CommandException(MESSAGE_BATTLESHIP_PRESENT_BODY_VERTICAL);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Checks if the head of a battleship is within bounds."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public boolean isHeadWithinBounds() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Index rowIndex \u003d coordinates.getRowIndex();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Index colIndex \u003d coordinates.getColIndex();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if ((rowIndex.getZeroBased() \u003e mapGrid.getMapSize())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iwle"
        },
        "content": "                || colIndex.getZeroBased() \u003e mapGrid.getMapSize()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Checks if the body length of a battleship is within bounds."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Check is horizontal."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public boolean isBodyWithinHorizontalBounds() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Index colIndex \u003d coordinates.getColIndex();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int length \u003d battleship.getLength();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (colIndex.getZeroBased() + length \u003e mapGrid.getMapSize()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Checks if the body of a battleship is within bounds."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Check is vertical."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public boolean isBodyWithinVerticalBounds() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Index rowIndex \u003d coordinates.getRowIndex();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int length \u003d battleship.getLength();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (rowIndex.getZeroBased() + length \u003e mapGrid.getMapSize()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Checks if there is no battleship on the grids."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public boolean isBattleshipAbsent() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Index rowIndex \u003d coordinates.getRowIndex();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Index colIndex \u003d coordinates.getColIndex();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Cell cellToInspect \u003d mapGrid.getCell(rowIndex.getZeroBased(), colIndex.getZeroBased());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (cellToInspect.hasBattleShip()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Checks if the vertical does not have any other battleships."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public boolean isVerticalClear() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Index rowIndex \u003d coordinates.getRowIndex();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Index colIndex \u003d coordinates.getColIndex();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int length \u003d battleship.getLength();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iwle"
        },
        "content": "        for (int i \u003d 1; i \u003c length; i++) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iwle"
        },
        "content": "            Cell cellToInspect \u003d mapGrid.getCell(rowIndex.getZeroBased() + i,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    colIndex.getZeroBased());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iwle"
        },
        "content": "            if (cellToInspect.hasBattleShip()) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iwle"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Checks if the horizontal does not have any other battleships."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public boolean isHorizontalClear() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Index rowIndex \u003d coordinates.getRowIndex();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Index colIndex \u003d coordinates.getColIndex();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int length \u003d battleship.getLength();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iwle"
        },
        "content": "        for (int i \u003d 1; i \u003c length; i++) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iwle"
        },
        "content": "            Cell cellToInspect \u003d mapGrid.getCell(rowIndex.getZeroBased(),"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    colIndex.getZeroBased() + i);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iwle"
        },
        "content": "            if (cellToInspect.hasBattleShip()) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iwle"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 169
    }
  },
  {
    "path": "src/main/java/seedu/address/model/MapGrid.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import javafx.beans.property.BooleanProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import javafx.beans.property.SimpleBooleanProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import javafx.beans.value.ObservableBooleanValue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.InvalidationListenerManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Orientation;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Cell;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Row;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Status;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * Wraps all data at the map grid level"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public class MapGrid implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private Cell[][] cellGrid;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private int size;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private final Row persons;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private BooleanProperty uiUpdateSwitch \u003d new SimpleBooleanProperty();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        persons \u003d new Row();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public MapGrid() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        this.size \u003d 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        cellGrid \u003d new Cell[0][0];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Creates an MapGrid using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public MapGrid(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    // 2D map grid operations"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Initialises the 2D Map from the given 2D Cell array"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void initialise(Cell[][] map) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        this.size \u003d map.length;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        cellGrid \u003d new Cell[size][size];"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        copy2dArray(cellGrid, map);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        updateUi();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns a copy of the map grid"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public Cell[][] get2dArrayMapGridCopy() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell[][] mapCopy \u003d new Cell[size][size];"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        copy2dArray(mapCopy, cellGrid);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return mapCopy;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns a 2D array of {@code Status} which represents the view of this map from this map owner\u0027s perspective."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public Status[][] getPlayerMapView() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Status[][] playerMapView \u003d new Status[size][size];"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            for (int j \u003d 0; j \u003c size; j++) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                playerMapView[i][j] \u003d cellGrid[i][j].getStatus();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return playerMapView;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns a 2D array of {@code Status} which represents the view of this map from"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * the perspective of the enemy of this map\u0027s owner."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public Status[][] getEnemyMapView() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Status[][] enemyMapView \u003d new Status[size][size];"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            for (int j \u003d 0; j \u003c size; j++) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                Status cellStatus \u003d cellGrid[i][j].getStatus();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                enemyMapView[i][j] \u003d (cellStatus \u003d\u003d Status.EMPTY || cellStatus \u003d\u003d Status.SHIP)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                        ? Status.HIDDEN : cellStatus;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return enemyMapView;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Utility function to do a deep copy of a 2D array"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private void copy2dArray(Cell[][] output, Cell[][] toBeCopied) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            for (int j \u003d 0; j \u003c size; j++) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                output[i][j] \u003d new Cell(toBeCopied[i][j]);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns map size"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public int getMapSize() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return this.size;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    // TODO: Remove getCell methods"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns the cell in the given coordinates"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public Cell getCell(Coordinates coordinates) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return cellGrid[coordinates.getRowIndex().getZeroBased()][coordinates.getColIndex().getZeroBased()];"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public Cell getCell(int row, int column) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return cellGrid[row][column];"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    // UI operations"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Used to Update the UI."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * A listener will be added to this observable value in the UI."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Once this value changes the UI will be updated."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public ObservableBooleanValue getObservableValue() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return uiUpdateSwitch;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Change the ObservableValue to trigger the UI change"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void updateUi() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        if (uiUpdateSwitch.getValue() \u003d\u003d false) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            uiUpdateSwitch.setValue(true);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            uiUpdateSwitch.setValue(false);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    // Cell operations"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Put battleship in the given coordinates"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void putShip(Coordinates coordinates, Battleship battleship) throws ArrayIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        if (coordinates.getColIndex().getOneBased() \u003e getMapSize()) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            throw new ArrayIndexOutOfBoundsException(\"Coordinates are outside of the map\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        cellGrid[coordinates.getRowIndex().getZeroBased()][coordinates.getColIndex().getZeroBased()]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            .putShip(battleship);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        updateUi();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Attack a specified cell. Returns true if a ship was hit otherwise false."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public boolean attackCell(Coordinates coordinates) throws ArrayIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        if (coordinates.getColIndex().getOneBased() \u003e getMapSize()) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            throw new ArrayIndexOutOfBoundsException(\"Coordinates are outside of the map\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        boolean isSuccessfulHit \u003d"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                cellGrid[coordinates.getRowIndex().getZeroBased()][coordinates.getColIndex().getZeroBased()]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                        .receiveAttack();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        updateUi();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return isSuccessfulHit;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Replaces the contents of the cell list with {@code cells}."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * {@code cells} must not contain duplicate cells."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void setPersons(List\u003cCell\u003e cells) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        this.persons.setPersons(cells);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Resets the existing data of this {@code MapGrid} with {@code newData}."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    //// cell-level operations"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns true if a cell with the same identity as {@code cell} exists in the address book."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public boolean hasPerson(Cell cell) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        requireNonNull(cell);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return persons.contains(cell);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Adds a cell to the address book."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * The cell must not already exist in the address book."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void addPerson(Cell p) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Replaces the given cell {@code target} in the list with {@code editedCell}."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * The cell identity of {@code editedCell} must not be the same as another existing cell in the address book."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void setPerson(Cell target, Cell editedCell) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        requireNonNull(editedCell);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        persons.setPerson(target, editedCell);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Removes {@code key} from this {@code MapGrid}."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void removePerson(Cell key) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Removes {@code tag} from {@code cell} in this {@code MapGrid}."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void removeTag(Tag tag, Cell cell) throws DuplicatePersonException,"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "iwle"
        },
        "content": "            PersonNotFoundException {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Set\u003cTag\u003e newTags \u003d new HashSet\u003c\u003e(cell.getTags());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "iwle"
        },
        "content": "        newTags.remove(tag);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell editedCell \u003d new Cell("
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                cell.getName(),"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                cell.getPhone(),"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                cell.getEmail(),"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                cell.getAddress(),"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "iwle"
        },
        "content": "                newTags);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        persons.setPerson(cell, editedCell);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Remove {@code tag} from app {@code cell}s in this {@code MapGrid}."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void deleteTag(Tag tag) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        for (Cell cell : this.getPersonList()) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            this.removeTag(tag, cell);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Put battleship on map grid."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void putShip(Battleship battleship, Coordinates coordinates, Orientation orientation)"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "iwle"
        },
        "content": "            throws ArrayIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int rowIndexAsInt \u003d coordinates.getRowIndex().getZeroBased();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int colIndexAsInt \u003d coordinates.getColIndex().getZeroBased();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if ((coordinates.getColIndex().getOneBased() \u003e getMapSize())"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "iwle"
        },
        "content": "            || (coordinates.getRowIndex().getOneBased() \u003e getMapSize())) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "iwle"
        },
        "content": "            throw new ArrayIndexOutOfBoundsException(\"Coordinates are outside of the map\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int rowInt \u003d rowIndexAsInt;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int colInt \u003d colIndexAsInt;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "iwle"
        },
        "content": "        for (int i \u003d 0; i \u003c battleship.getLength(); i++) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "iwle"
        },
        "content": "            if (orientation.isHorizontal()) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "iwle"
        },
        "content": "                colInt \u003d colIndexAsInt + i;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "iwle"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "iwle"
        },
        "content": "                rowInt \u003d rowIndexAsInt + i;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "iwle"
        },
        "content": "            cellGrid[rowInt][colInt].putShip(battleship);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "     * Notifies listeners that the address book has been modified."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void indicateModified() {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(this);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public ObservableList\u003cCell\u003e getPersonList() {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                || (other instanceof MapGrid // instanceof handles nulls"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                \u0026\u0026 persons.equals(((MapGrid) other).persons));"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 194,
      "iwle": 47,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import javafx.beans.value.ObservableBooleanValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.battle.Battle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.battle.state.BattleState;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Orientation;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Cell;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Enemy;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.player.Fleet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Player;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.model.statistics.PlayerStatistics;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    Predicate\u003cCell\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Update the UI"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    void updateUi();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns the observable value in the human map. Used by the Ui to listen to for changes."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    ObservableBooleanValue getHumanMapObservable();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns the observable value in the human map. Used by the Ui to listen to for changes."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    ObservableBooleanValue getEnemyMapObservable();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns the player map grid"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    MapGrid getHumanMapGrid();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns the enemy map grid"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    MapGrid getEnemyMapGrid();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /** Returns the MapGrid */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns true if a cell with the same identity as {@code cell} exists in the address book."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    boolean hasPerson(Cell cell);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Deletes the given cell."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * The cell must exist in the address book."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    void deletePerson(Cell target);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Adds the given cell."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * {@code cell} must not already exist in the address book."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    void addPerson(Cell cell);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Replaces the given cell {@code target} with {@code editedCell}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * The cell identity of {@code editedCell} must not be the same as another existing cell in the address book."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    void setPerson(Cell target, Cell editedCell);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /** Returns an unmodifiable view of the filtered cell list */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    ObservableList\u003cCell\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Updates the filter of the filtered cell list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cCell\u003e predicate);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canUndoAddressBook();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has undone address book states to restore."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canRedoAddressBook();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    void undoAddressBook();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    void redoAddressBook();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    void commitAddressBook();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Selected cell in the filtered cell list."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * null if no cell is selected."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    ReadOnlyProperty\u003cCell\u003e selectedPersonProperty();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns the selected cell in the filtered cell list."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * null if no cell is selected."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    Cell getSelectedPerson();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns the map size"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    int getMapSize();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Sets the selected cell in the filtered cell list."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    void setSelectedPerson(Cell cell);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bos10"
        },
        "content": "    PlayerStatistics getPlayerStats();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iwle"
        },
        "content": "    Fleet getFleet();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Deploys a battleship."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iwle"
        },
        "content": "    void deployBattleship(Battleship battleship, Coordinates coordinates, Orientation orientation);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Checks number of battleships available."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iwle"
        },
        "content": "    boolean isEnoughBattleships(Battleship battleship, int numBattleship);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Returns the human player in the game."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    Player getHumanPlayer();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Returns the computer player."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    Enemy getEnemyPlayer();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Retrieves the Battle API."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    Battle getBattle();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Retrieves the current state of the battle."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    void setBattleState(BattleState battleState);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Retrieves the current state of the battle."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    BattleState getBattleState();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 56,
      "iwle": 16,
      "s-tr": 22,
      "bos10": 3,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import javafx.beans.value.ObservableBooleanValue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.battle.Battle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.battle.BattleManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.battle.state.BattleState;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Orientation;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Cell;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Enemy;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.player.Fleet;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Player;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.model.statistics.PlayerStatistics;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private final VersionedMapGrid versionedAddressBook;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private final FilteredList\u003cCell\u003e filteredCells;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private final SimpleObjectProperty\u003cCell\u003e selectedPerson \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private PlayerStatistics playerStats;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private BattleManager batMan;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private BattleState state;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        versionedAddressBook \u003d new VersionedMapGrid(addressBook);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        filteredCells \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        filteredCells.addListener(this::ensureSelectedPersonIsValid);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bos10"
        },
        "content": "        // Initialize new statistics"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.playerStats \u003d new PlayerStatistics();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        batMan \u003d new BattleManager(new Player(), new Enemy());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        state \u003d BattleState.PRE_BATTLE;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        this(new MapGrid(), new UserPrefs());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public ModelManager(BattleManager batMan) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        this.batMan \u003d batMan;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d MapGrid \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public MapGrid getHumanMapGrid() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return getHumanPlayer().getMapGrid();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public MapGrid getEnemyMapGrid() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return getEnemyPlayer().getMapGrid();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public int getMapSize() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return getHumanPlayer().getMapGrid().getMapSize();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void updateUi() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        getHumanMapGrid().updateUi();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        getEnemyMapGrid().updateUi();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public ObservableBooleanValue getHumanMapObservable() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return getHumanMapGrid().getObservableValue();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public ObservableBooleanValue getEnemyMapObservable() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return getEnemyMapGrid().getObservableValue();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public boolean hasPerson(Cell cell) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        requireNonNull(cell);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return versionedAddressBook.hasPerson(cell);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void deletePerson(Cell target) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.removePerson(target);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void addPerson(Cell cell) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        versionedAddressBook.addPerson(cell);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void setPerson(Cell target, Cell editedCell) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        requireAllNonNull(target, editedCell);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        versionedAddressBook.setPerson(target, editedCell);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iwle"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Battleship \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Fleet getFleet() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return getHumanPlayer().getFleet();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void deployBattleship(Battleship battleship, Coordinates coordinates, Orientation orientation) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        getFleet().deployOneBattleship(battleship, coordinates, orientation);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public boolean isEnoughBattleships(Battleship battleship, int numBattleship) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return getFleet().isEnoughBattleship(battleship, numBattleship);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Statistics \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public PlayerStatistics getPlayerStats() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return this.playerStats;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Cell List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Cell} backed by the internal list of"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public ObservableList\u003cCell\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return filteredCells;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cCell\u003e predicate) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        filteredCells.setPredicate(predicate);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Selected cell \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public ReadOnlyProperty\u003cCell\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        return selectedPerson;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public Cell getSelectedPerson() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        return selectedPerson.getValue();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void setSelectedPerson(Cell cell) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        if (cell !\u003d null \u0026\u0026 !filteredCells.contains(cell)) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        selectedPerson.setValue(cell);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Ensures {@code selectedPerson} is a valid cell in {@code filteredCells}."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private void ensureSelectedPersonIsValid(ListChangeListener.Change\u003c? extends Cell\u003e change) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            if (selectedPerson.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                // null is always a valid selected cell, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean wasSelectedPersonReplaced \u003d change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedPerson.getValue());"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "            if (wasSelectedPersonReplaced) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "                // Update selectedPerson to its new value."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedPerson.getValue());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "                selectedPerson.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean wasSelectedPersonRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "                    .anyMatch(removedPerson -\u003e selectedPerson.getValue().isSamePerson(removedPerson));"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            if (wasSelectedPersonRemoved) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                // Select the cell that came before it in the list,"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                // or clear the selection if there is no such cell."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "                selectedPerson.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Battle manager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Returns the human player in the game."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public Player getHumanPlayer() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return batMan.getHumanPlayer();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Returns the computer player."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public Enemy getEnemyPlayer() {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return batMan.getEnemyPlayer();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Retrieves the Battle API."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public Battle getBattle() {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return batMan;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Retrieves the current state of the battle."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public BattleState getBattleState() {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return state;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Sets the current state of the battle."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void setBattleState(BattleState newState) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        requireNonNull(newState);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        this.state \u003d newState;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                \u0026\u0026 filteredCells.equals(other.filteredCells)"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(selectedPerson.get(), other.selectedPerson.get());"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 66,
      "iwle": 19,
      "s-tr": 60,
      "bos10": 9,
      "-": 202
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Cell;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook extends Observable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    ObservableList\u003cCell\u003e getPersonList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 2,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedMapGrid.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * {@code MapGrid} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public class VersionedMapGrid extends MapGrid {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cReadOnlyAddressBook\u003e addressBookStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public VersionedMapGrid(ReadOnlyAddressBook initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        addressBookStateList.add(new MapGrid(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Saves a copy of the current {@code MapGrid} state at the end of the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        addressBookStateList.add(new MapGrid(this));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStateList.subList(currentStatePointer + 1, addressBookStateList.size()).clear();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the address book to its previous state."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(addressBookStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the address book to its previously undone state."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(addressBookStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code undo()} has address book states to undo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code redo()} has address book states to redo."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return currentStatePointer \u003c addressBookStateList.size() - 1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        if (!(other instanceof VersionedMapGrid)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        VersionedMapGrid otherVersionedAddressBook \u003d (VersionedMapGrid) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return super.equals(otherVersionedAddressBook)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookStateList.equals(otherVersionedAddressBook.addressBookStateList)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedAddressBook.currentStatePointer;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            super(\"Current state pointer at start of addressBookState list, unable to undo.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            super(\"Current state pointer at end of addressBookState list, unable to redo.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 8,
      "-": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/model/battleship/AircraftCarrierBattleship.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.model.battleship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": " * Represents a battleship in a map."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class AircraftCarrierBattleship extends Battleship {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Constructor for Battleship with only name and tags."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Default size is length \u003d 2, life \u003d 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public AircraftCarrierBattleship(Set\u003cTag\u003e tagSet) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "        super(new Name(\"aircraft carrier\"), 5, 5, tagSet);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/model/battleship/Battleship.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.model.battleship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": " * Represents a battleship in a map."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class Battleship {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "    // Default fields"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "    protected static final int DEFAULT_LENGTH \u003d 2;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "    protected static final int DEFAULT_LIFE \u003d 2;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": "    protected static int counter \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "    protected final int id;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": "    protected final Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": "    protected final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": "    protected final int length;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": "    protected int life;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": "    // Logger"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(Battleship.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Battleship(Name name, int length, int life, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iwle"
        },
        "content": "        logger.fine(\"Created battleship\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.id \u003d counter++;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.length \u003d length;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.life \u003d life;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Constructor for Battleship with only name."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Battleship(Name name) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this(name, DEFAULT_LENGTH, DEFAULT_LIFE, new HashSet\u003cTag\u003e());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Constructor for Battleship with only name and tags."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Default size is length \u003d 2, life \u003d 1"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Battleship(Name name, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this(name, DEFAULT_LENGTH, DEFAULT_LIFE, tags);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Constructor Battleship with only name, length and size."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Battleship(Name name, int length, int life) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this(name, length, life, new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Constructor for Battleship without arguments."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * To prepare with refactoring Battleship to a Cell."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Battleship() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this(new Name(\"placeholder\"), DEFAULT_LENGTH, DEFAULT_LIFE, new HashSet\u003cTag\u003e());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public int getId() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.id;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public int getLength() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.length;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public int getLife() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.life;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Reduces the life of the battleship by one unit."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void reduceLife() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.life--;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Checks if life of the battleship is equal to zero."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * That is, if it is destroyed."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public boolean isDestroyed() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.life \u003d\u003d 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Returns true if both battleships of the same name have the same name."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * This defines a weaker notion of equality between two battleships."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public boolean isSameBattleship(Battleship otherBattleship) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (otherBattleship \u003d\u003d this) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return otherBattleship !\u003d null"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iwle"
        },
        "content": "                \u0026\u0026 otherBattleship.getName().equals(getName())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iwle"
        },
        "content": "                \u0026\u0026 otherBattleship.getId() \u003d\u003d getId();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Returns true if both battleships have the same identity fields."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * This defines a stronger notion of equality between two battleships."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (!(other instanceof Battleship)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship otherBattleship \u003d (Battleship) other;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return otherBattleship.getName().equals(getName());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return Objects.hash(name, id, length, life, tags);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iwle"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iwle"
        },
        "content": "        builder.append(getName());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 161
    }
  },
  {
    "path": "src/main/java/seedu/address/model/battleship/CruiserBattleship.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.model.battleship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": " * Represents a battleship in a map."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class CruiserBattleship extends Battleship {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Constructor for Battleship with only name and tags."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Default size is length \u003d 2, life \u003d 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public CruiserBattleship(Set\u003cTag\u003e tagSet) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "        super(new Name(\"cruiser\"), 2, 2, tagSet);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/model/battleship/DestroyerBattleship.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.model.battleship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": " * Represents a battleship in a map."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class DestroyerBattleship extends Battleship {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Constructor for Battleship with only name and tags."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Default size is length \u003d 2, life \u003d 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public DestroyerBattleship(Set\u003cTag\u003e tagSet) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "        super(new Name(\"destroyer\"), 3, 3, tagSet);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/model/battleship/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.model.battleship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * Represents a Cell\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 1,
      "iwle": 1,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/battleship/Orientation.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.model.battleship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": " * Represents the orientation of a battleship on the map."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidOrientation(String)}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class Orientation {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "            \"Orientation should either be left or right, case-insensitive\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(horizontal|vertical|h|v)$\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final String VALIDATION_HORIZONTAL_REGEX \u003d \"horizontal|h\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final String VALIDATION_VERTICAL_REGEX \u003d \"vertical|v\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final Pattern VALIDATION_PATTERN \u003d Pattern.compile("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": "            VALIDATION_REGEX, Pattern.CASE_INSENSITIVE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final Pattern VALIDATION_PATTERN_HORIZONTAL \u003d Pattern.compile("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iwle"
        },
        "content": "            VALIDATION_HORIZONTAL_REGEX, Pattern.CASE_INSENSITIVE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final Pattern VALIDATION_PATTERN_VERTICAL \u003d Pattern.compile("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iwle"
        },
        "content": "            VALIDATION_VERTICAL_REGEX, Pattern.CASE_INSENSITIVE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public final String orientation;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(Orientation.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param orientation A valid name."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Orientation(String orientation) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iwle"
        },
        "content": "        requireNonNull(orientation);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": "        checkArgument(isValidOrientation(orientation), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (orientation.toLowerCase().equals(\"h\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iwle"
        },
        "content": "                || orientation.toLowerCase().equals(\"horizontal\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iwle"
        },
        "content": "            this.orientation \u003d \"horizontal\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iwle"
        },
        "content": "        } else if (orientation.toLowerCase().equals(\"v\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iwle"
        },
        "content": "                || orientation.toLowerCase().equals(\"vertical\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iwle"
        },
        "content": "            this.orientation \u003d \"vertical\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iwle"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iwle"
        },
        "content": "            this.orientation \u003d orientation;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iwle"
        },
        "content": "        logger.fine(\"Created orientation\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static boolean isValidOrientation(String test) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Matcher matcher \u003d VALIDATION_PATTERN.matcher(test);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return matcher.find();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Checks if orientation is left"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public boolean isHorizontal() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return VALIDATION_PATTERN_HORIZONTAL.matcher(this.orientation).find();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Checks if orientation is right"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public boolean isVertical() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return VALIDATION_PATTERN_VERTICAL.matcher(this.orientation).find();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.orientation;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iwle"
        },
        "content": "                || (other instanceof Orientation // instanceof handles nulls"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iwle"
        },
        "content": "                \u0026\u0026 orientation.equals(((Orientation) other).orientation)); // state check"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return orientation.hashCode();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/model/cell/Address.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.model.cell;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * Represents a Cell\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 2,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/cell/Cell.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.model.cell;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * Represents a Cell in the map grid."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public class Cell {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private Optional\u003cBattleship\u003e battleship;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private boolean isHit \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private Coordinates coordinates;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public Cell(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        this.coordinates \u003d new Coordinates(\"a1\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        this.battleship \u003d Optional.empty();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Coordinates must be present and not null."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public Cell(Coordinates coordinates) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        requireNonNull(coordinates);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        this.battleship \u003d Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        this.coordinates \u003d coordinates;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        this.name \u003d new Name(\"This cell is empty\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        this.phone \u003d new Phone(\"123\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        this.email \u003d new Email(\"placeholder@gmail.com\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        this.address \u003d new Address(\"placeholder\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Constructor for cell that requires no arguments"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * To prepare with refactoring Cell to a cell"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public Cell() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        this.battleship \u003d Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        this.coordinates \u003d new Coordinates(\"a1\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        this.name \u003d new Name(\"This cell is empty\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        this.phone \u003d new Phone(\"123\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        this.email \u003d new Email(\"placeholder@gmail.com\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        this.address \u003d new Address(\"placeholder\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Constructor to copy a given Cell."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public Cell(Cell newCell) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        this.battleship \u003d newCell.battleship;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        this.isHit \u003d newCell.isHit;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        this.coordinates \u003d newCell.coordinates;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        this.name \u003d newCell.name;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        this.phone \u003d new Phone(\"123\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        this.email \u003d new Email(\"placeholder@gmail.com\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        this.address \u003d new Address(\"placeholder\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns true if this cell has a battleship, otherwise returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public boolean hasBattleShip() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return battleship.isPresent();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Put a battleship in this cell. Battleship must be present and not null."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void putShip(Battleship battleship) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        requireNonNull(battleship);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        this.battleship \u003d Optional.of(battleship);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        this.name \u003d battleship.getName();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns the {@code Status} of this cell"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public Status getStatus() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        if (battleship.isPresent()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            if (battleship.get().isDestroyed()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                return Status.DESTROYED;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            } else if (this.isHit) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                return Status.SHIPHIT;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                return Status.SHIP;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            if (isHit) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                return Status.EMPTYHIT;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                return Status.EMPTY;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Performs an attack on this current cell."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e if the attack hit a ship, \u003ccode\u003efalse\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public boolean receiveAttack() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        this.isHit \u003d true;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        if (battleship.isPresent()) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            battleship.ifPresent(Battleship::reduceLife);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Returns the ship in this cell."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public Optional\u003cBattleship\u003e getBattleship() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return battleship;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public boolean isSamePerson(Cell otherCell) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        if (otherCell \u003d\u003d this) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return otherCell !\u003d null"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                \u0026\u0026 otherCell.getName().equals(getName())"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                \u0026\u0026 (otherCell.getPhone().equals(getPhone()) || otherCell.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        if (!(other instanceof Cell)) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell otherCell \u003d (Cell) other;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return otherCell.getName().equals(getName())"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                \u0026\u0026 otherCell.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                \u0026\u0026 otherCell.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                \u0026\u0026 otherCell.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                \u0026\u0026 otherCell.getTags().equals(getTags())"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                \u0026\u0026 otherCell.coordinates.equals(coordinates)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                \u0026\u0026 otherCell.battleship.isPresent() \u003d\u003d battleship.isPresent()"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                \u0026\u0026 (!otherCell.battleship.isPresent() || otherCell.battleship.get().equals(battleship.get()));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        builder.append(coordinates);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 95,
      "iwle": 1,
      "s-tr": 30,
      "-": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/model/cell/Coordinates.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.model.cell;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": " * Represents a Cell\u0027s coordinate object in the map."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCoordinates(String)}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class Coordinates {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Coordinates should be of the format row-column \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + \"1. The row should only contain alphabetical characters, excluding \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \"). \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + \"The alphabetical characters must be between [a-j] inclusive and be in lowercase.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + \"2. This is followed by a column number. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + \"The column number must be between [1-10] inclusive.\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final String ROW_PART_REGEX \u003d \"^([a-j]){1}\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final String COL_PART_REGEX \u003d \"(10|[1-9])$\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final String VALIDATION_REGEX \u003d ROW_PART_REGEX + COL_PART_REGEX;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private final Index rowIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private final Index colIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(Coordinates.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Constructs an {@code Coordinates}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param coordinate A valid coordinate."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Coordinates(String coordinate) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iwle"
        },
        "content": "        requireNonNull(coordinate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": "        checkArgument(isValidCoordinates(coordinate), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iwle"
        },
        "content": "        logger.fine(\"Create coordinates\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iwle"
        },
        "content": "        String value \u003d coordinate;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // use regex to extract alphabetical row and numeric col"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Pattern rowRegex \u003d Pattern.compile(ROW_PART_REGEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Pattern colRegex \u003d Pattern.compile(COL_PART_REGEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Matcher rowMatch \u003d rowRegex.matcher(value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Matcher colMatch \u003d colRegex.matcher(value);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iwle"
        },
        "content": "        rowMatch.find();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iwle"
        },
        "content": "        colMatch.find();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iwle"
        },
        "content": "        String row \u003d rowMatch.group(0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iwle"
        },
        "content": "        String col \u003d colMatch.group(0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int rowNum \u003d convertAlphabetToNumber(row);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int colNum \u003d Integer.parseInt(col);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.rowIndex \u003d Index.fromOneBased(rowNum);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.colIndex \u003d Index.fromOneBased(colNum);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Coordinates(int rowZeroBased, int colZeroBased) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iwle"
        },
        "content": "        logger.fine(\"Create coordinates\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.rowIndex \u003d Index.fromZeroBased(rowZeroBased);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.colIndex \u003d Index.fromZeroBased(colZeroBased);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Coordinates(Index rowIndex, Index colIndex) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iwle"
        },
        "content": "        logger.fine(\"Create coordinates\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.rowIndex \u003d rowIndex;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.colIndex \u003d colIndex;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Converts a string alphabet to its numerical equivalent."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param alphabet String of alphabet"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @return integer offset from \u0027a\u0027, zero-based"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public int convertAlphabetToNumber(String alphabet) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iwle"
        },
        "content": "        char alphabetChar \u003d alphabet.charAt(0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return (int) alphabetChar - \u0027a\u0027 + 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Returns Index for rowNum"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Index getRowIndex() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.rowIndex;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Return Index for colNum"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Index getColIndex() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.colIndex;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Returns if a given string is a valid coordinate."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static boolean isValidCoordinates(String test) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iwle"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iwle"
        },
        "content": "        char colChar \u003d (char) (this.rowIndex.getZeroBased() + \u0027a\u0027);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iwle"
        },
        "content": "        stringBuilder.append(colChar)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .append(this.colIndex.getOneBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iwle"
        },
        "content": "                || (other instanceof Coordinates) // instanceof handles nulls"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iwle"
        },
        "content": "                \u0026\u0026 this.rowIndex.equals(((Coordinates) other).rowIndex)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iwle"
        },
        "content": "                \u0026\u0026 this.colIndex.equals(((Coordinates) other).colIndex); // state check"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return Objects.hash(rowIndex, colIndex);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 139,
      "lucydotc": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/cell/Email.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.model.cell;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * Represents a Cell\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 2,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/model/cell/NameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.model.cell;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * Tests that a {@code Cell}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cCell\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public boolean test(Cell cell) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(cell.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 5,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/cell/Phone.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.model.cell;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * Represents a Cell\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 2,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/cell/Row.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.model.cell;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * A list of cells of a row in the map grid."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public class Row implements Iterable\u003cCell\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private final ObservableList\u003cCell\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private final ObservableList\u003cCell\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns true if the list contains an equivalent cell as the given argument."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public boolean contains(Cell toCheck) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Adds a cell to the row."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void add(Cell toAdd) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Replaces the cell {@code target} in the list with {@code editedCell}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void setPerson(Cell target, Cell editedCell) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        requireAllNonNull(target, editedCell);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        if (!target.isSamePerson(editedCell) \u0026\u0026 contains(editedCell)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        internalList.set(index, editedCell);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Removes the equivalent cell from the list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * The cell must exist in the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void remove(Cell toRemove) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void setPersons(Row replacement) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Replaces the contents of this list with {@code cells}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * {@code cells} must not contain duplicate cells."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void setPersons(List\u003cCell\u003e cells) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        requireAllNonNull(cells);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        if (!personsAreUnique(cells)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        internalList.setAll(cells);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns the map size"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public int getMapSize() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public ObservableList\u003cCell\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public Iterator\u003cCell\u003e iterator() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                || (other instanceof Row // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                        \u0026\u0026 internalList.equals(((Row) other).internalList));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void putShipAtIndex(Index index, Battleship battleship) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        internalList.get(index.getZeroBased()).putShip(battleship);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 46,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/model/cell/RowList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.model.cell;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * A list of rows that forms the map grid"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public class RowList implements Iterable\u003cRow\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private final ObservableList\u003cRow\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private final ObservableList\u003cRow\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Adds a row to the row list"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void add(Row toAdd) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Replaces a cell in the map grid."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Replaces a targetCell with an editedCell within a target row"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void setCell(Row target, Cell targetCell, Cell editedCell) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        requireAllNonNull(target, editedCell);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        internalList.get(index).setPerson(targetCell, editedCell);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Removes the equivalent row from the list"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * The row must exist in the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void remove(Row toRemove) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void setPersons(RowList replacement) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Replaces the contents of this list with {@code cells}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * {@code cells} must not contain duplicate cells."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void setPersons(List\u003cRow\u003e rows) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        requireAllNonNull(rows);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        internalList.setAll(rows);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public ObservableList\u003cRow\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public Iterator\u003cRow\u003e iterator() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/model/cell/Status.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.model.cell;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * Enum that has different statuses a cell can have"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public enum Status {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * This cell has not been hit. Used when showing the map from the enemy\u0027s perspective."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    HIDDEN,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * This cell is empty and has not been hit."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    EMPTY,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * This cell has been hit before, and is empty;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    EMPTYHIT,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * This cell has a ship in it."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    SHIP,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * This cell has been hit before, and there is a damaged ship here."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    SHIPHIT,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * This cell has been hit before, and the ship here has been destroyed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    DESTROYED"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 21,
      "s-tr": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/cell/exceptions/BattleshipNotPresentException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.model.cell.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * Signals that the cell has no battleship."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public class BattleshipNotPresentException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public BattleshipNotPresentException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        super(\"No batttleship is present in this cell\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/cell/exceptions/DuplicatePersonException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.model.cell.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class DuplicatePersonException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public DuplicatePersonException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/cell/exceptions/PersonNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.model.cell.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * Signals that the operation is unable to find the specified cell."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 2,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/player/Enemy.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "package seedu.address.model.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import seedu.address.model.BoundaryValueChecker;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import seedu.address.model.battleship.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import seedu.address.model.battleship.Orientation;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import seedu.address.model.cell.Status;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucydotc"
        },
        "content": " * Represents an Enemy player in the game."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucydotc"
        },
        "content": " * Enemy will always be a computerised player."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucydotc"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "public class Enemy extends Player {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private static final Random randGen \u003d new Random();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private static final Random randGen2 \u003d new Random();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(Enemy.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private static ArrayList\u003cCoordinates\u003e allPossibleTargets \u003d new ArrayList\u003c\u003e(); //one-based"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private static ArrayList\u003cCoordinates\u003e allParityTargets \u003d new ArrayList\u003c\u003e(); //one-based"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private static ArrayList\u003cCoordinates\u003e allPossiblePopulateCoords \u003d new ArrayList\u003c\u003e(); //zero-based, two ints"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private Stack\u003cCoordinates\u003e watchlist \u003d new Stack\u003c\u003e(); //one based"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private Status lastAttackStatus;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private int mapSize \u003d 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private Coordinates lastCoordAttacked;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * Default constructor with fleet size 8."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public Enemy() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "        super(\"EnemyPlayer\", 5, 2, 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * Initialises and resets enemy\u0027s understanding of"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * its own and the player\u0027s map grids."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * Used to inform the algorithms for populating enemy mapgrid and enemy shooting"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public void prepEnemy() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        mapSize \u003d this.getMapGrid().getMapSize();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        fillWithAllCoords();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        populateEnemyMap();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /**************************************************"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * fills allPossibleTargets, allPossiblePopulateCoords, allParityTargets"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * to inform the shooting and population functions"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private void fillWithAllCoords() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        for (int row \u003d 0; row \u003c mapSize; row++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            for (int col \u003d 0; col \u003c mapSize; col++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                Coordinates createdCoord \u003d new Coordinates(row, col);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                allPossibleTargets.add(createdCoord);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                allPossiblePopulateCoords.add(createdCoord);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                if (hasParity(row, col)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                    allParityTargets.add(createdCoord);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        java.util.Collections.shuffle(allPossibleTargets, randGen);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        java.util.Collections.shuffle(allPossiblePopulateCoords, randGen2);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        java.util.Collections.shuffle(allParityTargets, randGen);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /**************************************************************"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * Draws and returns valid Coordinate to be shot at."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * Adds Coordinates into targetHistory"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * Called by battle manager"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public Coordinates enemyShootAt() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        Coordinates newTarget;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        if (watchlist.isEmpty()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            newTarget \u003d drawPartityTarget();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            logger.info(String.format(\"++++++++WATCHLIST EMPTY \" + \"enemy shoot parity: \" + newTarget.toString()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            newTarget \u003d drawFromWatchList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            logger.info(String.format(\"++++++++WATCHLIST STUFFED \" + \"enemy shoot watched: \" + newTarget.toString()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        modeCleanup(newTarget);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        this.addToTargetHistory(newTarget);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        return newTarget;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /************************************************"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * draws a valid Coord with parity filter on"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private Coordinates drawPartityTarget() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        java.util.Collections.shuffle(allParityTargets, randGen);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        return allParityTargets.get(0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /************************************************"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * draws a valid Coord with from watchlist"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private Coordinates drawFromWatchList() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        return watchlist.pop();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /**********************************************************************"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * initialises the enemy mapGrid with its own ships randomly"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * is part of enemy constructor"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private void populateEnemyMap() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        int numDestroyer \u003d this.getFleet().getNumDestroyer();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        int numCruiser \u003d this.getFleet().getNumCruiser();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        placeAirCraftCarrier();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        placeMultipleDestroyerAndCruiser(numDestroyer, \"Destroyer\", 3);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        placeMultipleDestroyerAndCruiser(numCruiser, \"Cruiser\", 2);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /***********************************************************************"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * pulls a head coord from allPossiblePopulateCoords"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * and justifies the coord before using it as a head for the aircraftCarrier"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * before placing the aircraftCarrier onto enemy map"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private void placeAirCraftCarrier() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        Orientation useOrientation \u003d generateOrientation();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        java.util.Collections.shuffle(allPossiblePopulateCoords, randGen);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        Coordinates useCoord \u003d allPossiblePopulateCoords.get(0);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        Index row \u003d useCoord.getRowIndex();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        Index col \u003d useCoord.getColIndex();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        int justifiedCoord; //zero-based"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        Coordinates currentBattleshipHead;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        if (useOrientation.isHorizontal()) { //rectify X coord of head, Y doesn\u0027t matter (all Y will work)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            justifiedCoord \u003d justifyCoord(col.getZeroBased()); //col is justified"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            currentBattleshipHead \u003d new Coordinates(row.getZeroBased(), justifiedCoord);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            justifiedCoord \u003d justifyCoord(row.getZeroBased()); //row gets justified"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            currentBattleshipHead \u003d new Coordinates(justifiedCoord, col.getZeroBased());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        Name currentBattleshipName \u003d new Name(\"enemyAircraftCarrier\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        Battleship currentBattleship \u003d new Battleship(currentBattleshipName, 5, 5);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        // public Battleship(Name name, int length, int life, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        //should have no error, since it is the first ship placed, and all map sizes have a max of 1 aircraft carrier"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        //AircraftCarrierBattleship x \u003d new AircraftCarrierBattleship(currentBattleshipName);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        this.getMapGrid().putShip(currentBattleship, currentBattleshipHead, useOrientation);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        markAsOccupied(currentBattleshipHead, 5, useOrientation);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        logger.info(String.format(\"++++++++POPULATED aircraft carrier at \" + currentBattleshipHead.toString()"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                + \" orientation is \" + useOrientation.toString()));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /*****************************************************************************"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * places all destroyers and cruisers onto enemy map"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * and marks those occupied cells in allPossiblePopulateCoords"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private void placeMultipleDestroyerAndCruiser(int numShips, String shipType, int shipSize) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        Orientation useOrientation \u003d new Orientation(\"v\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        Coordinates useCoord \u003d new Coordinates(0, 0);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        ArrayList\u003cBattleship\u003e preppedShips \u003d generateBattleships(numShips, shipType, shipSize);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        Battleship useShip \u003d new Battleship();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        while (!preppedShips.isEmpty()) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                useOrientation \u003d generateOrientation();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                java.util.Collections.shuffle(allPossiblePopulateCoords, randGen2);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                useCoord \u003d allPossiblePopulateCoords.get(0);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                useShip \u003d preppedShips.get(0);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                BoundaryValueChecker boundaryValueChecker \u003d new BoundaryValueChecker(this.getMapGrid(), useShip,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                        useCoord, useOrientation);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                boundaryValueChecker.performChecks();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                this.getMapGrid().putShip(useShip, useCoord, useOrientation);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                preppedShips.remove(0);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                markAsOccupied(useCoord, shipSize, useOrientation);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                logger.info(String.format(\"++++++++POPULATED \" + useShip.getName() + \" at \""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                        + useCoord.toString()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                        + \" orientation is \" + useOrientation.toString()));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException aIoObEx) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                //TODO log the error later from putship"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            } catch (CommandException cmdEx) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                logger.info(String.format(\"++++++++REJECTED POPULATING \" + useShip.getName())"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                        + \" at \" + useCoord + \" orientation: \" + useOrientation);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /************************************************************************"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * creates list of a certain battleship type"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * to be put on map"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private ArrayList\u003cBattleship\u003e generateBattleships (int numShips, String battleshipType, int shipSize) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        ArrayList\u003cBattleship\u003e preppedFleet \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d numShips; i++) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            Name currentBattleshipName \u003d new Name(\"enemy\" + battleshipType + i);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            Battleship currentBattleship \u003d new Battleship(currentBattleshipName, shipSize, shipSize);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            preppedFleet.add(currentBattleship);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        logger.info(String.format(\"++++++++GENERATED: \" + preppedFleet.toString()));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        return preppedFleet;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /***************************************************************"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * removes all the occupied Coords from allPossiblePopulateCoords"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * when a new ship is placed"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private void markAsOccupied(Coordinates head, int shipSize, Orientation useOrientation) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        //increase col"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        if (useOrientation.isHorizontal()) { //row stays the same"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            int colStart \u003d head.getColIndex().getZeroBased();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            for (int i \u003d 0; i \u003c shipSize; i++) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                Coordinates markedCoord \u003d new Coordinates(head.getRowIndex().getZeroBased(), colStart + i);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                allPossiblePopulateCoords.remove(markedCoord);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                logger.info(String.format(\"++++++++MARK_AS_OCCUPIED: \" + markedCoord.toString()));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        } else { //increase row"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            for (int i \u003d 0; i \u003c shipSize; i++) { //col stays the same"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                int rowStart \u003d head.getRowIndex().getZeroBased();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                Coordinates markedCoord \u003d new Coordinates(rowStart + i, head.getColIndex().getZeroBased());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                allPossiblePopulateCoords.remove(markedCoord);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                logger.info(String.format(\"++++++++MARK_AS_OCCUPIED: \" + markedCoord.toString()));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /*****************************************************************"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * justifies the head coord given to ensure"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * ship to be placed can fit the map boundaries"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private int justifyCoord(int coordToJustify) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        int lowerHalfceiling \u003d (mapSize / 2) - 1;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        switch (mapSize) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        case 6: //ceiling \u003d 0 to 2, 3"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            if (coordToJustify \u003c\u003d lowerHalfceiling) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                coordToJustify \u003d 0;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                coordToJustify \u003d 1;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        case 10: //ceiling \u003d 0 to 5, 6"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            lowerHalfceiling +\u003d 1;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            if (coordToJustify \u003e lowerHalfceiling) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                coordToJustify -\u003d 4;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            coordToJustify %\u003d lowerHalfceiling + 1;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        return coordToJustify;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /********************************************************************************"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * randomly generates either a horizontal or vertical orientation"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private Orientation generateOrientation() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        int seed \u003d randGen2.nextInt();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        int decision \u003d seed % 2;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        if (decision \u003d\u003d 0) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            return new Orientation(\"horizontal\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            return new Orientation(\"vertical\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /*********************************************************************"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * receives status of an attacked cell from Battle manager"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void receiveStatus(Status latestStatusInfo) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        lastAttackStatus \u003d latestStatusInfo;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        logger.info(String.format(\"++++++++RECEIVE_STATUS: \" + lastCoordAttacked.toString()"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                + \" status: \" + latestStatusInfo.toString()));"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        updateWatchlist(lastCoordAttacked);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /*************************************************************************"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * Add coords of the cardinal positions to the last attacked cell"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * to the watchlist"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private void updateWatchlist(Coordinates lastCoordAttacked) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        logger.info(String.format(\"++++++++BEFORE_UPDATE_WATCHLIST_STATUS_CHECK \" + lastCoordAttacked.toString()"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                + \" status: \" + lastAttackStatus.toString()));"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        if (lastAttackStatus \u003d\u003d Status.SHIP) { //TO-DO: FIX THE STATUS TO SHIPHIT. NOW USING SHIP CUZ IM READING OWN MAP"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            int oldRow \u003d lastCoordAttacked.getRowIndex().getZeroBased();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            int oldCol \u003d lastCoordAttacked.getColIndex().getZeroBased();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            Coordinates updatedCoord;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            //ADD CARDINAL DIRECTIONS TO WATCHLIST."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            //WATCHLIST COORDS IN FORM a1"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            if (oldRow - 1 \u003e\u003d 0) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                //add cardinal NORTH to watchlist. ROW MINUS ONE"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                updatedCoord \u003d new Coordinates(oldRow - 1, oldCol);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                if (isValidCardinal(updatedCoord)) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                    watchlist.push(updatedCoord);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            if (oldRow + 1 \u003c mapSize) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                //add cardinal SOUTH to watchlist  ROW PLUS ONE"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                updatedCoord \u003d new Coordinates(oldRow + 1, oldCol);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                if (isValidCardinal(updatedCoord)) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                    watchlist.push(updatedCoord);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            if (oldCol - 1 \u003e\u003d 0) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                //add cardinal WEST to watchlist   COL MINUS ONE"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                updatedCoord \u003d new Coordinates(oldRow, oldCol - 1);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                if (isValidCardinal(updatedCoord)) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                    watchlist.push(updatedCoord);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            if (oldCol + 1 \u003c mapSize) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                //add cardinal EAST to watchlist   COL PLUS ONE"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                updatedCoord \u003d new Coordinates(oldRow, oldCol + 1);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                if (isValidCardinal(updatedCoord)) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                    watchlist.push(updatedCoord);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            logger.info(String.format(\"++++++++WATCHLIST UPDATING:\\n\" + watchlist.toString()));"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            logger.info(String.format(\"++++++++WATCHLIST SIZE:\\n\" + watchlist.size()));"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private boolean isValidCardinal(Coordinates useCoord) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        return allPossibleTargets.contains(useCoord) || allParityTargets.contains(useCoord);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /******************************************************8"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * Remove the last used coord"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * from allParityTargets and allPossibleTargets"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private void modeCleanup(Coordinates usedCoord) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        allParityTargets.remove(usedCoord);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        allPossibleTargets.remove(usedCoord);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        lastCoordAttacked \u003d usedCoord;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /*************************************************************"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * checks that coord is made up of one odd and one even x-y coordinate pair"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * and returns true if so"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private boolean hasParity (int row, int col) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        int parity \u003d (row % 2) + (col % 2);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        return (parity \u003d\u003d 1);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 1,
      "lucydotc": 358,
      "s-tr": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/player/Fleet.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.AircraftCarrierBattleship;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.CruiserBattleship;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.DestroyerBattleship;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Orientation;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a list of individual battleships"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class Fleet {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private ArrayList\u003cFleetEntry\u003e deployedFleet;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private int numDestroyer;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private int numCruiser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private int numAircraftCarrier;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Default constructor for a fleet of size 8 with placeholder ship names."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public Fleet() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this(5, 2, 1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Constructor using formula according to mapSize."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Fleet (int mapSize) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this((mapSize + 2) / 5, mapSize - 5, 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * Constructor for a fleet with placeholder ship names."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Fleet(int numDestroyer, int numCruiser, int numAircraftCarrier)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iwle"
        },
        "content": "            throws IllegalArgumentException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (numDestroyer + numCruiser + numAircraftCarrier \u003c\u003d 0) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.numDestroyer \u003d numDestroyer;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.numCruiser \u003d numCruiser;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.numAircraftCarrier \u003d numAircraftCarrier;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.deployedFleet \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.numDestroyer + this.numCruiser + this.numAircraftCarrier;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public ArrayList\u003cFleetEntry\u003e getDeployedFleet() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.deployedFleet;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Resets the fleet."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void resetFleet(int mapSize) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.numDestroyer \u003d (mapSize + 2) / 5;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.numCruiser \u003d mapSize - 5;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.numAircraftCarrier \u003d 1;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.deployedFleet \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Deploys one battleship. Checks class of battleship."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void deployOneBattleship(Battleship battleship, Coordinates coordinates, Orientation orientation) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (battleship instanceof DestroyerBattleship) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iwle"
        },
        "content": "            this.numDestroyer--;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iwle"
        },
        "content": "            this.deployedFleet.add(new FleetEntry("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    battleship,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    coordinates,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    orientation"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iwle"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iwle"
        },
        "content": "        } else if (battleship instanceof CruiserBattleship) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iwle"
        },
        "content": "            this.numCruiser--;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iwle"
        },
        "content": "            this.deployedFleet.add(new FleetEntry("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    battleship,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    coordinates,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    orientation"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iwle"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iwle"
        },
        "content": "        } else if (battleship instanceof AircraftCarrierBattleship) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iwle"
        },
        "content": "            this.numAircraftCarrier--;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iwle"
        },
        "content": "            this.deployedFleet.add(new FleetEntry("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    battleship,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    coordinates,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    orientation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iwle"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Checks if there are enough battleships. Returns true or false."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @return whether there are enough battleships."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public boolean isEnoughBattleship(Battleship battleship, int numBattleship) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (battleship instanceof DestroyerBattleship) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return numBattleship \u003c\u003d this.getNumDestroyer();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iwle"
        },
        "content": "        } else if (battleship instanceof CruiserBattleship) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return numBattleship \u003c\u003d this.getNumCruiser();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iwle"
        },
        "content": "        } else if (battleship instanceof AircraftCarrierBattleship) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return numBattleship \u003c\u003d this.getNumAircraftCarrier();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public List\u003cFleetEntry\u003e getListOfDestroyerBattleship() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.deployedFleet"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .filter(entry -\u003e entry.getBattleship() instanceof DestroyerBattleship)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public List\u003cFleetEntry\u003e getListOfCruiserBattleship() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.deployedFleet"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .filter(entry -\u003e entry.getBattleship() instanceof CruiserBattleship)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public List\u003cFleetEntry\u003e getListOfAircraftCarrierBattleship() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.deployedFleet"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .filter(entry -\u003e entry.getBattleship() instanceof AircraftCarrierBattleship)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public int getNumDestroyer() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.numDestroyer;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public int getNumCruiser() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.numCruiser;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public int getNumAircraftCarrier() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.numAircraftCarrier;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Set\u003cTag\u003e getAllTags() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iwle"
        },
        "content": "        for (FleetEntry fleetEntry : this.getDeployedFleet()) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iwle"
        },
        "content": "            for (Tag tag : fleetEntry.getBattleship().getTags()) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iwle"
        },
        "content": "                tagSet.add(tag);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public List\u003cFleetEntry\u003e getByTags(Set\u003cTag\u003e tagSet) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.getDeployedFleet().stream()"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .filter(fleetEntry -\u003e fleetEntry.getBattleship().getTags().containsAll(tagSet))"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public List\u003cFleetEntry\u003e getByName(Name name) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.getDeployedFleet().stream()"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .filter(fleetEntry -\u003e fleetEntry.getBattleship().getName().equals(name))"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Checks if all the battleships in a deployed fleet are destroyed."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public boolean isAllDestroyed() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iwle"
        },
        "content": "        boolean isAllDestroyed \u003d true;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iwle"
        },
        "content": "        for (FleetEntry fleetEntry : this.getDeployedFleet()) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iwle"
        },
        "content": "            if (!fleetEntry.getBattleship().isDestroyed()) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iwle"
        },
        "content": "                isAllDestroyed \u003d false;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return isAllDestroyed;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getSize())"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Fleet size: \")"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getSize())"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Fleet contents: \")"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .append(getDeployedFleet());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Represents an entry in the fleet. To describe the orientation and coordinates"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * of a given battleship."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public class FleetEntry {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iwle"
        },
        "content": "        private final Battleship battleship;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iwle"
        },
        "content": "        private final Orientation orientation;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iwle"
        },
        "content": "        private final Coordinates coordinates;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iwle"
        },
        "content": "        public FleetEntry(Battleship battleship, Coordinates coordinates, Orientation orientation) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iwle"
        },
        "content": "            this.battleship \u003d battleship;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iwle"
        },
        "content": "            this.coordinates \u003d coordinates;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iwle"
        },
        "content": "            this.orientation \u003d orientation;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iwle"
        },
        "content": "        public Battleship getBattleship() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return battleship;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iwle"
        },
        "content": "        public Coordinates getCoordinates() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return coordinates;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "iwle"
        },
        "content": "        public Orientation getOrientation() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return orientation;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "iwle"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "iwle"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "iwle"
        },
        "content": "            StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "iwle"
        },
        "content": "            builder.append(this.getBattleship())"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    .append(\" (\")"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    .append(this.getBattleship().getLife())"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    .append(\"/\")"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    .append(this.getBattleship().getLength())"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    .append(\")\")"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    .append(\" at \")"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    .append(this.getCoordinates())"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    .append(\" \")"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    .append(this.getOrientation())"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    .append(\" \");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "iwle"
        },
        "content": "            this.getBattleship().getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return builder.toString();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 211,
      "lucydotc": 9,
      "s-tr": 3,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/player/Player.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import seedu.address.model.MapGrid;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a player in the game."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucydotc"
        },
        "content": " * Is a user-controlled Player and superclass for Enemy"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class Player {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final int DEFAULT_NUM_AIRCRAFT_CARRIER \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final int DEFAULT_NUM_CRUISER \u003d 2;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final int DEFAULT_NUM_DESTROYER \u003d 5;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private static final String VALID_NAME_REGEX \u003d \"^[a-zA-Z0-9]{3,16}$\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS \u003d \"Name should contain only alphanumerical characters,\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            + \"with no whitespaces.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            + \"and be of length 3 to 16 characters, inclusive.\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int fleetSize;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Fleet fleet;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private final MapGrid mapGrid;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private Set\u003cCoordinates\u003e targetHistory \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor presented to user."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Player(String name, int numDestroyer, int numCruiser, int numAircraftCarrier) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.fleetSize \u003d numDestroyer + numCruiser + numAircraftCarrier;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.fleet \u003d new Fleet(DEFAULT_NUM_DESTROYER, DEFAULT_NUM_CRUISER, DEFAULT_NUM_AIRCRAFT_CARRIER);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        this.mapGrid \u003d new MapGrid();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * Default constructor with name Player1 and fleet size 8."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public Player() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this(\"Player1\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iwle"
        },
        "content": "                DEFAULT_NUM_DESTROYER,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iwle"
        },
        "content": "                DEFAULT_NUM_CRUISER,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iwle"
        },
        "content": "                DEFAULT_NUM_AIRCRAFT_CARRIER);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * Attempts to add targeted coordinates to the Player targetHistory"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * Checks for duplicates."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * Returns False if adding failed (duplicate found)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * Returns True if adding succeeded (coordinate added to targetHistory)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public boolean addToTargetHistory(Coordinates target) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        return this.targetHistory.add(target);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void resetFleet(int mapSize) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        fleet.resetFleet(mapSize);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getFleetSize() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.fleetSize;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public Fleet getFleet() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.fleet;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList getFleetContents() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.fleet.getDeployedFleet();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public MapGrid getMapGrid() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        return this.mapGrid;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public Set getTargetHistory() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        return this.targetHistory;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public static boolean isValidName(String name) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        return Pattern.matches(VALID_NAME_REGEX, name) \u0026\u0026 !name.equals(\"Enemy\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Name: \")"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getName())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                .append(getFleet())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                .append(Arrays.toString(targetHistory.toArray()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 4,
      "iwle": 24,
      "lucydotc": 46,
      "s-tr": 2,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/model/statistics/PlayerStatistics.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bos10"
        },
        "content": "package seedu.address.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bos10"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bos10"
        },
        "content": " * PlayerStatistics is the statistics for the Player."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bos10"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bos10"
        },
        "content": "public class PlayerStatistics extends Statistics {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public PlayerStatistics() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bos10"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bos10"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bos10": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/statistics/Statistics.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bos10"
        },
        "content": "package seedu.address.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bos10"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bos10"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.logic.battle.AttackResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bos10"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bos10"
        },
        "content": " * A Statistics Class tracks the key gameplay information."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bos10"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bos10"
        },
        "content": "public abstract class Statistics {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bos10"
        },
        "content": "    protected static int hitCount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bos10"
        },
        "content": "    protected static int missCount;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bos10"
        },
        "content": "    protected static int movesLeft;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bos10"
        },
        "content": "    protected static int enemyShipsDestroyed;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bos10"
        },
        "content": "    protected static int attackCount;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bos10"
        },
        "content": "    protected static final int TOTAL_MOVES \u003d 10;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(Statistics.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * initialization of class will begin with default configuration."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public Statistics() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bos10"
        },
        "content": "        defaultConfig();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * assigns the class attributes with default values of a NEW game"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private void defaultConfig() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bos10"
        },
        "content": "        logger.info(\"Statistics Initialized\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.hitCount \u003d 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.missCount \u003d 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.enemyShipsDestroyed \u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.attackCount \u003d 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.movesLeft \u003d TOTAL_MOVES;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * increments the hit count by 1."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @return incremented hitCount"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public int addHit() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bos10"
        },
        "content": "        ++this.hitCount;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bos10"
        },
        "content": "        logger.info(\"Increment Successful Hit to \" + this.hitCount);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return this.hitCount;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * increments the num of enemy ships destroyed by 1."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @return number of enemy ships destroyed."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public int enemyShipsDestroyed() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bos10"
        },
        "content": "        ++this.enemyShipsDestroyed;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bos10"
        },
        "content": "        logger.info(\"Increment Ships Destroyed to \" + this.enemyShipsDestroyed);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return this.enemyShipsDestroyed;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @return the number of enemy Ships destroyed by player"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public int getEnemyShipsDestroyed() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return this.enemyShipsDestroyed;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * increments the miss count by 1."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @return incremented missCount"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public int addMiss() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bos10"
        },
        "content": "        ++this.missCount;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bos10"
        },
        "content": "        logger.info(\"Increment Miss to \" + this.missCount);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return this.missCount;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * decrements the number of moves left."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @return the decremented number of moves"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public int minusMove() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bos10"
        },
        "content": "        --this.movesLeft;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bos10"
        },
        "content": "        logger.info(\"Decrement moves to : \" + this.movesLeft);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return this.movesLeft;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * increments number of attack by 1."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @return the current number of attacks."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public int addAttack() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bos10"
        },
        "content": "        ++this.attackCount;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bos10"
        },
        "content": "        logger.info(\"Increment attacks made to  \" + this.attackCount);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return this.attackCount;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public int getAttacksMade() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return this.attackCount;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public int getMovesLeft() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return this.movesLeft;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public int getHitCount() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return this.hitCount;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public int getMissCount() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return this.missCount;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * returns the hit-miss percentage of the user."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public double getAccuracy() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bos10"
        },
        "content": "        if (hitCount \u003d\u003d 0 \u0026\u0026 missCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bos10"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bos10"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return (double) hitCount / (double) (hitCount + missCount);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * extracts the result from AttackResult string and add to stats."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @param res , the result of the attack made."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @return the registered result string."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public String addResultToStats(AttackResult res) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bos10"
        },
        "content": "        String result \u003d res.toString().split(\" \")[10];"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bos10"
        },
        "content": "        switch (result) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bos10"
        },
        "content": "        case \"hit\":"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bos10"
        },
        "content": "            addHit();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bos10"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bos10"
        },
        "content": "        case \"missed\":"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bos10"
        },
        "content": "            addMiss();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bos10"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bos10"
        },
        "content": "        case \"destroyed\":"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bos10"
        },
        "content": "            addHit();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bos10"
        },
        "content": "            enemyShipsDestroyed();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bos10"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bos10"
        },
        "content": "        default : break;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bos10"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * This will generate the required data format for the bar charts."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @return the formatted data."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public XYChart.Series generateData() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bos10"
        },
        "content": "        logger.info(\"Generating Statistical Data\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bos10"
        },
        "content": "        XYChart.Series dataSeries1 \u003d new XYChart.Series();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bos10"
        },
        "content": "        dataSeries1.getData().add(new XYChart.Data(\"Attacks\", getAttacksMade()));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bos10"
        },
        "content": "        dataSeries1.getData().add(new XYChart.Data(\"Hits\", getHitCount()));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bos10"
        },
        "content": "        dataSeries1.getData().add(new XYChart.Data(\"Misses\", getMissCount()));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bos10"
        },
        "content": "        dataSeries1.getData().add(new XYChart.Data(\"Ships Destroyed\", getEnemyShipsDestroyed()));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bos10"
        },
        "content": "        dataSeries1.getData().add(new XYChart.Data(\"Accuracy\", getAccuracy()));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return dataSeries1;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bos10"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bos10": 155
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(Tag.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iwle"
        },
        "content": "        logger.fine(\"Created new tag.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Returns tag name as String."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.tagName;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 14,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.MapGrid;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Cell;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * Contains utility methods for populating {@code MapGrid} with sample data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static Cell[] getSamplePersons() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return new Cell[] {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            new Cell(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            new Cell(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            new Cell(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            new Cell(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"family\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            new Cell(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            new Cell(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        MapGrid sampleAb \u003d new MapGrid();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        for (Cell sampleCell : getSamplePersons()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            sampleAb.addPerson(sampleCell);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 17,
      "iwle": 1,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AddressBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.MapGrid;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * Represents a storage for {@link MapGrid}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns MapGrid data as a {@link ReadOnlyAddressBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Saves the ReadOnlyAddressBook locally in a fixed temporary location."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 3,
      "s-tr": 8,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Cell;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * Jackson-friendly version of {@link Cell}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Cell\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given cell details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Converts a given {@code Cell} into this class for Jackson use."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public JsonAdaptedPerson(Cell source) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Converts this Jackson-friendly adapted cell object into the model\u0027s {@code Cell} object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted cell."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public Cell toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return new Cell(modelName, modelPhone, modelEmail, modelAddress, modelTags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 13,
      "iwle": 1,
      "-": 95
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAddressBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * A class to access MapGrid data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private static final String DEFAULT_BACKUP_PATH \u003d \".backup.json\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private Path backupFilePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        this.backupFilePath \u003d Paths.get(\".backup\", DEFAULT_BACKUP_PATH);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                filePath, JsonSerializableAddressBook.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Saves the ReadOnlyAddressBook locally in a fixed temporary location."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        saveAddressBook(addressBook, backupFilePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 1,
      "s-tr": 16,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.MapGrid;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Cell;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * An Immutable MapGrid that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate cell(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Converts this address book into the model\u0027s {@code MapGrid} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public MapGrid toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        MapGrid mapGrid \u003d new MapGrid();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            Cell cell \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            if (mapGrid.hasPerson(cell)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "             */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            mapGrid.addPerson(cell);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return mapGrid;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 13,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * Manages storage of MapGrid data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d MapGrid methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Saves the ReadOnlyAddressBook locally in a fixed temporary location."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        addressBookStorage.backupAddressBook(addressBook);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 2,
      "s-tr": 10,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Cell;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final URL DEFAULT_PAGE \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(MainApp.class.getResource(FXML_FILE_FOLDER + \"default.html\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SEARCH_PAGE_URL \u003d \"https://se-education.org/dummy-search-page/?name\u003d\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public BrowserPanel(ObservableValue\u003cCell\u003e selectedPerson) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        // Load cell page when selected cell changes."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        selectedPerson.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                loadDefaultPage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            loadPersonPage(newValue);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private void loadPersonPage(Cell cell) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        loadPage(SEARCH_PAGE_URL + cell.getName().fullName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().load(url));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(DEFAULT_PAGE.toExternalForm());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 5,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EnemyMap.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import javafx.beans.value.ObservableBooleanValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.MapGrid;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Status;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public class EnemyMap extends Map {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public EnemyMap(ObservableBooleanValue modelUpdateObservable, MapGrid mapGrid) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        super(modelUpdateObservable, mapGrid);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    protected Status[][] getMapView(MapGrid mapGrid) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return mapGrid.getEnemyMapView();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private PlayerMap playerMap;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private EnemyMap enemyMap;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private StatusBarFooter statusBarFooter;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private StatsPane statsPane;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private StackPane statusbarPlaceholder2;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private StackPane statspanePlaceholder;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) { //Put"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // add action to take on closing window"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        primaryStage.getScene().getWindow().addEventFilter(WindowEvent.WINDOW_CLOSE_REQUEST, this::handleExit);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        playerMap \u003d new PlayerMap(logic.getHumanMapObservable(), logic.getHumanMapGrid());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(playerMap.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        enemyMap \u003d new EnemyMap(logic.getEnemyMapObservable(), logic.getEnemyMapGrid());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        browserPlaceholder.getChildren().add(enemyMap.getRoot());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bos10"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooter();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //STATS PANE DISABLED FOR NOW"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //statsPane \u003d new StatsPane(); //StatsPane(model.getStatistics());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //statusbarPlaceholder2.getChildren().add(statsPane.getRoot());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //statsPane \u003d new StatsPane();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //statspanePlaceholder.getChildren().add(statsPane.getRoot());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand, logic.getHistory());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        handleExit(null);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private void handleExit(Event evt) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // stop the Timer"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        if (statusBarFooter !\u003d null) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            statusBarFooter.stopTimer();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public PlayerMap getPlayerMap() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return playerMap;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 8,
      "s-tr": 18,
      "bos10": 16,
      "-": 191
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/Map.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import javafx.beans.value.ObservableBooleanValue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import javafx.scene.shape.Rectangle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.MapGrid;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Status;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public abstract class Map extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private static final String FXML \u003d \"PlayerMap.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(Map.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private int columnLabel \u003d 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private char rowLabel \u003d \u0027A\u0027;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private VBox grid;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public Map(ObservableBooleanValue modelUpdateObservable, MapGrid mapGrid) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        modelUpdateObservable.addListener(observable -\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            int size \u003d mapGrid.getMapSize();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            Status[][] mapView \u003d getMapView(mapGrid);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            columnLabel \u003d 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            rowLabel \u003d \u0027A\u0027;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            grid.getChildren().clear();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            for (int i \u003d 0; i \u003c size + 1; i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                HBox row \u003d new HBox();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                for (int j \u003d 0; j \u003c size + 1; j++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                    StackPane sp;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                    // First row and column are used for labels"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                    if (i \u003d\u003d 0 \u0026\u0026 j \u003d\u003d 0) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                        sp \u003d getUiCell(\"\", Color.WHITE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                    } else if (i \u003d\u003d 0) { // if first row"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                        sp \u003d getRowLabelCell();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                    } else if (j \u003d\u003d 0) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                        sp \u003d getColumnLabelCell();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                        sp \u003d getUiCell(\"\", getColor(mapView[i - 1][j - 1]));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                    row.getChildren().add(sp);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                grid.getChildren().add(row);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        });"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private StackPane getUiCell(String label, Color fillColour) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Rectangle cell \u003d new Rectangle(30, 30);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        cell.setStroke(Color.BLACK);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        cell.setFill(fillColour);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Text text \u003d new Text(label);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        StackPane sp \u003d new StackPane();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        sp.getChildren().addAll(cell, text);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return sp;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private StackPane getColumnLabelCell() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        StackPane sp \u003d getUiCell(String.valueOf(rowLabel++), Color.WHITE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return sp;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private StackPane getRowLabelCell() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        StackPane sp \u003d getUiCell(String.valueOf(columnLabel++), Color.WHITE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return sp;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    protected abstract Status[][] getMapView(MapGrid mapGrid);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Determine color of cell from the status of cell"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    Color getColor(Status status) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        switch (status) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        case HIDDEN:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            return Color.CADETBLUE;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        case SHIP:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            return Color.BLACK;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        case SHIPHIT:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            return Color.ORANGE;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        case EMPTY:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            return Color.LIGHTBLUE;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        case EMPTYHIT:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            return Color.DARKBLUE;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        case DESTROYED:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            return Color.RED;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            return Color.WHITE;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 108
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Cell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * An UI component that displays information of a {@code Cell}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on MapGrid level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public final Cell cell;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public PersonCard(Cell cell, int displayedIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        this.cell \u003d cell;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        name.setText(cell.getName().fullName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        phone.setText(cell.getPhone().value);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        address.setText(cell.getAddress().value);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        email.setText(cell.getEmail().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        cell.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                \u0026\u0026 cell.equals(card.cell);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 12,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PlayerMap.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import javafx.beans.value.ObservableBooleanValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.MapGrid;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Status;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public class PlayerMap extends Map {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public PlayerMap(ObservableBooleanValue modelUpdateObservable, MapGrid mapGrid) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        super(modelUpdateObservable, mapGrid);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    protected Status[][] getMapView(MapGrid mapGrid) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return mapGrid.getPlayerMapView();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatisticView.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bos10"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bos10"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bos10"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bos10"
        },
        "content": "import javafx.scene.chart.BarChart;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bos10"
        },
        "content": "import javafx.scene.chart.CategoryAxis;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bos10"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bos10"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bos10"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bos10"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bos10"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bos10"
        },
        "content": " *  Initializes the Statistics Window"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bos10"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bos10"
        },
        "content": "public class StatisticView extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private static final String FXML \u003d \"StatisticView.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private StackPane statisticView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bos10"
        },
        "content": "    // set constructor which one"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public StatisticView(Stage root, XYChart.Series statsData) { //}, List\u003cXYChart.Data\u003cString, Integer\u003e\u003e graphData) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bos10"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bos10"
        },
        "content": "        CategoryAxis xAxis \u003d new CategoryAxis();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bos10"
        },
        "content": "        NumberAxis yAxis \u003d new NumberAxis();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bos10"
        },
        "content": "        BarChart\u003cString, Number\u003e statsChart \u003d new BarChart\u003c\u003e(xAxis, yAxis);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bos10"
        },
        "content": "        statsChart.getData().add(statsData);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bos10"
        },
        "content": "        statsChart.setLegendVisible(false);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bos10"
        },
        "content": "        statsChart.setTitle(\"Gameplay Summary\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bos10"
        },
        "content": "        xAxis.setLabel(\"Your Statistics\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bos10"
        },
        "content": "        yAxis.setLabel(\"\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bos10"
        },
        "content": "        statisticView.getChildren().add(statsChart);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * Opens pop-up window for statistics."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bos10"
        },
        "content": "        logger.fine(\"Displaying Statistics\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bos10"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bos10"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bos10": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatsPane.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bos10"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bos10"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bos10"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bos10"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bos10"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bos10"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bos10"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bos10"
        },
        "content": "public class StatsPane extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Attacks Made: %s\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //TOREMOVE private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private static final String FXML \u003d \"StatsPane.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bos10"
        },
        "content": "    // private PlayerStatistics playerStats \u003d playerStats;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private long startTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private Label shipCount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //    private Timer myTimer \u003d new Timer();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //    private TimerTask task \u003d new TimerTask() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //        @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //        public void run() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //            Platform.runLater(()-\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //                updateSyncStatus();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //            });"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //    };"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public StatsPane() { //StatsPane(PlayerStatistics playerStats)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bos10"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bos10"
        },
        "content": "        updateStats();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //this.startTime \u003d System.nanoTime();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bos10"
        },
        "content": "        // Upon init of map, trigger this."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //myTimer.scheduleAtFixedRate(task, 1000, 1000);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * Stops the internal Timer that increments the time display."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //  public void stopTimer() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //      myTimer.cancel();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //  }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * Updates elapsed time"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private void updateStats() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bos10"
        },
        "content": "       // String elapsedTime \u003d convert(getElapsedTime(System.nanoTime()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bos10"
        },
        "content": "       // shipCount.setText(String.format(SYNC_STATUS_UPDATED, \"5\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bos10"
        },
        "content": "    // command to get attacks made"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bos10"
        },
        "content": "    // private int getStats(){"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //     return"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bos10"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bos10"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @param endTime"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //    public long getElapsedTime(long endTime) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //        long elapsedTimeSeconds \u003d (endTime - this.startTime) / (1000000000);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //        return elapsedTimeSeconds;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @param secondsToConvert in seconds to convert"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bos10"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bos10": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bos10"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bos10"
        },
        "content": "import java.util.TimerTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bos10"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bos10"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Elapsed Time: %s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //TOREMOVE private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private long startTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label syncStatus;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private Timer myTimer \u003d new Timer();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private TimerTask task \u003d new TimerTask() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bos10"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bos10"
        },
        "content": "            public void run() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bos10"
        },
        "content": "                Platform.runLater(()-\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bos10"
        },
        "content": "                    updateSyncStatus();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bos10"
        },
        "content": "                });"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bos10"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bos10"
        },
        "content": "    };"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public StatusBarFooter() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.startTime \u003d System.nanoTime();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bos10"
        },
        "content": "        myTimer.scheduleAtFixedRate(task, 1000, 1000);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Stops the internal Timer that increments the time display."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void stopTimer() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        myTimer.cancel();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * Updates elapsed time"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private void updateSyncStatus() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bos10"
        },
        "content": "        String elapsedTime \u003d convert(getElapsedTime(System.nanoTime()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bos10"
        },
        "content": "        syncStatus.setText(String.format(SYNC_STATUS_UPDATED, elapsedTime));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bos10"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @param endTime"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public long getElapsedTime(long endTime) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bos10"
        },
        "content": "        long elapsedTimeSeconds \u003d (endTime - this.startTime) / (1000000000);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return elapsedTimeSeconds;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @param secondsToConvert in seconds to convert"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private String convert(long secondsToConvert) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bos10"
        },
        "content": "        long millis \u003d secondsToConvert * 1000;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bos10"
        },
        "content": "        long hours \u003d TimeUnit.MILLISECONDS.toHours(millis);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bos10"
        },
        "content": "        long minutes \u003d TimeUnit.MILLISECONDS.toMinutes(millis) % TimeUnit.HOURS.toMinutes(1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bos10"
        },
        "content": "        long seconds \u003d TimeUnit.MILLISECONDS.toSeconds(millis) % TimeUnit.MINUTES.toSeconds(1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bos10"
        },
        "content": "        String format \u003d String.format(\"%02d:%02d:%02d\", Math.abs(hours), Math.abs(minutes), Math.abs(seconds));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return format;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bos10": 41,
      "s-tr": 3,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/battleship.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 1,
      "-": 85
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bos10"
        },
        "content": ".stats-pane {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bos10"
        },
        "content": "    -fx-background-color: derive(#dd1144, 50%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bos10"
        },
        "content": "}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bos10": 5,
      "-": 352
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "         title\u003d\"Battleship\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    \u003cImage url\u003d\"@/images/battleship.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "          \u003cVBox fx:id\u003d\"cellList\" minWidth\u003d\"400\" prefWidth\u003d\"400\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            \u003cStackPane\u003e\u003cText text\u003d\"Your board\" fill\u003d\"white\"\u003e\u003c/Text\u003e\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bos10"
        },
        "content": "            \u003cStackPane fx:id\u003d\"statusbarPlaceholder2\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "          \u003cVBox fx:id\u003d\"enemyMap\" minWidth\u003d\"400\" prefWidth\u003d\"400\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            \u003cStackPane\u003e\u003cText text\u003d\"Enemy board\" fill\u003d\"white\"\u003e\u003c/Text\u003e\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            \u003cStackPane fx:id\u003d\"browserPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" \u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 11,
      "bos10": 1,
      "-": 63
    }
  },
  {
    "path": "src/main/resources/view/PlayerMap.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003cVBox fx:id\u003d\"grid\" fillWidth\u003d\"false\" alignment\u003d\"CENTER\" xmlns\u003d\"http://javafx.com/javafx/8.0.172-ea\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 1,
      "-": 5
    }
  },
  {
    "path": "src/main/resources/view/StatisticView.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bos10"
        },
        "content": "         title\u003d\"Statistics\" minWidth\u003d\"400\" minHeight\u003d\"400\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bos10"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bos10"
        },
        "content": "        \u003cImage url\u003d\"@/images/battleship.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bos10"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bos10"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bos10"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bos10"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bos10"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bos10"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bos10"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bos10"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bos10"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"ALWAYS\" fx:id\u003d\"statisticView\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bos10"
        },
        "content": "                           prefWidth\u003d\"600\" prefHeight\u003d\"400\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bos10"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bos10"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bos10"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bos10"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bos10"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bos10"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bos10"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "bos10": 32
    }
  },
  {
    "path": "src/main/resources/view/StatsPane.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003c!--\u003cGridPane styleClass\u003d\"stats-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e--\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bos10"
        },
        "content": "    \u003c!--\u003ccolumnConstraints\u003e--\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bos10"
        },
        "content": "        \u003c!--\u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e--\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bos10"
        },
        "content": "        \u003c!--\u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" halignment\u003d\"RIGHT\" /\u003e--\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bos10"
        },
        "content": "    \u003c!--\u003c/columnConstraints\u003e--\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bos10"
        },
        "content": "    \u003c!--\u003cLabel fx:id\u003d\"syncStatus\"/\u003e--\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bos10"
        },
        "content": "    \u003c!--\u003cLabel fx:id\u003d\"saveLocationStatus\" GridPane.columnIndex\u003d\"1\" /\u003e--\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003c!--\u003c/GridPane\u003e--\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003cVBox fx:id\u003d\"grid\" fillWidth\u003d\"false\" alignment\u003d\"CENTER\" xmlns\u003d\"http://javafx.com/javafx/8.0.172-ea\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003cLabel fx:id\u003d\"shipCount\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003c!--\u003cLabel fx:id\u003d\"saveLocationStatus\" GridPane.columnIndex\u003d\"1\" /\u003e--\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003c/VBox\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "bos10": 21
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Cell;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * Provides a handle to a cell card in the cell list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EMAIL_FIELD_ID \u003d \"#email\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label addressLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label emailLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressLabel.getText();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return emailLabel.getText();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns true if this handle contains {@code cell}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public boolean equals(Cell cell) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return getName().equals(cell.getName().fullName)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                \u0026\u0026 getAddress().equals(cell.getAddress().value)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                \u0026\u0026 getPhone().equals(cell.getPhone().value)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                \u0026\u0026 getEmail().equals(cell.getEmail().value)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(cell.getTags().stream()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                        .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                        .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 9,
      "-": 78
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Cell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * Provides a handle for {@code PlayerMap} containing the list of {@code PersonCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public class PersonListPanelHandle extends NodeHandle\u003cListView\u003cCell\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PERSON_LIST_VIEW_ID \u003d \"#personListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private Optional\u003cCell\u003e lastRememberedSelectedPersonCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public PersonListPanelHandle(ListView\u003cCell\u003e personListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(personListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a handle to the selected {@code PersonCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        List\u003cCell\u003e selectedCellList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        if (selectedCellList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            throw new AssertionError(\"Cell list size expected 1.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(PersonCardHandle::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedCellList.get(0)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        List\u003cCell\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Navigates the listview to display {@code cell}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void navigateToCard(Cell cell) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        if (!getRootNode().getItems().contains(cell)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            throw new IllegalArgumentException(\"Cell does not exist.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            getRootNode().scrollTo(cell);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects the {@code PersonCard} at {@code index} in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns the cell card handle of a cell associated with the {@code index} in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle getPersonCardHandle(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(PersonCardHandle::new)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(handle -\u003e handle.equals(getPerson(index)))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private Cell getPerson(int index) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remembers the selected {@code PersonCard} in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rememberSelectedPersonCard() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        List\u003cCell\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            lastRememberedSelectedPersonCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            lastRememberedSelectedPersonCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the selected {@code PersonCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code rememberSelectedPersonCard()} call."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSelectedPersonCardChanged() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        List\u003cCell\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return lastRememberedSelectedPersonCard.isPresent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            return !lastRememberedSelectedPersonCard.isPresent()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                    || !lastRememberedSelectedPersonCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 19,
      "-": 140
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.MapGrid;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.json\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(saveFileLocation);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                jsonAddressBookStorage.saveAddressBook(initialDataSupplier.get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the address book data stored inside the storage file."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public MapGrid readStorageAddressBook() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            return new MapGrid(storage.readAddressBook().get());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            throw new AssertionError(\"Data is not in the MapGrid format.\", dce);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return storage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 4,
      "-": 93
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/battleship.png\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.getImage(null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(errorMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false, errorMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 1,
      "-": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.logic.commands.StatsCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Cell;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bos10"
        },
        "content": "        // To modify this for testing Statistics Command"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //assertHistoryCorrect(deleteCommand); Boston : TO FIX"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertCommandSuccess(listCommand, \"No ships put down.\", model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //assertHistoryCorrect(listCommand); BOSTON: TO FIX"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell expectedCell \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        expectedModel.addPerson(expectedCell);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(CommandException.class, addCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //assertHistoryCorrect(addCommand); BOSTON : TO FIX"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * {@code StatsCommand}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "bos10"
        },
        "content": "            CommandResult result \u003d logic.execute(StatsCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "bos10"
        },
        "content": "                    StatsCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bos10"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser()); //.split(\" \")[0]);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "bos10"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of StatsCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 3,
      "iwle": 1,
      "bos10": 11,
      "-": 175
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Cell;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell validCell \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        expectedModel.addPerson(validCell);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertCommandSuccess(new AddCommand(validCell), model, commandHistory,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validCell), expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell cellInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertCommandFailure(new AddCommand(cellInList), model, commandHistory,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 7,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AttackCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "s-tr"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static seedu.address.testutil.SizeTenMapGrid.initialisePlayerSizeTen;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.battle.BattleManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.battle.state.BattleState;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.battleship.DestroyerBattleship;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.battleship.Orientation;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Enemy;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Player;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "s-tr"
        },
        "content": "public class AttackCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private Player player;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private Enemy enemy;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void prepareModel() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        player \u003d new Player();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        enemy \u003d new Enemy();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        initialisePlayerSizeTen(player);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        initialisePlayerSizeTen(enemy);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        model \u003d new ModelManager(new BattleManager(player, enemy));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        model.setBattleState(BattleState.PLAYER_ATTACK);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void execute_duplicateAttack_fail() throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        AttackCommand cmd \u003d new AttackCommand(TypicalIndexes.COORDINATES_A1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        cmd.execute(model, new CommandHistory());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        thrown.expectMessage(AttackCommand.MESSAGE_DUPLICATE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        cmd.execute(model, new CommandHistory());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void execute_attackHits_hitsAndDecreasesShipHealthAndUpdatesStats() throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Battleship ship \u003d new DestroyerBattleship(Collections.emptySet());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        int initialLife \u003d ship.getLife();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        enemy.getMapGrid().putShip(ship, TypicalIndexes.COORDINATES_A1, new Orientation(\"v\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        int initialMissCount \u003d model.getPlayerStats().getMissCount();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        int initialHitCount \u003d model.getPlayerStats().getHitCount();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        AttackCommand cmd \u003d new AttackCommand(TypicalIndexes.COORDINATES_A1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        CommandResult res \u003d cmd.execute(model, new CommandHistory());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(res.getFeedbackToUser().contains(\"hit\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(ship.getLife() \u003c initialLife);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(model.getPlayerStats().getMissCount() \u003d\u003d initialMissCount);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(model.getPlayerStats().getHitCount() \u003e initialHitCount);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(player.getTargetHistory().contains(TypicalIndexes.COORDINATES_A1));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void execute_missAttack_missesAndUpdatesStats() throws CommandException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        int initialMissCount \u003d model.getPlayerStats().getMissCount();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        int initialHitCount \u003d model.getPlayerStats().getHitCount();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        AttackCommand cmd \u003d new AttackCommand(TypicalIndexes.COORDINATES_A1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        CommandResult res \u003d cmd.execute(model, new CommandHistory());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(res.getFeedbackToUser().contains(\"miss\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(model.getPlayerStats().getMissCount() \u003e initialMissCount);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(model.getPlayerStats().getHitCount() \u003d\u003d initialHitCount);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(player.getTargetHistory().contains(TypicalIndexes.COORDINATES_A1));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void execute_attackDestroysShip_destroysAndUpdatesStats() throws CommandException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Battleship ship \u003d new DestroyerBattleship(Collections.emptySet());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        int initialLife \u003d ship.getLife();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        enemy.getMapGrid().putShip(ship, TypicalIndexes.COORDINATES_A1, new Orientation(\"v\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        int initialDestroyedCount \u003d model.getPlayerStats().getEnemyShipsDestroyed();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // attack all the cells of the ship except one"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        int shipLength \u003d ship.getLength();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        for (int i \u003d 1; i \u003c shipLength; i++) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            new AttackCommand(new Coordinates(i, 0)).execute(model, new CommandHistory());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        AttackCommand cmd \u003d new AttackCommand(TypicalIndexes.COORDINATES_A1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        CommandResult res \u003d cmd.execute(model, new CommandHistory());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(res.getFeedbackToUser().contains(\"destroy\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(ship.isDestroyed());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(model.getPlayerStats().enemyShipsDestroyed() \u003e initialDestroyedCount);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(player.getTargetHistory().contains(TypicalIndexes.COORDINATES_A1));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void execute_outOfBounds_fail() throws CommandException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Coordinates invalid \u003d TypicalIndexes.INVALID_COORDINATE;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        AttackCommand cmd \u003d new AttackCommand(invalid);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        CommandResult res \u003d cmd.execute(model, new CommandHistory());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(res.getFeedbackToUser().contains(\"failed\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "s-tr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 114
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/BeginCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "s-tr"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static seedu.address.testutil.SizeTenMapGrid.initialisePlayerSizeTen;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.battle.BattleManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.battle.state.BattleState;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Player;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.testutil.InterceptedEnemy;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "public class BeginCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private Player player;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private InterceptedEnemy enemy;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void prepareModel() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        player \u003d new Player();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        enemy \u003d new InterceptedEnemy();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        initialisePlayerSizeTen(player);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        initialisePlayerSizeTen(enemy);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        model \u003d new ModelManager(new BattleManager(player, enemy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void execute_userPutShipState_callsEnemyPrepAndSetsState() throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        model.setBattleState(BattleState.PLAYER_PUT_SHIP);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        CommandResult res \u003d new BeginCommand().execute(model, new CommandHistory());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(enemy.isPrepCalled());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertEquals(model.getBattleState(), BattleState.PLAYER_ATTACK);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertEquals(res.getFeedbackToUser(), BeginCommand.MESSAGE_BEGIN_SUCCESS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void execute_incorrectState_fails() throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // TODO: implement failing behaviour when state is wrong"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "s-tr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.MapGrid;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        expectedModel.setAddressBook(new MapGrid());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 2,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COORDINATES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ORIENTATION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.MapGrid;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Cell;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String VALID_TAG_UNUSED \u003d \"unused\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String VALID_COORDINATES_FIRST_ROW \u003d \"a1\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String VALID_COORDINATES_MIDDLE_ROW \u003d \"e1\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String VALID_COORDINATES_LAST_ROW \u003d \"j1\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String VALID_HORIZONTAL_ORIENTATION \u003d \"horizontal\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String VALID_VERTICAL_ORIENTATION \u003d \"vertical\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String VALID_NAME_DESTROYER \u003d \"destroyer\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String COORDINATE_FIRST_ROW \u003d \" \" + PREFIX_COORDINATES + VALID_COORDINATES_FIRST_ROW;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String COORDINATE_MIDDLE_ROW \u003d \" \" + PREFIX_COORDINATES + VALID_COORDINATES_MIDDLE_ROW;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String COORDINATE_LAST_ROW \u003d \" \" + PREFIX_COORDINATES + VALID_COORDINATES_LAST_ROW;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String NAME_DESC_DESTROYER \u003d \" \" + PREFIX_NAME + VALID_NAME_DESTROYER;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String ORIENTATION_HORIZONTAL \u003d \" \" + PREFIX_ORIENTATION + VALID_HORIZONTAL_ORIENTATION;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String INVALID_COORDINATE_DESC_SYMBOLS \u003d \" \" + PREFIX_COORDINATES"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + \"*1\"; // symbols not allowed"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String INVALID_COORDINATE_DESC_OUT_OF_BOUNDS \u003d \" \" + PREFIX_COORDINATES"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + \"z1\"; // out of bounds, only characters between \u0027a\u0027 and \u0027j\u0027 are accepted"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                                            CommandResult expectedCommandResult, Model expectedModel) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandHistory, CommandResult, Model)}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                                            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, actualCommandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * - the address book, filtered cell list and selected cell in {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                                            String expectedMessage) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        MapGrid expectedMapGrid \u003d new MapGrid(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        List\u003cCell\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell expectedSelectedCell \u003d actualModel.getSelectedPerson();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            assertEquals(expectedMapGrid, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            assertEquals(expectedSelectedCell, actualModel.getSelectedPerson());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the cell at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell cell \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        final String[] splitName \u003d cell.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Deletes the first cell in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell firstCell \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        model.deletePerson(firstCell);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 15,
      "iwle": 21,
      "-": 140
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Cell;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell cellToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, cellToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        expectedModel.deletePerson(cellToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell cellToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, cellToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        expectedModel.deletePerson(cellToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell cellToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        expectedModel.deletePerson(cellToDelete);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        // delete -\u003e first cell deleted"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered cell list to show all persons"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        // redo -\u003e same first cell deleted again"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * 1. Deletes a {@code Cell} from a filtered list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted cell in the"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the cell object regardless of indexing."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell cellToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        expectedModel.deletePerson(cellToDelete);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        // delete -\u003e deletes second cell in unfiltered cell list / first cell in filtered cell list"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered cell list to show all persons"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertNotEquals(cellToDelete, model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        // redo -\u003e deletes same second cell in unfiltered cell list"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        // different cell -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 22,
      "-": 155
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCellDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public class EditCellDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.MapGrid;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Cell;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell editedCell \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedCell).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedCell);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new MapGrid(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedCell);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell lastCell \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastCell);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell editedCell \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedCell);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new MapGrid(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        expectedModel.setPerson(lastCell, editedCell);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell editedCell \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedCell);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new MapGrid(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell cellInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell editedCell \u003d new PersonBuilder(cellInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedCell);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new MapGrid(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedCell);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell firstCell \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstCell).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        // edit cell in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell cellInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                new EditPersonDescriptorBuilder(cellInList).build());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell editedCell \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell cellToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedCell).build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new MapGrid(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        expectedModel.setPerson(cellToEdit, editedCell);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        // edit -\u003e first cell edited"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered cell list to show all persons"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        // redo -\u003e same first cell edited again"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * 1. Edits a {@code Cell} from a filtered list."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited cell in the"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the cell object regardless of indexing."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell editedCell \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedCell).build();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new MapGrid(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell cellToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        expectedModel.setPerson(cellToEdit, editedCell);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        // edit -\u003e edits second cell in unfiltered cell list / first cell in filtered cell list"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered cell list to show all persons"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), cellToEdit);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        // redo -\u003e edits same second cell in unfiltered cell list"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 46,
      "-": 202
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        // different cell -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 2,
      "-": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/InitialiseMapCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public class InitialiseMapCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void execute_initialisemap_success() throws Exception {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        int validSize \u003d InitialiseMapCommand.MINIMUM_MAP_SIZE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        InitialiseMapCommand initialiseMapCommand \u003d new InitialiseMapCommand(validSize);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        CommandResult commandResult \u003d initialiseMapCommand.execute(model, history);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(String.format(InitialiseMapCommand.MESSAGE_SUCCESS, validSize), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(validSize, model.getMapSize());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void execute_initialisemapWithSizeMoreThanMax_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        int invalidSize \u003d InitialiseMapCommand.MAXIMUM_MAP_SIZE + 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        InitialiseMapCommand initialiseMapCommand \u003d new InitialiseMapCommand(invalidSize);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        thrown.expectMessage(String.format(InitialiseMapCommand.MESSAGE_INVALID_MAP_SIZE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                InitialiseMapCommand.MINIMUM_MAP_SIZE, InitialiseMapCommand.MAXIMUM_MAP_SIZE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        initialiseMapCommand.execute(model, history);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void execute_initialisemapWithSizeLessThanMin_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        int invalidSize \u003d InitialiseMapCommand.MINIMUM_MAP_SIZE - 1;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        InitialiseMapCommand initialiseMapCommand \u003d new InitialiseMapCommand(invalidSize);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        thrown.expectMessage(String.format(InitialiseMapCommand.MESSAGE_INVALID_MAP_SIZE,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                InitialiseMapCommand.MINIMUM_MAP_SIZE, InitialiseMapCommand.MAXIMUM_MAP_SIZE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        initialiseMapCommand.execute(model, history);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "// import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": "// import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "// import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": "// import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "    **/"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 6,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListTagsCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.DestroyerBattleship;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Orientation;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class ListTagsCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private Set\u003cTag\u003e testTags1 \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private Set\u003cTag\u003e testTags2 \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private Tag testTag1 \u003d new Tag(\"testTag1\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private Tag testTag2 \u003d new Tag(\"testTag2\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private Tag testTag3 \u003d new Tag(\"testTag3\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private Battleship battleshipOne;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private Battleship battleshipTwo;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "        testTags1.add(testTag1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": "        testTags1.add(testTag2);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "        testTags2.add(testTag3);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iwle"
        },
        "content": "        battleshipOne \u003d new DestroyerBattleship(testTags1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": "        battleshipTwo \u003d new DestroyerBattleship(testTags2);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iwle"
        },
        "content": "        model.deployBattleship(battleshipOne, new Coordinates(\"a1\"), new Orientation(\"v\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iwle"
        },
        "content": "        model.deployBattleship(battleshipTwo, new Coordinates(\"a2\"), new Orientation(\"v\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void execute_testTags_showsSame() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Set\u003cTag\u003e modelTags \u003d model.getHumanPlayer().getFleet().getAllTags();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iwle"
        },
        "content": "        boolean allTagsContained \u003d true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iwle"
        },
        "content": "        for (Tag testTag : testTags1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iwle"
        },
        "content": "            if (!modelTags.contains(testTag)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iwle"
        },
        "content": "                allTagsContained \u003d false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iwle"
        },
        "content": "        for (Tag testTag : testTags2) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iwle"
        },
        "content": "            if (!modelTags.contains(testTag)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iwle"
        },
        "content": "                allTagsContained \u003d false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(allTagsContained, true);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void execute_testTags_fail() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Set\u003cTag\u003e tags \u003d model.getHumanPlayer().getFleet().getAllTags();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(tags.contains(new Tag(\"nonExistentTag\")));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/PutShipCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_HORIZONTAL_ORIENTATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_VERTICAL_ORIENTATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.COORDINATES_A1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.COORDINATES_A10;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.COORDINATES_A2;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.COORDINATES_B1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.COORDINATES_J1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.COORDINATES_LAST_CELL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.MAP_SIZE_TEN;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getEmptyMapGrid;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.AircraftCarrierBattleship;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.DestroyerBattleship;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Orientation;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.cell.Cell;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iwle"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class PutShipCommandTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private Model model \u003d new ModelManager(getEmptyMapGrid(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private final Set\u003cTag\u003e emptySet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void execute_battleshipAlreadyPresent_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int mapSize \u003d MAP_SIZE_TEN;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Cell[][] cellGrid \u003d new Cell[mapSize][mapSize];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iwle"
        },
        "content": "        for (int i \u003d 0; i \u003c mapSize; i++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iwle"
        },
        "content": "            for (int j \u003d 0; j \u003c mapSize; j++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iwle"
        },
        "content": "                cellGrid[i][j] \u003d new Cell();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleship \u003d new DestroyerBattleship(emptySet);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        model.getHumanMapGrid().initialise(cellGrid);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        model.getHumanMapGrid().getCell(COORDINATES_A1).putShip(battleship);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation orientation \u003d new Orientation(VALID_HORIZONTAL_ORIENTATION);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iwle"
        },
        "content": "        PutShipCommand putShipCommand \u003d new PutShipCommand(COORDINATES_A1, battleship, orientation);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertCommandFailure(putShipCommand, model, commandHistory,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iwle"
        },
        "content": "                PutShipCommand.MESSAGE_BATTLESHIP_PRESENT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void execute_putBattleshipVertical_failure() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int mapSize \u003d MAP_SIZE_TEN;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Cell[][] cellGrid \u003d new Cell[mapSize][mapSize];"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iwle"
        },
        "content": "        for (int i \u003d 0; i \u003c mapSize; i++) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iwle"
        },
        "content": "            for (int j \u003d 0; j \u003c mapSize; j++) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iwle"
        },
        "content": "                cellGrid[i][j] \u003d new Cell();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleship \u003d new Battleship();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        model.getHumanMapGrid().initialise(cellGrid);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        model.getHumanMapGrid().getCell(COORDINATES_B1).putShip(battleship);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation orientation \u003d new Orientation(VALID_VERTICAL_ORIENTATION);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iwle"
        },
        "content": "        PutShipCommand putShipCommand \u003d new PutShipCommand(COORDINATES_A1, battleship, orientation);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertCommandFailure(putShipCommand, model, commandHistory,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iwle"
        },
        "content": "                PutShipCommand.MESSAGE_BATTLESHIP_PRESENT_BODY_VERTICAL);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void execute_putBattleshipHorizontal_failure() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int mapSize \u003d MAP_SIZE_TEN;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Cell[][] cellGrid \u003d new Cell[mapSize][mapSize];"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iwle"
        },
        "content": "        for (int i \u003d 0; i \u003c mapSize; i++) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iwle"
        },
        "content": "            for (int j \u003d 0; j \u003c mapSize; j++) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iwle"
        },
        "content": "                cellGrid[i][j] \u003d new Cell();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleship \u003d new Battleship();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        model.getHumanMapGrid().initialise(cellGrid);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        model.getHumanMapGrid().getCell(COORDINATES_A2).putShip(battleship);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation orientation \u003d new Orientation(VALID_HORIZONTAL_ORIENTATION);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iwle"
        },
        "content": "        PutShipCommand putShipCommand \u003d new PutShipCommand(COORDINATES_A1, battleship, orientation);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertCommandFailure(putShipCommand, model, commandHistory,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iwle"
        },
        "content": "                PutShipCommand.MESSAGE_BATTLESHIP_PRESENT_BODY_HORIZONTAL);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void execute_battleshipTooHorizontal_failure() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int mapSize \u003d MAP_SIZE_TEN;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Cell[][] cellGrid \u003d new Cell[mapSize][mapSize];"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iwle"
        },
        "content": "        for (int i \u003d 0; i \u003c mapSize; i++) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iwle"
        },
        "content": "            for (int j \u003d 0; j \u003c mapSize; j++) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iwle"
        },
        "content": "                cellGrid[i][j] \u003d new Cell();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        model.getHumanMapGrid().initialise(cellGrid);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleship \u003d new Battleship();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation orientation \u003d new Orientation(VALID_HORIZONTAL_ORIENTATION);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iwle"
        },
        "content": "        PutShipCommand putShipCommand \u003d new PutShipCommand(COORDINATES_A10, battleship, orientation);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertCommandFailure(putShipCommand, model, commandHistory,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iwle"
        },
        "content": "                Messages.MESSAGE_BODY_LENGTH_TOO_LONG);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void execute_battleshipTooVertical_failure() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int mapSize \u003d MAP_SIZE_TEN;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Cell[][] cellGrid \u003d new Cell[mapSize][mapSize];"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iwle"
        },
        "content": "        for (int i \u003d 0; i \u003c mapSize; i++) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iwle"
        },
        "content": "            for (int j \u003d 0; j \u003c mapSize; j++) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iwle"
        },
        "content": "                cellGrid[i][j] \u003d new Cell();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        model.getHumanMapGrid().initialise(cellGrid);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleship \u003d new Battleship();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation orientation \u003d new Orientation(VALID_VERTICAL_ORIENTATION);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iwle"
        },
        "content": "        PutShipCommand putShipCommand \u003d new PutShipCommand(COORDINATES_J1, battleship, orientation);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertCommandFailure(putShipCommand, model, commandHistory,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iwle"
        },
        "content": "                Messages.MESSAGE_BODY_LENGTH_TOO_LONG);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void execute_testPutHorizontal_success() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int mapSize \u003d MAP_SIZE_TEN;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Cell[][] cellGrid \u003d new Cell[mapSize][mapSize];"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iwle"
        },
        "content": "        for (int i \u003d 0; i \u003c mapSize; i++) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iwle"
        },
        "content": "            for (int j \u003d 0; j \u003c mapSize; j++) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iwle"
        },
        "content": "                cellGrid[i][j] \u003d new Cell();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        model.getHumanMapGrid().initialise(cellGrid);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleship \u003d new AircraftCarrierBattleship(emptySet);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation orientation \u003d new Orientation(VALID_HORIZONTAL_ORIENTATION);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iwle"
        },
        "content": "        PutShipCommand putShipCommand \u003d new PutShipCommand(COORDINATES_A1, battleship, orientation);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iwle"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iwle"
        },
        "content": "            putShipCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iwle"
        },
        "content": "            // Test length of battleship"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iwle"
        },
        "content": "            for (int i \u003d 0; i \u003c battleship.getLength(); i++) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                Cell cellToCheck \u003d model.getHumanMapGrid().getCell("
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iwle"
        },
        "content": "                        COORDINATES_A1.getRowIndex().getZeroBased(),"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iwle"
        },
        "content": "                        COORDINATES_A1.getColIndex().getZeroBased() + i);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iwle"
        },
        "content": "                assertTrue(cellToCheck.hasBattleShip());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iwle"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iwle"
        },
        "content": "            throw new AssertionError(\"Test should not fail.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void execute_testPutVertical_success() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int mapSize \u003d MAP_SIZE_TEN;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Cell[][] cellGrid \u003d new Cell[mapSize][mapSize];"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iwle"
        },
        "content": "        for (int i \u003d 0; i \u003c mapSize; i++) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iwle"
        },
        "content": "            for (int j \u003d 0; j \u003c mapSize; j++) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iwle"
        },
        "content": "                cellGrid[i][j] \u003d new Cell();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        model.getHumanMapGrid().initialise(cellGrid);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleship \u003d new AircraftCarrierBattleship(emptySet);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation orientation \u003d new Orientation(VALID_VERTICAL_ORIENTATION);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iwle"
        },
        "content": "        PutShipCommand putShipCommand \u003d new PutShipCommand(COORDINATES_A1, battleship, orientation);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iwle"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iwle"
        },
        "content": "            putShipCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iwle"
        },
        "content": "            // Test length of battleship"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iwle"
        },
        "content": "            for (int i \u003d 0; i \u003c battleship.getLength(); i++) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                Cell cellToCheck \u003d model.getHumanMapGrid().getCell("
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iwle"
        },
        "content": "                        COORDINATES_A1.getRowIndex().getZeroBased() + i,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iwle"
        },
        "content": "                        COORDINATES_A1.getColIndex().getZeroBased());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iwle"
        },
        "content": "                assertTrue(cellToCheck.hasBattleShip());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iwle"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iwle"
        },
        "content": "            throw new AssertionError(\"Test should not fail.\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void execute_notEnoughBattleships_failure() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int mapSize \u003d MAP_SIZE_TEN;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Cell[][] cellGrid \u003d new Cell[mapSize][mapSize];"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iwle"
        },
        "content": "        for (int i \u003d 0; i \u003c mapSize; i++) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iwle"
        },
        "content": "            for (int j \u003d 0; j \u003c mapSize; j++) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iwle"
        },
        "content": "                cellGrid[i][j] \u003d new Cell();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        model.getHumanMapGrid().initialise(cellGrid);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleship \u003d new AircraftCarrierBattleship(emptySet);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation orientation \u003d new Orientation(VALID_VERTICAL_ORIENTATION);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "iwle"
        },
        "content": "        PutShipCommand putShipCommand \u003d new PutShipCommand(COORDINATES_A1, battleship, orientation);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        model.getHumanMapGrid().initialise(cellGrid);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        model.getHumanMapGrid().getCell(COORDINATES_A2).putShip(battleship);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "iwle"
        },
        "content": "        model.deployBattleship(battleship, COORDINATES_A2, orientation);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertCommandFailure(putShipCommand, model, commandHistory,"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "iwle"
        },
        "content": "                \"Not enough aircraft carriers.\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "iwle"
        },
        "content": "        final PutShipCommand standardCommand \u003d new PutShipCommand(COORDINATES_A1,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "iwle"
        },
        "content": "                new Battleship(), new Orientation(VALID_HORIZONTAL_ORIENTATION));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "iwle"
        },
        "content": "        PutShipCommand commandWithSameValues \u003d new PutShipCommand("
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "iwle"
        },
        "content": "                new Coordinates(\"a1\"), new Battleship(), new Orientation(VALID_HORIZONTAL_ORIENTATION));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // different coordinates -\u003e returns false"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(standardCommand.equals(new PutShipCommand("
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "iwle"
        },
        "content": "                COORDINATES_LAST_CELL, new Battleship(), new Orientation(VALID_HORIZONTAL_ORIENTATION))));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 15,
      "iwle": 251
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_PERSON);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        // different cell -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index},"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * and checks that the model\u0027s selected cell is set to the cell at {@code index} in the filtered cell list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setSelectedPerson(model.getFilteredPersonList().get(index.getZeroBased()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 2,
      "-": 106
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/StatsCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bos10"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bos10"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.logic.battle.AttackDestroyedShip;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.logic.battle.AttackHit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.logic.battle.AttackMissed;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.logic.battle.AttackResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.model.battleship.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.model.player.Player;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.model.statistics.PlayerStatistics;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bos10"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bos10"
        },
        "content": " * The StatsCommandTest will test the methods of the statistics class."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bos10"
        },
        "content": " * Contains integration tests (interaction with Model, Player and Battleship commands)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bos10"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bos10"
        },
        "content": "public class StatsCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void execute_addHit_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bos10"
        },
        "content": "        PlayerStatistics p1 \u003d new PlayerStatistics();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(1, p1.addHit());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(2, p1.addHit());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void execute_addMiss_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bos10"
        },
        "content": "        PlayerStatistics p1 \u003d new PlayerStatistics();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(1, p1.addMiss());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(2, p1.addMiss());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void execute_minusMove_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bos10"
        },
        "content": "        PlayerStatistics p1 \u003d new PlayerStatistics();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(9, p1.minusMove());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(8, p1.minusMove());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void execute_getMovesLeft_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bos10"
        },
        "content": "        PlayerStatistics p1 \u003d new PlayerStatistics();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(10, p1.getMovesLeft());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bos10"
        },
        "content": "        p1.minusMove();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(9, p1.getMovesLeft());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void execute_getHitCount_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bos10"
        },
        "content": "        PlayerStatistics p1 \u003d new PlayerStatistics();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(0, p1.getHitCount());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bos10"
        },
        "content": "        p1.addHit();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(1, p1.getHitCount());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void execute_getMissCount_success() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bos10"
        },
        "content": "        PlayerStatistics p1 \u003d new PlayerStatistics();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(0, p1.getMissCount());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bos10"
        },
        "content": "        p1.addMiss();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(1, p1.getMissCount());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void execute_getAccuracy_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bos10"
        },
        "content": "        PlayerStatistics p1 \u003d new PlayerStatistics();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(0, (int) p1.getAccuracy());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bos10"
        },
        "content": "        p1.addAttack();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bos10"
        },
        "content": "        p1.addHit();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(1, (int) p1.getAccuracy());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void execute_getEnemyShipsDestroyed_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bos10"
        },
        "content": "        PlayerStatistics p1 \u003d new PlayerStatistics();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(0, (int) p1.getEnemyShipsDestroyed());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void execute_addResultToStats_hitSuccess() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bos10"
        },
        "content": "        PlayerStatistics p1 \u003d new PlayerStatistics();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bos10"
        },
        "content": "        AttackResult res \u003d new AttackHit(new Player(\"Alice\", 5, 2, 1),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bos10"
        },
        "content": "                new Player(\"Bob\", 5, 2, 1), new Coordinates(\"a2\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(\"hit\", p1.addResultToStats(res));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void execute_addResultToStats_missSuccess() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bos10"
        },
        "content": "        PlayerStatistics p1 \u003d new PlayerStatistics();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bos10"
        },
        "content": "        AttackResult res \u003d new AttackMissed(new Player(\"Alice\", 5, 2, 1),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bos10"
        },
        "content": "                new Player(\"Bob\", 5, 2, 1), new Coordinates(\"a2\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(\"missed\", p1.addResultToStats(res));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void execute_addResultToStats_attackDestroyedSuccess() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bos10"
        },
        "content": "        PlayerStatistics p1 \u003d new PlayerStatistics();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bos10"
        },
        "content": "        AttackResult res \u003d new AttackDestroyedShip(new Player(\"Alice\", 5, 2, 1),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bos10"
        },
        "content": "                new Player(\"Bob\", 5, 2, 1), new Coordinates(\"a2\"),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bos10"
        },
        "content": "                new Battleship(new Name(\"Placeholder\"), 2, 2, new HashSet\u003c\u003e()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(\"destroyed\", p1.addResultToStats(res));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bos10": 98,
      "-": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Cell;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell expectedCell \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedCell));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedCell));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedCell));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedCell));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedCell));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell expectedCellMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedCellMultipleTags));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell expectedCell \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                new AddCommand(expectedCell));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 14,
      "iwle": 1,
      "-": 126
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AttackCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "s-tr"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.commands.AttackCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * Test scope:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": "public class AttackCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private AttackCommandParser parser \u003d new AttackCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void parse_validArgs_returnsAttackCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            \"a1\", new AttackCommand(new Coordinates(\"a1\")));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void parse_invalidColumn_throwsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            \"$1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, AttackCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void parse_invalidRow_throwsParseException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            \"bb\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, AttackCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void parse_invalidRowColumn_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            \"7c\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, AttackCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void parse_invalidFormat_throwsParseException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            parser, \"asfdafdgar\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, AttackCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void parse_emptyString_throwsParseException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, AttackCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "s-tr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Address;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Cell} being edited,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 4,
      "iwle": 1,
      "-": 206
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/InitialiseMapCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.logic.commands.InitialiseMapCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public class InitialiseMapCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private InitialiseMapCommandParser parser \u003d new InitialiseMapCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void parse_validArgs_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertParseSuccess(parser, \"6\", new InitialiseMapCommand(6));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void parse_missingArgs_failure() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertParseFailure(parser, \"\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, InitialiseMapCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void parse_argsNotPositiveInt_failure() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, InitialiseMapCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertParseFailure(parser, \"-1\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, InitialiseMapCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ListCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class ListCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private ListCommandParser parser \u003d new ListCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Name name \u003d new Name(\"destroyer\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Optional optionalTagSet \u003d Optional.of(tagSet);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Optional optionalName \u003d Optional.of(name);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertParseSuccess(parser, \"list\", new ListCommand(Optional.empty(), Optional.empty()));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": "        tagSet.add(new Tag(\"amazing\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertParseSuccess(parser, \"listTags t/amazing\", new ListCommand(optionalTagSet, Optional.empty()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertParseSuccess(parser, \"listTags t/amazing n/destroyer\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": "                new ListCommand(optionalTagSet, optionalName));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/MapGridParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.logic.commands.StatsCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Cell;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public class MapGridParserTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell cell \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(cell));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(new AddCommand(cell), command);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void parseCommand_addUsingAlias() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell cell \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(AddCommand.COMMAND_ALIAS"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                + \" \" + PersonUtil.getPersonDetails(cell));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(new AddCommand(cell), command);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void parseCommand_deleteUsingAlias() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand(DeleteCommand.COMMAND_ALIAS"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell cell \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(cell).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertTrue(parser.parseCommand(StatsCommand.COMMAND_WORD) instanceof StatsCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertTrue(parser.parseCommand(StatsCommand.COMMAND_WORD + \" 3\") instanceof StatsCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 21,
      "bos10": 3,
      "-": 134
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.AircraftCarrierBattleship;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.CruiserBattleship;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.DestroyerBattleship;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final String INVALID_COORD_1 \u003d \"  \";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final String INVALID_COORD_2 \u003d \"\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final String INVALID_COORD_3 \u003d \"*9\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final String INVALID_COORD_4 \u003d \"z9\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final String INVALID_COORD_5 \u003d \"a0\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final String VALID_COORD_1 \u003d \"a1\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final String VALID_COORD_2 \u003d \"b3\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final Set\u003cTag\u003e emptySet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void parseCoordinates_invalidSpaces_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iwle"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iwle"
        },
        "content": "        ParserUtil.parseCoordinates(INVALID_COORD_1);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void parseCoordinates_emptyString_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "iwle"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "iwle"
        },
        "content": "        ParserUtil.parseCoordinates(INVALID_COORD_2);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void parseCoordinates_symbolString_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "iwle"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "iwle"
        },
        "content": "        ParserUtil.parseCoordinates(INVALID_COORD_3);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void parseCoordinates_outOfBounds_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "iwle"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "iwle"
        },
        "content": "        ParserUtil.parseCoordinates(INVALID_COORD_4);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void parseCoordinates_outOfBoundsToo_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "iwle"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "iwle"
        },
        "content": "        ParserUtil.parseCoordinates(INVALID_COORD_5);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void parseCoordinates_validCoord_returnsNewCoordinates() throws Exception {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Coordinates expectedCoordinates \u003d new Coordinates(VALID_COORD_1);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(expectedCoordinates, ParserUtil.parseCoordinates(VALID_COORD_1));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void parseCoordinates_validCoord_returnsNewCoordinatesToo() throws Exception {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Coordinates expectedCoordinates \u003d new Coordinates(VALID_COORD_2);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(expectedCoordinates, ParserUtil.parseCoordinates(VALID_COORD_2));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void parseBattleship_validBattleship() throws Exception {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship expectedBattleshipOne \u003d new AircraftCarrierBattleship(emptySet);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship expectedBattleshipTwo \u003d new DestroyerBattleship(emptySet);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship expectedBattleshipThree \u003d new CruiserBattleship(emptySet);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(expectedBattleshipOne, ParserUtil.parseBattleship(new Name(\"aircraft carrier\"), emptySet));"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(expectedBattleshipTwo, ParserUtil.parseBattleship(new Name(\"destroyer\"), emptySet));"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(expectedBattleshipThree, ParserUtil.parseBattleship(new Name(\"cruiser\"), emptySet));"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 3,
      "iwle": 70,
      "-": 204
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/PutShipCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COORDINATE_FIRST_ROW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_COORDINATE_DESC_OUT_OF_BOUNDS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_COORDINATE_DESC_SYMBOLS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_DESTROYER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ORIENTATION_HORIZONTAL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COORDINATES_FIRST_ROW;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COORDINATES_LAST_ROW;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_HORIZONTAL_ORIENTATION;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.logic.commands.PutShipCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.DestroyerBattleship;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Orientation;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class PutShipCommandParserTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, PutShipCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private PutShipCommandParser parser \u003d new PutShipCommandParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private final Set\u003cTag\u003e emptySet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // missing field coordinates"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // missing field name"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertParseFailure(parser, COORDINATE_FIRST_ROW, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // no fields specified"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + VALID_COORDINATES_LAST_ROW,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iwle"
        },
        "content": "                \"Invalid command format! \\n\" + PutShipCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // invalid coordinates and missing name"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertParseFailure(parser, INVALID_COORDINATE_DESC_SYMBOLS,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iwle"
        },
        "content": "                \"Invalid command format! \\n\" + PutShipCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertParseFailure(parser, INVALID_COORDINATE_DESC_OUT_OF_BOUNDS,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iwle"
        },
        "content": "                \"Invalid command format! \\n\" + PutShipCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // invalid name followed by valid coordinates"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + INVALID_COORDINATE_DESC_SYMBOLS,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iwle"
        },
        "content": "                \"Invalid command format! \\n\" + PutShipCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + INVALID_COORDINATE_DESC_OUT_OF_BOUNDS,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iwle"
        },
        "content": "                \"Invalid command format! \\n\" + PutShipCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // valid name followed by invalid coordinates."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_AMY + INVALID_COORDINATE_DESC_SYMBOLS,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iwle"
        },
        "content": "                \"Invalid command format! \\n\" + PutShipCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_COORDINATE_DESC_OUT_OF_BOUNDS,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iwle"
        },
        "content": "                \"Invalid command format! \\n\" + PutShipCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + INVALID_COORDINATE_DESC_SYMBOLS,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iwle"
        },
        "content": "                \"Invalid command format! \\n\" + PutShipCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iwle"
        },
        "content": "        String userInput \u003d NAME_DESC_DESTROYER + COORDINATE_FIRST_ROW + ORIENTATION_HORIZONTAL;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleship \u003d new DestroyerBattleship(emptySet);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Coordinates coordinates \u003d new Coordinates(VALID_COORDINATES_FIRST_ROW);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation orientation \u003d new Orientation(VALID_HORIZONTAL_ORIENTATION);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iwle"
        },
        "content": "        PutShipCommand expectedCommand \u003d new PutShipCommand(coordinates, battleship, orientation);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/model/BoundaryValueCheckerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_HORIZONTAL_ORIENTATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_VERTICAL_ORIENTATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.COORDINATES_A1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.COORDINATES_A10;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.COORDINATES_A2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.COORDINATES_B1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.COORDINATES_J1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.MAP_SIZE_TEN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getEmptyMapGrid;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.DestroyerBattleship;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Orientation;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.cell.Cell;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class BoundaryValueCheckerTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private Model model \u003d new ModelManager(getEmptyMapGrid(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void execute_battleshipAlreadyPresent_failure() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int mapSize \u003d MAP_SIZE_TEN;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Cell[][] cellGrid \u003d new Cell[mapSize][mapSize];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iwle"
        },
        "content": "        for (int i \u003d 0; i \u003c mapSize; i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": "            for (int j \u003d 0; j \u003c mapSize; j++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": "                cellGrid[i][j] \u003d new Cell();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleship \u003d new DestroyerBattleship(new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iwle"
        },
        "content": "        model.getHumanMapGrid().initialise(cellGrid);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": "        model.getHumanMapGrid().getCell(COORDINATES_A1).putShip(battleship);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation orientation \u003d new Orientation(VALID_HORIZONTAL_ORIENTATION);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iwle"
        },
        "content": "        BoundaryValueChecker boundaryValueChecker \u003d new BoundaryValueChecker(model.getHumanMapGrid(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iwle"
        },
        "content": "                battleship, COORDINATES_A1, orientation);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Assert.assertThrows(CommandException.class, () -\u003e boundaryValueChecker.performChecks());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void execute_putBattleshipVertical_failure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int mapSize \u003d MAP_SIZE_TEN;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Cell[][] cellGrid \u003d new Cell[mapSize][mapSize];"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iwle"
        },
        "content": "        for (int i \u003d 0; i \u003c mapSize; i++) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iwle"
        },
        "content": "            for (int j \u003d 0; j \u003c mapSize; j++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iwle"
        },
        "content": "                cellGrid[i][j] \u003d new Cell();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleship \u003d new Battleship();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iwle"
        },
        "content": "        model.getHumanMapGrid().initialise(cellGrid);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iwle"
        },
        "content": "        model.getHumanMapGrid().getCell(COORDINATES_B1).putShip(battleship);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation orientation \u003d new Orientation(VALID_VERTICAL_ORIENTATION);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iwle"
        },
        "content": "        BoundaryValueChecker boundaryValueChecker \u003d new BoundaryValueChecker(model.getHumanMapGrid(),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iwle"
        },
        "content": "                battleship, COORDINATES_A1, orientation);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Assert.assertThrows(CommandException.class, () -\u003e boundaryValueChecker.performChecks());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void execute_putBattleshipHorizontal_failure() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int mapSize \u003d MAP_SIZE_TEN;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Cell[][] cellGrid \u003d new Cell[mapSize][mapSize];"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iwle"
        },
        "content": "        for (int i \u003d 0; i \u003c mapSize; i++) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iwle"
        },
        "content": "            for (int j \u003d 0; j \u003c mapSize; j++) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iwle"
        },
        "content": "                cellGrid[i][j] \u003d new Cell();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleship \u003d new Battleship();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iwle"
        },
        "content": "        model.getHumanMapGrid().initialise(cellGrid);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iwle"
        },
        "content": "        model.getHumanMapGrid().getCell(COORDINATES_A2).putShip(battleship);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation orientation \u003d new Orientation(VALID_HORIZONTAL_ORIENTATION);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iwle"
        },
        "content": "        BoundaryValueChecker boundaryValueChecker \u003d new BoundaryValueChecker(model.getHumanMapGrid(),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iwle"
        },
        "content": "                battleship, COORDINATES_A1, orientation);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Assert.assertThrows(CommandException.class, () -\u003e boundaryValueChecker.performChecks());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void execute_battleshipTooHorizontal_failure() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int mapSize \u003d MAP_SIZE_TEN;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Cell[][] cellGrid \u003d new Cell[mapSize][mapSize];"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iwle"
        },
        "content": "        for (int i \u003d 0; i \u003c mapSize; i++) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iwle"
        },
        "content": "            for (int j \u003d 0; j \u003c mapSize; j++) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iwle"
        },
        "content": "                cellGrid[i][j] \u003d new Cell();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iwle"
        },
        "content": "        model.getHumanMapGrid().initialise(cellGrid);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleship \u003d new Battleship();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation orientation \u003d new Orientation(VALID_HORIZONTAL_ORIENTATION);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iwle"
        },
        "content": "        BoundaryValueChecker boundaryValueChecker \u003d new BoundaryValueChecker(model.getHumanMapGrid(),"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iwle"
        },
        "content": "                battleship, COORDINATES_A10, orientation);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Assert.assertThrows(CommandException.class, () -\u003e boundaryValueChecker.performChecks());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void execute_battleshipTooVertical_failure() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int mapSize \u003d MAP_SIZE_TEN;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Cell[][] cellGrid \u003d new Cell[mapSize][mapSize];"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iwle"
        },
        "content": "        for (int i \u003d 0; i \u003c mapSize; i++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iwle"
        },
        "content": "            for (int j \u003d 0; j \u003c mapSize; j++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iwle"
        },
        "content": "                cellGrid[i][j] \u003d new Cell();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iwle"
        },
        "content": "        model.getHumanMapGrid().initialise(cellGrid);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleship \u003d new Battleship();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation orientation \u003d new Orientation(VALID_VERTICAL_ORIENTATION);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iwle"
        },
        "content": "        BoundaryValueChecker boundaryValueChecker \u003d new BoundaryValueChecker(model.getHumanMapGrid(),"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iwle"
        },
        "content": "                battleship, COORDINATES_J1, orientation);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Assert.assertThrows(CommandException.class, () -\u003e boundaryValueChecker.performChecks());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 141
    }
  },
  {
    "path": "src/test/java/seedu/address/model/MapGridTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_UNUSED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import static seedu.address.testutil.SizeTenMapGrid.getSizeTenMapGrid;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Orientation;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Cell;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public class MapGridTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private final MapGrid mapGrid \u003d new MapGrid();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void putShipTest() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        MapGrid sizeTenmap \u003d getSizeTenMapGrid();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Battleship battleship \u003d new Battleship();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation orientation \u003d new Orientation(\"vertical\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iwle"
        },
        "content": "        sizeTenmap.putShip(battleship, new Coordinates(\"a1\"), orientation);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(sizeTenmap.get2dArrayMapGridCopy()[0][0].getBattleship().get(), battleship);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void attackCellTest() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        MapGrid sizeTenmap \u003d getSizeTenMapGrid();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Battleship battleship \u003d new Battleship();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation orientation \u003d new Orientation(\"vertical\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertFalse(sizeTenmap.attackCell(new Coordinates(\"a1\")));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iwle"
        },
        "content": "        sizeTenmap.putShip(battleship, new Coordinates(\"a1\"), orientation);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertTrue(sizeTenmap.attackCell(new Coordinates(\"a1\")));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(Collections.emptyList(), mapGrid.getPersonList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        mapGrid.resetData(null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        MapGrid newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        mapGrid.resetData(newData);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(newData, mapGrid);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        mapGrid.hasPerson(null);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertFalse(mapGrid.hasPerson(ALICE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        mapGrid.addPerson(ALICE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertTrue(mapGrid.hasPerson(ALICE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        mapGrid.addPerson(ALICE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertTrue(mapGrid.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        mapGrid.getPersonList().remove(0);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener_withInvalidationListener_listenerAdded() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        mapGrid.addListener(listener);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        mapGrid.addPerson(ALICE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, counter.get());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener_withInvalidationListener_listenerRemoved() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        mapGrid.addListener(listener);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        mapGrid.removeListener(listener);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        mapGrid.addPerson(ALICE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, counter.get());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void removeTagFromPerson_nonExistentTag_samePerson() throws Exception {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        mapGrid.addPerson(ALICE);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        mapGrid.removeTag(new Tag(VALID_TAG_UNUSED), ALICE);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        MapGrid expectedMapGrid \u003d new AddressBookBuilder().withPerson(ALICE).build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(expectedMapGrid, mapGrid);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * A stub ReadOnlyAddressBook whose cells list can violate interface constraints."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        private final ObservableList\u003cCell\u003e cells \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        AddressBookStub(Collection\u003cCell\u003e cells) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            this.cells.setAll(cells);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        public ObservableList\u003cCell\u003e getPersonList() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            return cells;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 46,
      "iwle": 18,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.battle.state.BattleState;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Cell;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(new MapGrid(), new MapGrid(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(null, modelManager.getSelectedPerson());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertEquals(BattleState.PRE_BATTLE, modelManager.getBattleState());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(null);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(null);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.hasPerson(null);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson_personIsSelectedAndFirstPersonInFilteredPersonList_selectionCleared() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setSelectedPerson(ALICE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.deletePerson(ALICE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(null, modelManager.getSelectedPerson());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson_personIsSelectedAndSecondPersonInFilteredPersonList_firstPersonSelected() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(BOB);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BOB), modelManager.getFilteredPersonList());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setSelectedPerson(BOB);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.deletePerson(BOB);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(ALICE, modelManager.getSelectedPerson());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_personIsSelected_selectedPersonUpdated() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setSelectedPerson(ALICE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell updatedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setPerson(ALICE, updatedAlice);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(updatedAlice, modelManager.getSelectedPerson());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedPerson_personNotInFilteredPersonList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(PersonNotFoundException.class);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setSelectedPerson(ALICE);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedPerson_personInFilteredPersonList_setsSelectedPerson() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.singletonList(ALICE), modelManager.getFilteredPersonList());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setSelectedPerson(ALICE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(ALICE, modelManager.getSelectedPerson());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void setBattleState_nullState_throwsNullPointerException() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        modelManager.setBattleState(null);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void setBattleState_validState_setsBattleState() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        for (BattleState bs: BattleState.values()) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            modelManager.setBattleState(bs);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            assertEquals(modelManager.getBattleState(), bs);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        MapGrid mapGrid \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        MapGrid differentMapGrid \u003d new MapGrid();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        modelManager \u003d new ModelManager(mapGrid, userPrefs);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(mapGrid, userPrefs);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        // different mapGrid -\u003e returns false"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentMapGrid, userPrefs)));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(mapGrid, userPrefs)));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(mapGrid, differentUserPrefs)));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 13,
      "s-tr": 16,
      "-": 175
    }
  },
  {
    "path": "src/test/java/seedu/address/model/VersionedMapGridTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public class VersionedMapGridTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ReadOnlyAddressBook addressBookWithAmy \u003d new AddressBookBuilder().withPerson(AMY).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ReadOnlyAddressBook addressBookWithBob \u003d new AddressBookBuilder().withPerson(BOB).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ReadOnlyAddressBook addressBookWithCarl \u003d new AddressBookBuilder().withPerson(CARL).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ReadOnlyAddressBook emptyAddressBook \u003d new AddressBookBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_singleAddressBook_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        VersionedMapGrid versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_multipleAddressBookPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        VersionedMapGrid versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(emptyAddressBook, addressBookWithAmy, addressBookWithBob),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithBob,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_multipleAddressBookPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        VersionedMapGrid versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        VersionedMapGrid versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        VersionedMapGrid versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_singleAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        VersionedMapGrid versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        VersionedMapGrid versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        VersionedMapGrid versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        VersionedMapGrid versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_singleAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        VersionedMapGrid versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        VersionedMapGrid versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        VersionedMapGrid versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(addressBookWithBob));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        VersionedMapGrid versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(addressBookWithAmy, addressBookWithBob));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_singleAddressBook_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        VersionedMapGrid versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertThrows(VersionedMapGrid.NoUndoableStateException.class, versionedAddressBook::undo);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        VersionedMapGrid versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertThrows(VersionedMapGrid.NoUndoableStateException.class, versionedAddressBook::undo);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        VersionedMapGrid versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(emptyAddressBook, addressBookWithAmy),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithBob,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        VersionedMapGrid versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(addressBookWithBob));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_singleAddressBook_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        VersionedMapGrid versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertThrows(VersionedMapGrid.NoRedoableStateException.class, versionedAddressBook::redo);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        VersionedMapGrid versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertThrows(VersionedMapGrid.NoRedoableStateException.class, versionedAddressBook::redo);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        VersionedMapGrid versionedAddressBook \u003d prepareAddressBookList(addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        VersionedMapGrid copy \u003d prepareAddressBookList(addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.equals(copy));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.equals(versionedAddressBook));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(null));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(1));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        VersionedMapGrid differentAddressBookList \u003d prepareAddressBookList(addressBookWithBob, addressBookWithCarl);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(differentAddressBookList));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        VersionedMapGrid differentCurrentStatePointer \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code versionedAddressBook} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * states before {@code versionedAddressBook#currentStatePointer} is equal to {@code expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * and states after {@code versionedAddressBook#currentStatePointer} is equal to {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private void assertAddressBookListStatus(VersionedMapGrid versionedAddressBook,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "                                             List\u003cReadOnlyAddressBook\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "                                             ReadOnlyAddressBook expectedCurrentState,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "                                             List\u003cReadOnlyAddressBook\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(new MapGrid(versionedAddressBook), expectedCurrentState);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        while (versionedAddressBook.canUndo()) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.undo();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        for (ReadOnlyAddressBook expectedAddressBook : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            assertEquals(expectedAddressBook, new MapGrid(versionedAddressBook));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.redo();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        for (ReadOnlyAddressBook expectedAddressBook : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.redo();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            assertEquals(expectedAddressBook, new MapGrid(versionedAddressBook));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedAddressBook.undo());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Creates and returns a {@code VersionedMapGrid} with the {@code addressBookStates} added into it, and the"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * {@code VersionedMapGrid#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private VersionedMapGrid prepareAddressBookList(ReadOnlyAddressBook... addressBookStates) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBookStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        VersionedMapGrid versionedAddressBook \u003d new VersionedMapGrid(addressBookStates[0]);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 1; i \u003c addressBookStates.length; i++) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.resetData(addressBookStates[i]);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.commit();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shifts the {@code versionedAddressBook#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedMapGrid versionedAddressBook, int count) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.undo();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 37,
      "-": 261
    }
  },
  {
    "path": "src/test/java/seedu/address/model/battleship/BattleshipTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.model.battleship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.cell.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class BattleshipTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private final Set\u003cTag\u003e emptySet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testDefaultConstructors() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipOne \u003d new Battleship();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipTwo \u003d new Battleship(new Name(\"destroyer\"), new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipThree \u003d new Battleship(new Name(\"destroyer\"), 2, 2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipFour \u003d new Battleship(new Name(\"destroyer\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": "        HashSet\u003cTag\u003e emptySet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipOneShadow \u003d new Battleship(new Name(\"placeholder\"), 2, 2, emptySet);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipTwoShadow \u003d new Battleship(new Name(\"destroyer\"), 2, 2, emptySet);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipThreeShadow \u003d new Battleship(new Name(\"destroyer\"), 2, 2, emptySet);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipFourShadow \u003d new Battleship(new Name(\"destroyer\"), 2, 2, emptySet);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(battleshipOne, battleshipOneShadow);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(battleshipTwo, battleshipTwoShadow);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(battleshipThree, battleshipThreeShadow);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(battleshipFour, battleshipFourShadow);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleship \u003d new Battleship();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(battleship.toString(), \"placeholder\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testHash() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleship \u003d new Battleship();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(battleship.hashCode(), Objects.hash("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iwle"
        },
        "content": "                battleship.getName(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iwle"
        },
        "content": "                battleship.getId(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iwle"
        },
        "content": "                battleship.getLength(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iwle"
        },
        "content": "                battleship.getLife(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iwle"
        },
        "content": "                battleship.getTags()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iwle"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testIsSameBattleship() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // create variables"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipOne \u003d new DestroyerBattleship(emptySet);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipTwo \u003d new DestroyerBattleship(emptySet);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipThree \u003d battleshipOne;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // test equality"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(battleshipOne.isSameBattleship(battleshipTwo));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(battleshipOne.isSameBattleship(battleshipThree));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testDifferentNameDifferentBattleship() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // create variables"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipOne \u003d new DestroyerBattleship(emptySet);;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipTwo \u003d new CruiserBattleship(emptySet);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // test equality"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(battleshipOne.equals(battleshipTwo));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testSameNameDifferentBattleship() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // create variables"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipOne \u003d new DestroyerBattleship(emptySet);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipTwo \u003d new DestroyerBattleship(emptySet);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // test equality"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(battleshipOne.equals(battleshipTwo));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testSameNameSameBattleship() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // create variables"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipOne \u003d new DestroyerBattleship(emptySet);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipTwo \u003d battleshipOne;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // test equality"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(battleshipOne.equals(battleshipTwo));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testBattleshipLength() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // create variables"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipOne \u003d new DestroyerBattleship(emptySet);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(battleshipOne.getLength(), 3);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testBattleshipLife() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // create variables"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipOne \u003d new DestroyerBattleship(emptySet);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(battleshipOne.getLife(), 3);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testBattleshipReduceLife() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // create variables"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipOne \u003d new DestroyerBattleship(emptySet);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int initialLife \u003d battleshipOne.getLife();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iwle"
        },
        "content": "        battleshipOne.reduceLife();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(battleshipOne.getLife(), initialLife - 1);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testBattleshipDestroyed() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // create variables"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipOne \u003d new DestroyerBattleship(emptySet);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int initialLife \u003d battleshipOne.getLife();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iwle"
        },
        "content": "        for (int i \u003d 0; i \u003c initialLife; i++) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iwle"
        },
        "content": "            battleshipOne.reduceLife();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(battleshipOne.isDestroyed(), true);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testAicraftCarrier() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship aircraftCarrier \u003d new AircraftCarrierBattleship(emptySet);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(aircraftCarrier.getLength(), 5);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testDestroyer() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship destroyerBattleship \u003d new DestroyerBattleship(emptySet);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(destroyerBattleship.getLength(), 3);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testCruiser() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship cruiserBattleship \u003d new CruiserBattleship(emptySet);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(cruiserBattleship.getLength(), 2);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 170
    }
  },
  {
    "path": "src/test/java/seedu/address/model/battleship/CoordinatesTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.model.battleship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class CoordinatesTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void isValidCoordinates() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Coordinates.isValidCoordinates(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(Coordinates.isValidCoordinates(\"\")); // empty string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(Coordinates.isValidCoordinates(\" \")); // spaces only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(Coordinates.isValidCoordinates(\"*9\")); // symbols"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(Coordinates.isValidCoordinates(\"z9\")); // out of bounds row"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(Coordinates.isValidCoordinates(\"a0\")); // out of bounds column"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(Coordinates.isValidCoordinates(\"a1\")); // starting coordinate"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(Coordinates.isValidCoordinates(\"e5\")); // in between coordinate"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(Coordinates.isValidCoordinates(\"j9\")); // extreme boundary"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testGetRow() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Coordinates coordinates \u003d new Coordinates(\"b5\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Index correctColIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(coordinates.getColIndex(), correctColIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testGetCol() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Coordinates coordinates \u003d new Coordinates(\"a1\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Index correctColIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(coordinates.getColIndex(), correctColIndex);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 1,
      "iwle": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/model/battleship/OrientationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.model.battleship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class OrientationTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Orientation(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Orientation(invalidAddress));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void isValidOrientation() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Orientation.isValidOrientation(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(Orientation.isValidOrientation(\"\")); // empty string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(Orientation.isValidOrientation(\" \")); // spaces only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(Orientation.isValidOrientation(\"*9\")); // symbols"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(Orientation.isValidOrientation(\"vert\")); // incorrect abbreviation"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(Orientation.isValidOrientation(\"g\")); // incorrect symbol"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(Orientation.isValidOrientation(\"vertical\")); // starting coordinate"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(Orientation.isValidOrientation(\"horizontal\")); // in between coordinate"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(Orientation.isValidOrientation(\"v\")); // extreme boundary"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(Orientation.isValidOrientation(\"h\")); // extreme boundary"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void isHorizontalTest() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(new Orientation(\"h\").isHorizontal());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(new Orientation(\"horizontal\").isHorizontal());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void isVerticalTest() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(new Orientation(\"v\").isVertical());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(new Orientation(\"vertical\").isVertical());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(new Orientation(\"vertical\").toString(), \"vertical\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(new Orientation(\"horizontal\").toString(), \"horizontal\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(new Orientation(\"v\").toString(), \"vertical\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(new Orientation(\"h\").toString(), \"horizontal\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testEquality() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(new Orientation(\"v\"), new Orientation(\"vertical\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertNotEquals(new Orientation(\"v\"), new Orientation(\"horizontal\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/model/cell/AddressTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.model.cell;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 1,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/cell/CellTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.model.cell;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public class CellTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void status() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell cell \u003d new Cell();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(cell.getStatus(), Status.EMPTY);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        cell.receiveAttack();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(cell.getStatus(), Status.EMPTYHIT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell battleShipCell \u003d new Cell();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        battleShipCell.putShip(new Battleship());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(battleShipCell.getStatus(), Status.SHIP);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        battleShipCell.receiveAttack();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(battleShipCell.getStatus(), Status.SHIPHIT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        battleShipCell.receiveAttack();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(battleShipCell.getStatus(), Status.DESTROYED);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void copyConstructor() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell emptyCell \u003d new Cell();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell copyCell \u003d new Cell(emptyCell);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(emptyCell.getBattleship(), copyCell.getBattleship());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell battleShipCell \u003d new Cell();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        battleShipCell.putShip(new Battleship());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        copyCell \u003d new Cell(battleShipCell);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(battleShipCell.getBattleship(), copyCell.getBattleship());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell cell \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        cell.getTags().remove(0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        // different cell -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 42,
      "-": 91
    }
  },
  {
    "path": "src/test/java/seedu/address/model/cell/EmailTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.model.cell;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 1,
      "-": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/model/cell/NameContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.model.cell;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        // different cell -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 2,
      "-": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/model/cell/NameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.model.cell;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 1,
      "iwle": 1,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/cell/PhoneTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.model.cell;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 1,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/cell/UniqueCellListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.model.cell;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public class UniqueCellListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private final Row row \u003d new Row();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        row.contains(null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertFalse(row.contains(ALICE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        row.add(ALICE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertTrue(row.contains(ALICE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        row.add(ALICE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertTrue(row.contains(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        row.add(null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        row.add(ALICE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        row.add(ALICE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        row.setPerson(null, ALICE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        row.setPerson(ALICE, null);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(PersonNotFoundException.class);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        row.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        row.add(ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        row.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Row expectedRow \u003d new Row();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        expectedRow.add(ALICE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(expectedRow, row);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        row.add(ALICE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        row.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Row expectedRow \u003d new Row();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        expectedRow.add(editedAlice);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(expectedRow, row);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        row.add(ALICE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        row.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Row expectedRow \u003d new Row();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        expectedRow.add(BOB);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(expectedRow, row);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        row.add(ALICE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        row.add(BOB);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        row.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        row.remove(null);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(PersonNotFoundException.class);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        row.remove(ALICE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        row.add(ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        row.remove(ALICE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Row expectedRow \u003d new Row();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(expectedRow, row);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        row.setPersons((Row) null);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        row.add(ALICE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Row expectedRow \u003d new Row();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        expectedRow.add(BOB);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        row.setPersons(expectedRow);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(expectedRow, row);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        row.setPersons((List\u003cCell\u003e) null);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        row.add(ALICE);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        List\u003cCell\u003e cellList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        row.setPersons(cellList);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Row expectedRow \u003d new Row();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        expectedRow.add(BOB);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(expectedRow, row);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        row.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 59,
      "-": 120
    }
  },
  {
    "path": "src/test/java/seedu/address/model/player/EnemyTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.model.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class EnemyTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public final Enemy testPlayer \u003d new Enemy();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": "    //Lucy TO-FIX:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /*  @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void constructor_default() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Player newPlayer1 \u003d new Player();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Player newPlayer2 \u003d new Player(\"Player1\", 5);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(newPlayer1, newPlayer2);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "    */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void test_getName() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(\"EnemyPlayer\", testPlayer.getName());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void test_getFleetSize() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(8, testPlayer.getFleetSize());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void test_getFleetContents() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Player newPlayer1 \u003d new Player(\"Bob\", 5, 2, 1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(newPlayer1.getFleetContents(), testPlayer.getFleetContents());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void test_getMapGrid() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Player newPlayer1 \u003d new Player(\"Bob\", 5, 2, 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(newPlayer1.getMapGrid(), testPlayer.getMapGrid());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test public void test_getTargetHistory() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Player newPlayer1 \u003d new Player(\"Bob\", 5, 2, 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(newPlayer1.getTargetHistory(), testPlayer.getTargetHistory());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test public void test_enemyShootAt() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        //stub"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test public void test_prepEnemy() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        //stub"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test public void test_drawPossibleTarget() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        //stub"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test public void test_fillallPossibleTargets() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        //stub"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test public void test_fillallPossiblePopulateCoords() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        //stub"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test public void test_populateEnemyMap() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        //stub"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test public void test_placeAirCraftCarrier () {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        //stub"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test public void test_placeMultipleDestroyerAndCruiser () {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        //stub"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test public void test_generateBattleships () {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        //stub"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test public void test_markAsOccupied () {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        //stub"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test public void test_justifyCoord () {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        //stub"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test public void test_generateOrientation() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        //stub"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 47,
      "lucydotc": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/model/player/FleetTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "package seedu.address.model.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.AircraftCarrierBattleship;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.CruiserBattleship;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.DestroyerBattleship;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Orientation;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "public class FleetTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private final Fleet testFleet \u003d new Fleet();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private final Set\u003cTag\u003e emptySet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public void constructor_default() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        Fleet f \u003d new Fleet();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(8, f.getSize());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public void constructor_customArg() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Fleet f \u003d new Fleet(10, 10, 10);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(30, f.getSize());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            expected \u003d IllegalArgumentException.class"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": "    )"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void constructor_invalidInput_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": "        new Fleet(0, 0, 0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public void testGetSize() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(8, testFleet.getSize());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public void testGetFleetContents() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(new Fleet(5, 2, 1).getDeployedFleet(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iwle"
        },
        "content": "                testFleet.getDeployedFleet());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testGetDestroyerBattleship() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Fleet destroyerOnlyFleet \u003d new Fleet(5, 0, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(destroyerOnlyFleet.getDeployedFleet(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iwle"
        },
        "content": "                testFleet.getListOfDestroyerBattleship());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testGetCruiserBattleship() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Fleet cruiserOnlyFleet \u003d new Fleet(0, 2, 0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(cruiserOnlyFleet.getDeployedFleet(),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iwle"
        },
        "content": "                testFleet.getListOfCruiserBattleship());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testGetAircraftCarrierBattleship() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Fleet aircraftCarrierOnlyFleet \u003d new Fleet(0, 0, 1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(aircraftCarrierOnlyFleet.getDeployedFleet(),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iwle"
        },
        "content": "                testFleet.getListOfAircraftCarrierBattleship());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testConstructorFail() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iwle"
        },
        "content": "            new Fleet(0, 0, 0); });"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testDeployBattleships() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Fleet testFleet \u003d new Fleet(1, 1, 1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Coordinates testCoordinates \u003d new Coordinates(\"a1\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation testOrientation \u003d new Orientation(\"vertical\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iwle"
        },
        "content": "        testFleet.deployOneBattleship(new DestroyerBattleship(emptySet), testCoordinates, testOrientation);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iwle"
        },
        "content": "        testFleet.deployOneBattleship(new CruiserBattleship(emptySet), testCoordinates, testOrientation);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iwle"
        },
        "content": "        testFleet.deployOneBattleship(new AircraftCarrierBattleship(emptySet), testCoordinates, testOrientation);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getNumDestroyer(), 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getNumCruiser(), 0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getNumAircraftCarrier(), 0);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testIsEnoughBattleships() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Fleet testFleet \u003d new Fleet(1, 1, 1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship testDestroyer \u003d new DestroyerBattleship(emptySet);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship testCruiser \u003d new CruiserBattleship(emptySet);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship testAircraftCarrier \u003d new AircraftCarrierBattleship(emptySet);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(testFleet.isEnoughBattleship(testDestroyer, 1));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(testFleet.isEnoughBattleship(testCruiser, 1));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(testFleet.isEnoughBattleship(testAircraftCarrier, 1));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Coordinates testCoordinates \u003d new Coordinates(\"a1\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation testOrientation \u003d new Orientation(\"vertical\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iwle"
        },
        "content": "        testFleet.deployOneBattleship(new DestroyerBattleship(emptySet), testCoordinates, testOrientation);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iwle"
        },
        "content": "        testFleet.deployOneBattleship(new CruiserBattleship(emptySet), testCoordinates, testOrientation);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iwle"
        },
        "content": "        testFleet.deployOneBattleship(new AircraftCarrierBattleship(emptySet), testCoordinates, testOrientation);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(testFleet.isEnoughBattleship(testDestroyer, 1));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(testFleet.isEnoughBattleship(testCruiser, 1));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(testFleet.isEnoughBattleship(testAircraftCarrier, 1));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship testInvalidBattleship \u003d new Battleship();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(testFleet.isEnoughBattleship(testInvalidBattleship, 1));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Fleet testFleet \u003d new Fleet(1, 1, 1);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iwle"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iwle"
        },
        "content": "        builder.append(testFleet.getSize())"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .append(\" Fleet size: \")"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .append(testFleet.getSize())"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .append(\" Fleet contents: \")"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .append(testFleet.getDeployedFleet());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.toString(), builder.toString());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testGetAttributes() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Fleet testFleet \u003d new Fleet(1, 1, 1);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getNumDestroyer(), 1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getNumCruiser(), 1);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getNumAircraftCarrier(), 1);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testResetFleet() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Fleet testFleet \u003d new Fleet(6);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getNumDestroyer(), 1);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getNumCruiser(), 1);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getNumAircraftCarrier(), 1);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship testDestroyer \u003d new DestroyerBattleship(emptySet);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Coordinates testCoordinates \u003d new Coordinates(\"a1\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation testOrientation \u003d new Orientation(\"vertical\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iwle"
        },
        "content": "        testFleet.deployOneBattleship(testDestroyer, testCoordinates, testOrientation);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getDeployedFleet().isEmpty(), false);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iwle"
        },
        "content": "        testFleet.resetFleet(6);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getDeployedFleet().isEmpty(), true);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testAllFleetDestroyed() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Fleet testFleet \u003d new Fleet(6);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getNumDestroyer(), 1);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getNumCruiser(), 1);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getNumAircraftCarrier(), 1);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship testDestroyer \u003d new DestroyerBattleship(emptySet);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Coordinates testCoordinates \u003d new Coordinates(\"a1\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation testOrientation \u003d new Orientation(\"vertical\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iwle"
        },
        "content": "        testFleet.deployOneBattleship(testDestroyer, testCoordinates, testOrientation);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(testFleet.isAllDestroyed());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iwle"
        },
        "content": "        for (Fleet.FleetEntry fleetEntry : testFleet.getDeployedFleet()) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iwle"
        },
        "content": "            for (int i \u003d 0; i \u003c fleetEntry.getBattleship().getLength(); i++) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iwle"
        },
        "content": "                fleetEntry.getBattleship().reduceLife();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(testFleet.isAllDestroyed());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 157,
      "lucydotc": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/model/player/PlayerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "package seedu.address.model.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "public class PlayerTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public final Player testPlayer \u003d new Player(\"Alice\", 5, 2, 1);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    //Lucy TO-FIX:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /*  @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public void constructor_default() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        Player newPlayer1 \u003d new Player();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        Player newPlayer2 \u003d new Player(\"Player1\", 5);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertEquals(newPlayer1, newPlayer2);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        //invalid names"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertFalse(Player.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertFalse(Player.isValidName(\"Ab\")); // under min 3 chars"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertFalse(Player.isValidName(\"AbCdEfGhIjklmnoPqrst\")); // over max 16 chars"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertFalse(Player.isValidName(\"John Doe\")); // contains whitespace"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertFalse(Player.isValidName(\"John!@#$\")); // Contains invalid characters !#$%\u0026\u0027*+/\u003d?`{|}~^.-"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertFalse(Player.isValidName(\"Enemy\")); // Contains saved name \"Enemy\" for computer enemy player."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        //valid names"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertTrue(Player.isValidName(\"123AbCde123\")); //Allows upper and lower case alphanumerical chars"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertTrue(Player.isValidName(\"bob\")); //satisfies min 3 char required"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertTrue(Player.isValidName(\"AbCdEfGhIjklmnoP\")); //at max 16 char limit"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public void test_getName() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertEquals(\"Alice\", testPlayer.getName());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public void test_getFleetSize() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(8, testPlayer.getFleetSize());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public void test_getFleetContents() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Player newPlayer1 \u003d new Player(\"Bob\", 5, 2, 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertEquals(newPlayer1.getFleetContents(), testPlayer.getFleetContents());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public void test_getMapGrid() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Player newPlayer1 \u003d new Player(\"Bob\", 5, 2, 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertEquals(newPlayer1.getMapGrid(), testPlayer.getMapGrid());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test public void test_getTargetHistory() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Player newPlayer1 \u003d new Player(\"Bob\", 5, 2, 1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertEquals(newPlayer1.getTargetHistory(), testPlayer.getTargetHistory());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 5,
      "lucydotc": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedCellTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public class JsonAdaptedCellTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 4,
      "iwle": 1,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonMapGridStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.MapGrid;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public class JsonMapGridStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonMapGridStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"notJsonFormatAddressBook.json\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"invalidAndValidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        MapGrid original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(original, new MapGrid(readBack));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(original, new MapGrid(readBack));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(original, new MapGrid(readBack));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Backups {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private void backupAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                    .backupAddressBook(addressBook);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            throw new AssertionError("
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                    \"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        saveAddressBook(new MapGrid(), null);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void backupAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        backupAddressBook(new MapGrid(), null);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void backupAddressBook_success() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        backupAddressBook(new MapGrid(), filePath.toString());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 10,
      "s-tr": 22,
      "-": 117
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableMapGridTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.MapGrid;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public class JsonSerializableMapGridTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableMapGridTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        MapGrid mapGridFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        MapGrid typicalPersonsMapGrid \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(mapGridFromFile, typicalPersonsMapGrid);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 9,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.MapGrid;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonMapGridStorageTest} class."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        MapGrid original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(original, new MapGrid(retrieved));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void addressBookBackup() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "s-tr"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "s-tr"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonMapGridStorageTest} class."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "s-tr"
        },
        "content": "         */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            MapGrid original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            storageManager.backupAddressBook(original);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            fail(\"Storage manager failed to backup file\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 6,
      "s-tr": 15,
      "-": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.MapGrid;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Cell;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " *     {@code MapGrid ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private MapGrid mapGrid;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        mapGrid \u003d new MapGrid();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public AddressBookBuilder(MapGrid mapGrid) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        this.mapGrid \u003d mapGrid;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Adds a new {@code Cell} to the {@code MapGrid} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public AddressBookBuilder withPerson(Cell cell) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        mapGrid.addPerson(cell);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public MapGrid build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return mapGrid;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 12,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Cell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code cell}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public EditPersonDescriptorBuilder(Cell cell) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        descriptor.setName(cell.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        descriptor.setPhone(cell.getPhone());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        descriptor.setEmail(cell.getEmail());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        descriptor.setAddress(cell.getAddress());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        descriptor.setTags(cell.getTags());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 11,
      "iwle": 1,
      "-": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/InterceptedEnemy.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "s-tr"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.cell.Status;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Enemy;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * Stub for the Enemy class, to aid in testing BeginCommand and EndTurnCommand."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": "public class InterceptedEnemy extends Enemy {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private boolean isPrepCalled;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private boolean isReceiveStatusCalled;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private boolean isEnemyShootAtCalled;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public InterceptedEnemy() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        isPrepCalled \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        isReceiveStatusCalled \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Interceptor for prepEnemy()."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void prepEnemy() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        isPrepCalled \u003d true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        super.prepEnemy();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Interceptor for enemyShootAt()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public Coordinates enemyShootAt() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        isEnemyShootAtCalled \u003d true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return super.enemyShootAt();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Interceptor for receiveStatus()."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void receiveStatus(Status s) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        isReceiveStatusCalled \u003d true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        super.receiveStatus(s);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public boolean isPrepCalled() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return isPrepCalled;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public boolean isReceiveStatusCalled() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return isReceiveStatusCalled;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public boolean isEnemyShootAtCalled() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return isEnemyShootAtCalled;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "s-tr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Address;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Cell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * A utility class to help with building Cell objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code cellToCopy}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public PersonBuilder(Cell cellToCopy) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        name \u003d cellToCopy.getName();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        phone \u003d cellToCopy.getPhone();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        email \u003d cellToCopy.getEmail();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        address \u003d cellToCopy.getAddress();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(cellToCopy.getTags());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Sets the {@code Name} of the {@code Cell} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Cell} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Sets the {@code Address} of the {@code Cell} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Sets the {@code Phone} of the {@code Cell} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Sets the {@code Email} of the {@code Cell} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public Cell build() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return new Cell(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 19,
      "iwle": 1,
      "-": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Cell;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * A utility class for Cell."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns an add command string for adding the {@code cell}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static String getAddCommand(Cell cell) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(cell);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns the part of command string for the given {@code cell}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static String getPersonDetails(Cell cell) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        sb.append(PREFIX_NAME + cell.getName().fullName + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        sb.append(PREFIX_PHONE + cell.getPhone().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        sb.append(PREFIX_EMAIL + cell.getEmail().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        sb.append(PREFIX_ADDRESS + cell.getAddress().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        cell.getTags().stream().forEach("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 12,
      "-": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/SizeTenMapGrid.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.MapGrid;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Cell;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Player;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * A utility class that returns an empty size 10 grid"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public class SizeTenMapGrid {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private static final int SIZE_TEN \u003d 10;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private static Cell[][] getSizeTenCellGrid() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell[][] cellGrid \u003d new Cell[SIZE_TEN][SIZE_TEN];"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        char row \u003d \u0027a\u0027;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        for (int i \u003d 0; i \u003c SIZE_TEN; i++) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            for (int j \u003d 0; j \u003c SIZE_TEN; j++) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                cellGrid[i][j] \u003d new Cell(new Coordinates(String.format(\"%c%d\", row + i, j + 1)));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return cellGrid;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Returns a size ten map"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static MapGrid getSizeTenMapGrid() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Cell[][] cellGrid \u003d getSizeTenCellGrid();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        MapGrid newMap \u003d new MapGrid();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        newMap.initialise(cellGrid);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return newMap;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Initialises a Player with a size 10 map grid."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static void initialisePlayerSizeTen(Player player) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Cell[][] cellGrid \u003d getSizeTenCellGrid();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        player.getMapGrid().initialise(cellGrid);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 25,
      "s-tr": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Cell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns the middle index of the cell in the {@code model}\u0027s cell list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns the last index of the cell in the {@code model}\u0027s cell list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns the cell in the {@code model}\u0027s cell list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static Cell getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 5,
      "-": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final int MAP_SIZE_TEN \u003d 10;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final Coordinates COORDINATES_A1 \u003d new Coordinates(\"a1\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final Coordinates COORDINATES_A2 \u003d new Coordinates(\"a2\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final Coordinates COORDINATES_A10 \u003d new Coordinates(\"a10\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final Coordinates COORDINATES_B1 \u003d new Coordinates(\"b1\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final Coordinates COORDINATES_J1 \u003d new Coordinates(\"j1\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final Coordinates COORDINATES_LAST_CELL \u003d new Coordinates(\"j10\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final Coordinates INVALID_COORDINATE \u003d new Coordinates(99, 99);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 10,
      "s-tr": 2,
      "-": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.MapGrid;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Cell;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * A utility class containing a list of {@code Cell} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static final Cell ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static final Cell BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static final Cell CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static final Cell DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static final Cell ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static final Cell FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static final Cell GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static final Cell HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static final Cell IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    // Manually added - Cell\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static final Cell AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static final Cell BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns an {@code MapGrid} with all the typical persons."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static MapGrid getTypicalAddressBook() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        MapGrid ab \u003d new MapGrid();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        for (Cell cell : getTypicalPersons()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            ab.addPerson(cell);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Returns an {@code MapGrid} that is empty."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static MapGrid getEmptyMapGrid() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iwle"
        },
        "content": "        MapGrid ab \u003d new MapGrid();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static List\u003cCell\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 21,
      "iwle": 8,
      "-": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/BrowserPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Cell;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private SimpleObjectProperty\u003cCell\u003e selectedPerson \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanelHandle browserPanelHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel(selectedPerson));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(browserPanel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // default web page"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BrowserPanel.DEFAULT_PAGE, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        // associated web page of a cell"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e selectedPerson.set(ALICE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedPersonUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + ALICE.getName().fullName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(browserPanelHandle);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPersonUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 3,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CellCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Cell;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public class CellCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell cellWithNoTags \u003d new PersonBuilder().withTags(new String[0]).build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        PersonCard personCard \u003d new PersonCard(cellWithNoTags, 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        uiPartRule.setUiPart(personCard);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertCardDisplay(personCard, cellWithNoTags, 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell cellWithTags \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        personCard \u003d new PersonCard(cellWithTags, 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        uiPartRule.setUiPart(personCard);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertCardDisplay(personCard, cellWithTags, 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell cell \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        PersonCard personCard \u003d new PersonCard(cell, 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        // same cell, same index -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        PersonCard copy \u003d new PersonCard(cell, 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertTrue(personCard.equals(copy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertTrue(personCard.equals(personCard));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertFalse(personCard.equals(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertFalse(personCard.equals(0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        // different cell, same index -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell differentCell \u003d new PersonBuilder().withName(\"differentName\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertFalse(personCard.equals(new PersonCard(differentCell, 0)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        // same cell, different index -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertFalse(personCard.equals(new PersonCard(cell, 1)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Asserts that {@code personCard} displays the details of {@code expectedCell} correctly and matches"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private void assertCardDisplay(PersonCard personCard, Cell expectedCell, int expectedId) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        PersonCardHandle personCardHandle \u003d new PersonCardHandle(personCard.getRoot());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", personCardHandle.getId());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        // verify cell details are displayed correctly"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertCardDisplaysPerson(expectedCell, personCardHandle);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CommandBoxTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBoxTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ArrayList\u003cString\u003e history \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandBoxHandle commandBoxHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(commandText -\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandText.equals(COMMAND_THAT_SUCCEEDS)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                return new CommandResult(\"Command successful\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(\"Command failed\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }, history);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(commandBox);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithSuccessfulCommand() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithFailedCommand() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify that style is changed correctly even after multiple consecutive failed commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_handleKeyPress() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.A);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithUp() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands (latest command is failure)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, thirdCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithDown() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that fails, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text remains \u003cbr\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForFailedCommand() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that succeeds, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text is cleared \u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForSuccessfulCommand() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //        guiRobot.push(keycode);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //        assertEquals(expectedCommand, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bos10": 2,
      "-": 157
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/GuiUnitTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.UiPartRule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * A GUI unit test class for MapGrid."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class GuiUnitTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final UiPartRule uiPartRule \u003d new UiPartRule();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector of the node to retrieve."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 1,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.MapGrid;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STUB_SAVE_LOCATION \u003d Paths.get(\"Stub\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path RELATIVE_PATH \u003d Paths.get(\".\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private final MapGrid mapGrid \u003d new MapGrid();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setUpBeforeClass() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bos10"
        },
        "content": "    // EDIT FOR TESTING"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void tearDownAfterClass() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bos10"
        },
        "content": "    // EDIT FOR TESTING"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bos10"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // after address book is updated"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //guiRobot.interact(() -\u003e mapGrid.addPerson(ALICE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertStatusBarContent();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * sync status matches that of {@code expectedSyncStatus}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private void assertStatusBarContent() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bos10"
        },
        "content": "        StatusBarFooter statusBarFooter1 \u003d new StatusBarFooter();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bos10"
        },
        "content": "        StatusBarFooter statusBarFooter2 \u003d new StatusBarFooter();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bos10"
        },
        "content": "        // create 2 status bar and compare the timing"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(statusBarFooter1.getElapsedTime(System.nanoTime()),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bos10"
        },
        "content": "                   statusBarFooter2.getElapsedTime(System.nanoTime()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 2,
      "bos10": 13,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Cell;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedCell}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static void assertCardDisplaysPerson(Cell expectedCell, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(expectedCell.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(expectedCell.getPhone().value, actualCard.getPhone());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(expectedCell.getEmail().value, actualCard.getEmail());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(expectedCell.getAddress().value, actualCard.getAddress());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(expectedCell.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                actualCard.getTags());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code cells} correctly and"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Cell... cells) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        for (int i \u003d 0; i \u003c cells.length; i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            personListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            assertCardDisplaysPerson(cells[i], personListPanelHandle.getPersonCardHandle(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code cells} correctly and"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cCell\u003e cells) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertListMatching(personListPanelHandle, cells.toArray(new Cell[0]));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        int numberOfPeople \u003d personListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 15,
      "-": 59
    }
  }
]
