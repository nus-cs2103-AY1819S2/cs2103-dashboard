[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charnixon"
        },
        "content": "\u003d Recruit Me"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "https://travis-ci.org/cs2103-ay1819s2-w16-4[image:https://travis-ci.org/cs2103-ay1819s2-w16-4/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "https://ci.appveyor.com/project/damithc/addressbook-level4[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "https://coveralls.io/github/se-edu/addressbook-level4?branch\u003dmaster[image:https://coveralls.io/repos/github/se-edu/addressbook-level4/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "https://www.codacy.com/app/damith/addressbook-level4?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/addressbook-level4\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/UI.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/UI.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "This application is a Java Desktop GUI application that is specifically designed for a recruiting agency for their processes about the candidates in their storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "- **Some aspects about the application itself**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* Although it is a GUI application, all the commands are taken through CLI (Command Line Interface). You can learn how to use it by reading User Guide Document linked below."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* This application requires Java 9 for a proper working experience."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "- **A summary of what can be done through this application**:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* A new candidate can be added to the storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* Candidates can be deleted"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* Candidates can be edited according to their aspects"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* Candidates can be filtered according to their every different aspect"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* Candidates can be sorted according to their features"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* Candidates can be listed and selected"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* The processes made can be undone and redone"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* A specific search according to the candidate name can be done"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* All the candidate storage can be cleared."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "- **In Version 2.0 (expected)**:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* CVs of the candidates can be shown in the right window block when they are clicked"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "- **In Version 1.4 (expected)**:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* Integration tests will be made for filtering, also some additions and improvements in unit tests will take place"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "- **In Version 1.3**:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "** Unit tests for filtering processes are written."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "** Additional sorting functionality by name, last name, gpa, education, and skills"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "** Endorse Command written and tested."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "- **In Version 1.2**:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* Tag search function with keyword tag. Creating color coordination for each category in UI."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* Filtering system will be improved and filtering for multiple entries will be added. Filtering is also made compatible with other commands."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* Implement method into application ensuring it is callable through the keyword sort. The sort feature should also be able to account for new parameters (e.g. Birthday, Education level etc.) as the client requires."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "charnixon"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "- **In Version 1.1**:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* Refactoring of Tag Class"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* Basic implementation of filtering system is added to the application, that filters the contacts according to one of their properties."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* Parameters for each contact to include valuable information for clients in their profile: Education, Grade point average."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* A general method for sorting a data set with the structure used in."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "- **In Version 1.0**:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* The base of the application is uploaded to the Github organization page."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* \u003c\u003cLearningOutcomes#, Applied Techniques in the Application\u003e\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 39,
      "charnixon": 2,
      "-": 36
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "Recruit Me was developed by the https://github.com/orgs/cs2103-ay1819s2-w16-4/teams[ay1819s2-w16-4 ] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "It is an adaptation of the AddressBook-level4 application developed by the https://se-edu.github.io/docs/Team.html[se-edu] team. +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "_{The portfolios are incomplete and are to be updated throughout the project}_ +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "We are a student team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "\u003d\u003d\u003d Charlotte Nixon"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "image::charnixon.jpg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "{empty} [https://github.com/charnixon[github]] [\u003c\u003ccharlottenixon#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "Responsibilities: Administration"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "\u003d\u003d\u003d Abby Williams"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "image::abwilli.jpg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "{empty}[http://github.com/abwilli[github]] [\u003c\u003cabbywilliams#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "Responsibilities: Tester"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "\u003d\u003d\u003d Barış Batuhan Topal"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "image::barisbatuhan.jpg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "{empty}[http://github.com/barisbatuhan[github]] [\u003c\u003cbarisbatuhan#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "Responsibilities: Quality Control"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "\u003d\u003d\u003d Daniel Greenhouse"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "image::dmgreenhouse.jpg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "{empty}[http://github.com/dmgreenhouse[github]] [\u003c\u003cdanielgreenhouse#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "Responsibilities: End User Experience"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "-": 28,
      "DMGreenhouse": 21
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Recruit Me - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "By: `RecruitMe`      Since: `January 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* (revision `1.9.4` or later)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Only JDK 9 is supported. +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "This app will not work with later major JDK releases such as JDK 10, 11, etc."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "// tag::filter[]"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "\u003d\u003d\u003d Filter or/and/clear feature"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "image::filterDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ".Sequence Diagram of the Filtering Command"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "Filtering mechanism is facilitated by `AddressBook`."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "In the AddressBook class, we have added a new `UniquePersonsList` parameter called `allPersonsStorage` and this parameter stores also the persons in the application."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "When the filtering method is used, the `persons` parameter in the class is updated according to the filtering criterion (the persons that are not matching the conditions are removed)"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "but the list in the new parameter `allPersonsStorage` are not changed. At the end, when the filtering is cleared, the `persons` parameter is updated with the information in `allPersonsStorage`."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "If user exits the program when filtering is active, in the `stop` method of `MainApp` class, a new method is called that clears the filtering and saves all the persons to the `JSON` file, rather than filtered contacts."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "In filtering system, important processes are as follows:"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* `filter or [CRITERION]` -- Filters the persons and includes the ones that has at least one match from the criterion."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "Every single one of the persons in the `persons` parameter is traversed."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "There is a flag that returns true for each person, if a criteria matches. For each criteria,"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "the persons are investigated with contains method in a case insensitive manner. With case insensitivity,"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "if one of the criterion is `Ale` for the name parameter, every person that contains `Ale` in their names are"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "selected."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* `filter and [CRITERION]` -- Filters the persons and removes the ones that does not match even one of the criterion."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "Every single one of the persons in the `persons` parameter is traversed."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "There is a flag that returns false for each person, if a criteria does not match. For each criteria,"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "the persons are investigated with contains method in a case insensitive manner. With case insensitivity,"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "if one of the criterion is `Ale` for the name parameter, every person that contains `Ale` in their names are"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "passed successfully from the name criteria."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* `filter clear` -- Clears all the filtering that are active in current case"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "As explained in the beginning part of the filtering method, the filter is cleared with restoring all the persons"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "who are not in `persons` parameter but included in `allPersonsStorage` parameter"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "\u003d\u003d\u003d\u003d Working Principle of `FilterCommandParser` Class"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "Filtering command is taken from the user as follows:"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* `filter or/and [n/NAME/n] [p/PHONE/p] [e/EMAIL/e] [g/GPA/g] [d/EDUCATION/d] [a/ADDRESS/a] [skill/ SKILL1, SKILL2, …​ /skill] [position/ POSITION1, POSITION2, ... /position]`"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* `filter clear`"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "To process the input from user, these steps are followed in the code:"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* first the input is cleared from multiple spaces or any unwanted additional forms."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* after that according to the first couple of the characters, the exact process is determined (If it is `add` or `or` or `clear`)"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* if it is clear, the FilterCommand function is called fo that method. If it is not, followings take place."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* following that, the prefixes are searched. 5 flags are stored in `String` form for 5 different filtering conditions and"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "if the prefix itself exists and the reverse version also exist and the prefix itself is before the reverse one the flag is turned"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "to `available`"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* for the available parameters, the input is trimmed and separated from the prefixes. If the parameters does not match with the validity of the given type of the criteria,"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "a message is printed to the screen and no action is made."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* FilterCommand function is called. In the parameters passed to the function, the process type, criterion flags and criterion contexts are included."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "\u003d\u003d\u003d\u003d Alternative Approaches"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "In this title, both Command implementation and Parser implementation will be discussed in 2 parts:"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Command Implementation"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "Instead of adding another parameter in `AddressBook` called `allPersonsStorage`, another approach would be letting `persons` parameter to hold"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "all the unfiltered information and updating `filteredPersons` parameter in the `ModelManager` class. However, in order to implement that approach"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "we had to update the list in every time user uses filtering with a `Predicate` approach. Because, `FilteredList` class (the type of the `filteredPersons`"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "parameter) uses these in very crucial parts of its implementation."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* **Pros of this approach:**"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "** Does not need any additional parameter to be created in AddressBook class."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "** Decreases the number of changes made in each list changing method of the AddressBook class. Because, if any additional"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "parameter is added to AddressBook class, all the functions have to be changed considering the new parameter."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* **Cons of this approach:**"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "** It is hard and time consuming to implement this approach. Actually that\u0027s why we did not choose that approach."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "** It may require some changes in the `Model` class."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Parser Implementation"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "Instead of putting the criterion contents between both prefixes and reverse prefixes, like the addition process we"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "could only add the content after the prefix (without any reverse prefix usage)."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* **Pros of this approach:**"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "** User would need to write less number of characters"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* **Cons of this approach:**"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "** Using also reverse prefix makes the job much easier, because it simply marks also the end of the content."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "** In currently implemented version, no order of the criterion is necessary. So, first phone number and then name etc. can be added for filtering condition."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "However in the alternative approach, implementing the input taking with no order is harder."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "\u003d\u003d\u003d\u003d Combining the Command With Other Commands"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "Since a new parameter is added to the `AddressBook` class, some changes should have done to adjust the existing processes to"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "be used at the same time with filtering commands."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Undo/Redo Command"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* To save the filtering information at each step, a new list is created to hold the filtering information at current stage (active or not)"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "whenever the current AddressBook is pushed to the list."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* `resetData` method is modified in order to reset the `allPersonsStorage` parameter if needed."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Add, Edit and Delete Commands"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* `commit` method is modified for transferring the filtering information to the stage after committing is made and also the filtering information is pushed to the list here"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* `delete` and `edit` processes are working without clearing the filter."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* `add` method clears the filter when a new person is added. Because, all the previous filtering are not saved in anywhere, so we cannot control if the newly added person matches"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "with the filtering criterion. Thus, all the filtering is cleared."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Other Commands"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "These are the ones that requires almost no changes or only small amount of changes to be compatible with filtering."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "\u003d\u003d\u003d\u003d Testing of Filter Command Design"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "The testing methods for filtering is written for 3 different parts:"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d FilterCommandParserTests"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "Currently implemented test cases are below:"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* for missing parts of the input by the user, a test method runs. This method covers the situations where process type or field parameter or both are missing."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* second test method includes the cases where the prefix itself and the reverse prefix does not match with each other."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "For future release test cases:"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* Division of the unordered input for different criterion will be tested"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d FilterCommandTests"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "This test class is prepared for unit testing of Filtering Command. Currently implemented test cases are below:"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* executing filtering with only 1 condition"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* executing filtering with multiple conditions"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* executing filtering with all the criterion are given"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* clearing the filtering when one filter is active"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* clearing the filtering when multiple filters are active"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d FilterCommandIntegrationTests"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "This test class contains integration tests (interaction with the Model, UndoCommand, RedoCommand, AddCommand, DeleteCommand, SortCommand) for FilterCommand."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "Currently, no test cases are prepared but next release these test methods will be implemented:"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* executing sorting after filtering once"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* executing sorting after filtering twice"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* executing undo and redo after filtering once"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* executing undo and redo after filtering twice"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* executing undo after filtering is cleared"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* executing delete after filtering once"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* executing delete after filtering twice"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* executing add after filtering once"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* executing add after filtering twice"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* a complex case of different processes combined: The flow will be as follows for the next test:"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "** 1- filter and"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "** 2- filter or"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "** 3- sort alphabetical"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "** 4- delete 1"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "** 5- undo"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "** 6- undo"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "** 7- redo"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "** 8- filter clear"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "** 9- undo"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "** 10- add ..."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "** 11- filter clear"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "** 12-undo"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "** 13- filter clear"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "// end::filter[]"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "// tag::sort[]"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "\u003d\u003d\u003d Sort Commands"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "There are currently five main sorting methods present: `name`, `surname`, `gpa`, `education`, `skills`."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "There is also a complimentary `reverse` sort method for each main sorting method."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "* **name** is called by the user through the following cli input: `sort name`. +"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "It takes the _current_ list displayed in the left hand GUI panel and sorts them by name alphabetically. The name sort begins with the first name and then proceeds to last name."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "* **surname** is called by the user through the following cli input: `sort surname`. +"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "It takes the _current_ list displayed in the left hand GUI panel and sorts them by surname alphabetically."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "* **gpa** is called by the user through the following cli input: `sort gpa`. +"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "It takes the _current_ list displayed in the left hand GUI panel and sorts them by gpa in increasing numeric order."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "* **education** is called by the user through the following cli input: `sort education`. +"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "It takes the _current_ list displayed in the left hand GUI panel and sorts them by education alphabetically."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "* **skills** is called by the user through the following cli input: `sort skills`. +"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "It takes the _current_ list displayed in the left hand GUI panel and first orders the skill tags for each person alphabetically. The method then proceeds to sort all persons based on their skill tags, in alphabetical order."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "* **positions** is called by the user through the following cli input: `sort positions`. +"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "It takes the _current_ list displayed in the left hand GUI panel and first orders the position tags for each person alphabetically. The method then proceeds to sort all persons based on their position tags, in alphabetical order."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "* **endorsements** is called by the user through the following cli input: `sort endorsements`. +"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "It takes the _current_ list displayed in the left hand GUI panel and first orders the endorsements for each person alphabetically. The method then proceeds to sort all persons based on their endorsements, in alphabetical order."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "* **skill number** is called by the user through the following cli input: `sort skill number`. +"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "It takes the _current_ list displayed in the left hand GUI panel and orders the persons based on their number of skills in descending order."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "* **position number** is called by the user through the following cli input: `sort position number`. +"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "It takes the _current_ list displayed in the left hand GUI panel and orders the persons based on their number of positions in descending order."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "* **endorsement number** is called by the user through the following cli input: `sort endorsement number`. +"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "It takes the _current_ list displayed in the left hand GUI panel and orders the persons based on their number of endorsements in descending order."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "* **reverse** can be applied before the sort keyword (e.g. `name`) through the following cli input: `sort reverse name`"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "_(the **current** list means that if filter is on, only those filtered persons shall be sorted and the filter shall remain on)_"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation Rational"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "Despite the risk of slightly increasing the coupling, the aim was to use methods already written and rely on good cohesion."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "For example, once a sort command has correctly written the correctly ordered persons to a `List\u003cPerson\u003e`, rather than duplicating large amounts of code by modifying the already listed persons in the GUI, it shall simply remove the persons in that addressbook version and then immediately re-add them in the correct order."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "It is of note that the temporary deletion of persons from the addressbook should be foolproof and there should be no way that the sort command ever permanently deletes the addressbook. Furthermore, ensuring the command works with the already implemented undo/redo command should ensure the user still has full control over all the persons in the contact book."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "\u003d\u003d\u003d\u003d Approaches Considered"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "When writing sort commands, there were two approaches considered: modify the indices of all persons and then refresh the left-hand GUI panel with this new list; or temporarily delete the list of persons and then add a new list of correctly ordered persons."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "Elements of lists in Java are ordered by when they were added. Sorting is possible using _Collections_, however this requires them to be strings. Since the Recruit Me application contains lists of various types, typically _Person_, there is no immediate compatibility with _Collections_. Furthermore it was suspected that to simply modify the indices of persons, a lot of duplicate code would be need to be written since this aspect of addressbook-level4 was not easily modifiable. Because of this the second method was opted for."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a New Sort Command"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "To add a new sort command, the following classes should be altered accordingly:"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "* `cliSyntax` - add the necessary new SortWord (and the reverse option)"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "* `SortCommandParser` - add the new SortWord as an accepted input"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "* `SortCommand` - add the call to the new `SortNewMethod` class when the new SortWord is inputted"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "* `SortNewMethod` - a new class, following the example of `SortName`, that will return a list of Persons correctly ordered according to the new method"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "* `SortUtil` - a place for lower-level processes required by the new sort method and called from `SortNewMethod`"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "It is also sometimes of use to alter `Person` should the new method demand access of a certain element of `Person` that may be useful for other classes in the future."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "The developer should also add the necessary testing methods in `SortCommandTest`"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "(TODO: INSERT CLASS DIAGRAM FOR v1.4)"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "(TODO: INSERT SEQUENCE DIAGRAM FOR v1.4)"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "// end::sort[]"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Endorse Command"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "// tag::logging[]"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "// end::logging[]"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "// tag::configuration[]"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "// end::configuration[]"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "charnixon"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "charnixon"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "[[Implementation-Sort Commands]]"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "\u003d\u003d\u003d Sort Commands"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "When writing sort commands, there were two approaches considered: modify the indices of all persons and then refresh the left-hand GUI panel with this new list; or temporarily delete the list of persons and then add a new list of correctly ordered persons."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "Elements of lists in Java are ordered by when they were added. Sorting is possible using Collections, however this requires them to be strings. Since the Recruit Me application contains lists of various types, typically Person, there is no immediate compatibility with Collections. Furthermore it was suspected that to simply modify the indices of persons, a lot of duplicate code would be need to be written since this aspect of addressbooklevel4 was not easily modifiable. Because of this the second method was opted for."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "Despite the risk of slightly increasing the coupling, the aim was to use methods already written and rely on good cohesion. For example, once a sort command has correctly written the correctly ordered persons to a `List\u003cPerson\u003e`, rather than duplicating large amounts of code by modifying the already listed persons, it shall use the already written delete person and add person commands."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "It is of note that the temporary deletion of persons from the addressbook should be foolproof and there should be no way that the sort command ever permenantly deltes the addressbook. Furthermore, ensuring the command works with the already implemented undo/redo command should ensure the user still has full control over all the persons in the contact book."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "To add a new sort command, the following should be taken into account... (INSERT CLASS DIAGRAM)"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "Two sorting methods are currently present: `alphabetical` and `skills`..."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "charnixon"
        },
        "content": "// end::logging]"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "charnixon"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "charnixon"
        },
        "content": "\u003d\u003d\u003d Education and GPA"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "charnixon"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "charnixon"
        },
        "content": "New parameters for perspective employees to add to their information. Employers are able to look at this information to determine if the person is suitable for the position at the company. Education and GPA can be use to filer or sort the perspective employees."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "charnixon"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "charnixon"
        },
        "content": "*Education*"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "charnixon"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "charnixon"
        },
        "content": "New parameter to specify the level of schooling achieved by the perspective employee."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "charnixon"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "charnixon"
        },
        "content": "*GPA*"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "charnixon"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "charnixon"
        },
        "content": "New parameter for the grade point average achieved by the perspective employee."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "charnixon"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "NOT COMPLETE."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": ". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/JsonAddressBookStorage.java[`JsonAddressBookStorage`] class."
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for a person specified in the `INDEX`. +"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for the first person to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "Removes the remark for the first person."
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `data/addressbook.json` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `JsonAdaptedPerson` class"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/JsonAdaptedPerson.java[`JsonAdaptedPerson`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new JSON field for `Remark`."
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": ". Fix `invalidAndValidPersonAddressBook.json`, `typicalPersonsAddressBook.json`, `validAddressBook.json` etc., such that the JSON tests will not fail due to a missing `remark` field."
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": ". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope - Target user profile"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": "*General Needs*:"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": "*Special Needs*:"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": "* this is an application for recruitment agency specifically"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": "* the commands (filtering, sorting, deleting, adding etc.) and tags (education, experience etc.) are designed for applicants"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": "*Value proposition*: manage contacts faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |add a new person |"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |delete a person |remove entries that I no longer need"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |find a person by name |locate details of persons without having to go through the entire list"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user with many persons in the address book |sort persons by name |locate a person easily"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "|`* *` |user with many persons in the address book |filter persons by any of the multiple properties at the same time |see which persons are fit into the criterion"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "|`* *` |user with many persons in the address book |use all the other operations when filtering is active |locate the searched persons more easily"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "|`* *` |user with many persons in the address book |disable the active filtering |see all the list when the job is done"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user with many persons in the address book |undo the operation what he/she just did |prevent false updates in the address book"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user with many persons in the address book |redo the operation what he/she just did |prevent false undo operations in the address book"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user with many persons in the address book |see the education level, technical skills and experience of the persons |choose persons regarding more information given."
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": "(For all use cases below, the *System* is the `AddressBook` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Delete person"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": "2.  AddressBook shows a list of persons"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": "3.  User requests to delete a specific person in the list"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": "4.  AddressBook deletes the person"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Add person"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to add a new person with entering information about the new person"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": "2.  AddressBook adds the person"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The given information format is invalid"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": "** 2a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": "* 2b. All the necessary information is not given."
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": "** 2b1. AddressBook shows an error message."
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Filter person with and"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to filter address book with entering conditions to filter"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": "2.  AddressBook filters the persons that passes with all the conditions and prints those."
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The given information format is invalid"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": "** 2a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Filter person with or"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to filter address book with entering conditions to filter"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": "2.  AddressBook filters the persons that passes with at least one of the conditions and prints those."
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The given information format is invalid"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": "** 2a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Filter clearing"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to clear all the filtering in the address book."
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": "2.  Filtering is cleared and all the people in the book is printed."
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Sort address book by name"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to sort address book by name"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": "2.  The address book is printed in a sorted order with respect to the names."
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` (revision `1.9.4` or higher) installed."
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 170,
      "charnixon": 16,
      "-": 1055,
      "DMGreenhouse": 91
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Recruit Me - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/cs2103-ay1819s2-w16-4/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "By: `RecruitMe`      Since: `January 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Recruit Me is an application for keeping all your company\u0027s applicants in a concise and organized format for easy searching designed to help you find the best candidates."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `9` (revision `9.01` or later) installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Only Java 9 is supported. +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Address Book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ".  Download the latest `addressbook.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "image::UI.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* *`list`* : lists all contacts"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the Address Book."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* **`delete`**`3` : deletes the 3rd contact shown in the current list"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [skill/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[skill/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `skill/Java`, `skill/Excel skill/leadership` etc."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Adding a person: `add`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a candidate to Recruit Me +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "Format: `add n/NAME p/PHONE_NUMBER e/EMAIL  d/EDUCATION g/GPA a/ADDRESS [skill/TAG]... [position/TAG]...`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "****"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* Name can have any character from English alphabet and also it can have `space`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* Phone Number has to be in 8 digits"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* Email should be in the format of `[ANY NUMBER OF ASCII CHARACTERS MORE THAN 0]@[EXTENSION1].[EXTENSION2]`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* Education can take character from English alphabet and also it can have `space`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* GPA can take any float value between 0.0 and 4.0"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* A candidate can have any number of skill/position tags (including 0)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "****"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* `add n/John Doe p/98765432 e/johnd@example.com d/NUS g/3.4 a/John street, block 123, #01-01`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* `add n/Betsy Crowe skill/statistics e/betsycrowe@example.com d/NTU g/2.4 a/Newgate Prison p/1234567 skill/Java position/UIDeveloper`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing all persons : `list`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "Shows a list of all candidates in Recruit Me. If there is a filtering available, it lists all the persons that passes all the filtering conditions. +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing a person : `edit`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "Edits an existing candidate in Recruit Me. +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "abwilli"
        },
        "content": "Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [skill/TAG]... [position/TAG]...`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "abwilli"
        },
        "content": "* When editing tags, the existing tags of the person will be removed(i.e adding of tags is not cumulative) except for"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "abwilli"
        },
        "content": "existing endorsement tags."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "abwilli"
        },
        "content": "* You can remove all the person\u0027s tags by typing `skill/` or \u0027position/\u0027 without specifying any tags after it."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 1 p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 2 n/Betsy Crower skill/` +"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "// tag::filter[]"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing the filter in Recruit Me: `filter clear`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "It clears all the filters in the applicant pool. +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "Format: `filter clear`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "\u003d\u003d\u003d Reversing the filter in Recruit Me: `filter reverse`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "It reverses all the filtering conditions and show the eliminated ones. +"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "Format: `filter reverse`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Filtering Recruit Me: `filter`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "It filters the current applicant pool regarding the existing entities of every single person (name, phone, email, address or skills). +"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "Format: `filter or/and [name\u003cNAME\u003ename] [phone\u003cPHONE\u003ephone] [email\u003cEMAIL\u003eemail] [gpa\u003cGPA\u003egpa] [edu\u003cEDUCATION\u003eedu] [addr\u003cADDRESS\u003eaddr] [skill\u003cSKILL1, SKILL2, ... \u003eskill][pos\u003cPOSITION1, POSITION2, ... \u003epos] [end\u003cENDORSEMENT\u003eend]`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "for every field, using `\u003c or \u003e` can cause false results. Please do not use them in filtering criterion texts. All the fields are optional but at least one field should be used"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "****"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* For `GPA`, it prints the persons who have higher or equal amount of GPA from the given input"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* For `ENDORSEMENT`, a positive integer value is wanted, it prints the persons who have that much or higher amount of endorsements."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* \u0027OR\u0027 Usage: According to the conditions written, if at least one of them passes with the regarding person in the applicant pool, the person is included in the filtered version."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* \u0027AND\u0027 Usage: According to the conditions written, if every single one of them passes with the regarding person in the applicant pool, the person is included in the filtered version."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* The filtering is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* If more than one skills are added to the filter, they should be separated by \u0027,\u0027"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* Filtering does not check if the written condition passes totally. It only checks, if the written condition is contained in the person properties."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "e.g if there is someone named Alex, in the filtering conditions `n/ale/n` or `n/le/n` or `n/lex/n`, Alex will be included."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* All the people that are included in the filtering will be returned."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "* All the operations, that change the content of the address book also clears every single filter."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "* After one filtering, the filtered address book can be filtered again."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* For every single criteria between the filtering prefixes, input check for the validity is made"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* Filtering is compatible with all the other commands:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "** 1- clear : since the persons list changes, the filtering is automatically cleared"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "** 2- add : when filtering is active, adding a person also clears the filter along the addition. But addition takes place."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "** 3- sort / select / delete / edit / list / undo / redo / help / exit / history : can be used without clearing the filter"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "****"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* filter or phone\u003c91234567\u003ephone email\u003cjohndoemail@example.com\u003eemail skill\u003cC++, Java\u003eskill end\u003c2\u003eend"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "** Returns the people, whose numbers include 91234567 or whose email includes johndoe@example.com or who has (contains) at least C++ or Java in the skills or has at least 2 endorsements."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* filter and name\u003cale\u003ename addr\u003cabcd\u003eaddr gpa\u003c3.1\u003egpa skill\u003cC++, Java\u003eskill"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "** Returns the people, whose name contains ale and whose address contains abcd and who has (contains) C++ and Java both in the skills and has a GPA higher than or equal to 3.1"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "// end::filter[]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Approve persons by employee name: `endorse`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "Endorses an existing candidate in RecruitMe. +"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "abwilli"
        },
        "content": "Format: \u0027endorse INDEX n/YOUR NAME\u0027"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "abwilli"
        },
        "content": "****"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "abwilli"
        },
        "content": "* Endorses the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "abwilli"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "abwilli"
        },
        "content": "* All ASCII characters accepted, not limited to alphanumeric"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "abwilli"
        },
        "content": "* Error will be thrown if an employee tries to endorse a candidate more than once"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "abwilli"
        },
        "content": "* When editing tags, the existing tags of the person will be removed (i.e adding of tags is not cumulative) except for"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "abwilli"
        },
        "content": "existing endorsement tags."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "abwilli"
        },
        "content": "* NOT COMPLETED"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "abwilli"
        },
        "content": "****"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "abwilli"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "abwilli"
        },
        "content": "* \u0027endorse 1 n/Steve Jobs\u0027"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "abwilli"
        },
        "content": "Adds a blue tag to the candidate at the \u00271\u0027 index with the text \u0027Steve Jobs\u0027"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Locating persons by name: `find`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "Finds persons whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "* `find John` +"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy Tim John` +"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "Returns any person having names `Betsy`, `Tim`, or `John`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "\u003d\u003d\u003d Sorting persons: `sort`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "Sorts persons by method described by the given keywords. +"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "Format: `sort [reverse] KEYWORD`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "Accepted KEYWORDs:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        `name`; `surname`; `education`; `gpa`; `skills`; `positions`; `endorsements`; `skill number`;  +"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        `position number`;  `endorsement number`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "* `sort education` +"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "Returns the persons, with new index numbers, in alphabetical order of their education."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "* `sort reverse skills` +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "Returns the persons, with new index numbers, in reverse alphabetical order of their first skill. Their first +"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "skill is that which appears first when the person\u0027s skills have been ordered alphabetically."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "Methodology:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "****"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "* The `sort name` command compares the Christian name first and then the surname. +"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "_e.g. `Adam Smith` shall come before `Shaun Adams` and `Adam Blacksmith` shall come before `Adam Smith`._"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "* The `sort surname` command compares the surname only. +"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "If two surnames match, then the previous relative ordering of the two shall be kept. +"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "_e.g. `Ben Adams` shall come before `Adam Black`._"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "* The `sort education` command sorts the persons by the alphabetical ordering of their education (case-insensitive). +"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "_e.g. `Charlotte Green (NTU)` shall come before `Adam Smith (NUS)`._"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "* The `sort gpa` command sorts the persons by increasing gpa numeric value. +"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "_e.g. `Adam Smith (3.1)` shall come before `Charlotte Green (3.9)`._"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "* The `sort skills` arranges each person\u0027s skills alphabetically and then arranges the people based on their skills in alphabetical order (case-insensitive). +"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "_e.g. `Peter Parker (Python, Debugging)` shall come before `Charlotte Oliveiro (Java)` +"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "since `Debugging` comes before `Java`._"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "* The `sort positions` arranges each person\u0027s positions alphabetically and then arranges the people based on their positions in alphabetical order. +"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "_e.g. `Charlotte Oliveiro (Project Consultant, Crime Analyst)` shall come before `Peter Parker (Databases)` +"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "since `Crime Analyst` comes before `Databases`._"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "* The `sort endorsements` arranges each person\u0027s endorsements alphabetically and then arranges the people based on their endorsements in alphabetical order (case-insensitive). +"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "_e.g. `Irfan Ibrahim (Warren Buffett, Jeff Bezos)` shall come before `Alex Yeoh (Mark Cuban, Steve Jobs)` +"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "since `Jeff Bezos` comes before `Mark Cuban`._"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "* The `sort skill number` arranges persons based on the number of skills they have from most to fewest.+"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "_e.g. `Peter Parker (Python, Debugging)` shall come before `Charlotte Oliveiro (Java)` +"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "since `Peter Parker` has two skills where as `Charlotte Oliveiro` only has one._"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "* The `sort position number` arranges persons based on the number of positions they have from most to fewest.+"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "_e.g. `Charlotte Oliveiro (Project Consultant, Crime Analyst)` shall come before `Peter Parker (Databases)` +"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "since `Charlotte Oliveiro` has had two positions where as `Peter Parker` only has one._"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "* The `sort endorsement number` arranges persons based on the number of endorsements they have from most to fewest. +"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "_e.g. `Irfan Ibrahim (Warren Buffett, Jeff Bezos)` shall come before `Bruce Wayne (Thomas Wayne)` +"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "since `Irfan Ibrahim` has two endorsements where as `Bruce Wayne` only has one._"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "* The `reverse` keyword can be used in conjunction with any of the above keywords and it shall reverse the ordering. +"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "_e.g. The `sort reverse surname` command shall result in `Adam Black` coming before `Ben Adams`._"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "* If the sorting method has two persons with the same value _(e.g. both persons have two endorsements in the \u0027sort +"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "endorsement number\u0027 command)_, then the previous relative ordering of the two shall be kept."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "* The `sort` command is compatible with the `filter` command. +"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "If the Address Book contains ten persons, but the filter has selected just three persons, then only the three persons shall be ordered and returned with the new index numbers. +"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "Additional filters can be applied within the sort."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "* The `sort` command is partially compatible with the `find` command. +"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "If the Address Book is currently sorted according to a certain method, the `find` command shall return the persons, according to the specified find keyword, ordered by the previous sort method. +"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "If the Address Book has currently _found_ certain persons from the `find` command, an additional sort shall sort all those in the address book and not just those that have been _found_."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "Should the user wish to just sort a few people, the `filter` command should be used as outlined above."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "* The `sort` command is compatible with all other commands (add/clear/delete/edit/exit/help/history/list/redo/select/undo). +"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "It shall not automatically update the returned list of persons. For example adding a person shall simply add them to the end of the list of persons."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "****"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person : `delete`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the specified person from the address book. +"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes the person at the specified `INDEX`."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed applicant pool."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 2nd person in the applicant pool."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Selecting a person : `select`"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the person identified by the index number used in the displayed applicant pool. +"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "* Selects the person and loads the Google search page the person at the specified `INDEX`."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "`select 2` +"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the 2nd person in the address book."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "`select 1` +"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "Restores the applicant pool to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "Undoable commands: those commands that modify the applicant pool\u0027s content (`add`, `delete`, `edit` and `clear`)."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "Clears all entries from the applicant pool. +"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "Applicant data is saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "_{explain how the user can enable/disable data encryption}_"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous application folder."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "* *Add* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [skill/TAG]...` +"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 skill/Java skill/leadership`"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [skill/TAG]...` +"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `edit 2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `find James Jake`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "* *Sort* : `sort [reverse] KEYWORD` +"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "e.g. `sort name` +"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "e.g. `sort reverse education`"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "* *Select* : `select INDEX` +"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "e.g.`select 2`"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 52,
      "abwilli": 24,
      "-": 267,
      "DMGreenhouse": 64
    }
  },
  {
    "path": "docs/team/abbywilliams.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "\u003d Abby Williams- Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "\u003d\u003d PROJECT: Recruit Me"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "Recruit Me is a desktop application designed for . It is an adaptation of AddressBook - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: Endorse Command"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows any current employees with access to the platform the opportunity to personally endorse candidates of their choice"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: Tags are critical elements that shape a candidate and this color-coded system allows managers to better view these applicants and allows employees to interact with the recruiting process."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    - command allows an employee to add their name as a special blue tag to a candidate\u0027s profile"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    - accepts all ASCII input, not just limited to alphanumeric"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    - if a candidate edits his or her tags the employee endorsement will not be deleted"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    - command accepts all characters and is not limited to alphanumeric input"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    - works with filtering command so a manager can filter by a specific employee to see which candidate\u0027s he or she has      endorsed"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: Diverse Tag Functionality"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    - Refactoring Tag to distinguish between their skills and positions when they add and edit their profile"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    - Present skills and position tags in different colors for recruiters to get a better view of the candidate"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    - Allow more than just alphanumeric input for the skill/position options"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "include::../UserGuide.adoc"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "include::../DeveloperGuide.adoc"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "---"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 2,
      "-": 14,
      "DMGreenhouse": 39
    }
  },
  {
    "path": "docs/team/barisbatuhan.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "\u003d Baris Batuhan- Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "\u003d\u003d PROJECT: Recruit Me"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "Recruit Me is a Java Desktop GUI application that is specifically designed for a recruiting agency for their processes about the candidates in their storage."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* *Major enhancement*: added *filtering command*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "** What it does: it filters the persons according to their every single aspect (Name, Phone, Email, Skills, ...), ait can manage multiple filterings at the same time and also the filter can be cleared in any time the user wants."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "** Justification: This feature improves the usability of the product significantly, because it can eliminate al the candidates that are not fitting for the wanted job positions. Also it makes the searching and classification process easier for the app users."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "** Highlights: This new feature affects all the commands already implemented and all other commands that will be implemented in the future. Thus, the interaction of this command with other commands are strongly investigated and minor changes for other  commands are also made to make the other commands compatible with filtering."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "** Some minor changes are made for the methods in AddressBook, ModelManager and VersionedAddressBook classes that AddCommand, DeleteCommand and EditCommand uses for the compatibility with filtering process."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "** Travis Checkstyle errors and some test errors are fixed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "\u003d\u003d Other contributions:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* Contributions to the User Guide"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "** Filtering process is added to the User guide in a new section."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "** The form of it, the usage and some examples are given for the user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "** The changes can be seen in"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "*** `UserGuide -\u003e Features -\u003e Filtering Recruit Me: filter`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "*** `UserGuide -\u003e Features -\u003e Filtering Recruit Me: filter clear`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "*** `UserGuide -\u003e Features -\u003e Filtering Recruit Me: filter reverse`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* Contributions to the Developer Guide"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "** A new section for filtering is added to the developer guide."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "** Implementation of filtering process, other alternatives and implementation of tests are explained."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "** Some of the use cases and user stories are updated."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "** The changes can be seen in `DeveloperGuide -\u003e Implementation -\u003e Filter or/and/clear feature`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "* Contributions to the README.doc"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "** Explanation of the application is updated."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "** Some parts about the changes in every version is updated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "** UI.png is updated."
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 25,
      "DMGreenhouse": 22
    }
  },
  {
    "path": "docs/team/charlottenixon.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "\u003d Charlotte Nixon- Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "\u003d\u003d PROJECT: Recruit Me"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "Recruit Me is a desktop application designed for . It is an adaptation of AddressBook - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charnixon"
        },
        "content": "* *Major enhancement*: added *GPA and Education Parameter*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charnixon"
        },
        "content": "** What it does: _{Allows users to input their GPA and Education attributs}_."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charnixon"
        },
        "content": "** Justification: _{It is important for the employeers to be able to know the protential employees GPA and education}_."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charnixon"
        },
        "content": "** Highlights: _{Employees can see on the contact this information}_."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charnixon"
        },
        "content": "* *Minor enhancement*: _{CV}_."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charnixon"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charnixon"
        },
        "content": "The V1.1 and V1.2 information"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "include::../UserGuide.adoc"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charnixon"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charnixon"
        },
        "content": "Education and GPA"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "include::../DeveloperGuide.adoc"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "---"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 2,
      "charnixon": 9,
      "DMGreenhouse": 40
    }
  },
  {
    "path": "docs/team/danielgreenhouse.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "\u003d Daniel Greenhouse - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "\u003d\u003d PROJECT: Recruit Me"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "Recruit Me is a desktop application designed for Recruitment Companies looking to store their client\u0027s data ergonomically."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "It is an adaptation of AddressBook - Level 4 which is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "* *Major enhancement*: added *the ability to sort persons through various means*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "** What it does: allows the user to sort the list of persons."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "** Justification: This feature allows the user to sort through the client\u0027s data. It is pivotal in transforming the AddressBook to a Recruiting platform since it provides the user with multiple tools for visually seeing their clients in a logical manner."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "** Highlights: This enhancement is fully compatible with the other commands and proves particularly useful to the user when used in conjunction with the `filter` command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "** changes to VersionedAddressBook and ModelManager to allow for deleting all persons at once and adding a person with the filter in place."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "** Addition of sort method description in a new section (Recruit Me - User Guide/Features/Sorting Persons: sort)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "** The full utility is explained to ensure the user can get a grasp of the new tools available to them."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "include::../UserGuide.adoc"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "** The steps required for the addition of a new sort method is outlined for future developers in a new section (Recruit Me - Developer Guide/Implementation/Sort Commands)."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "** Some rational for the sort command has been outlined."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "** The currently available tests have been outlined."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "include::../DeveloperGuide.adoc"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 2,
      "DMGreenhouse": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "abwilli"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 0, true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            model.setFilterInfo(true);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            logic.removeFilterWhileExiting();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            logger.severe(\"Failed to clear the existing filter before closing the application.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 10,
      "abwilli": 1,
      "-": 186
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of commands entered by the user."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * The list is ordered from the least recent command to the most recent command."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cString\u003e getHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selected person in the filtered person list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * null if no person is selected."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#selectedPersonProperty()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the selected person in the filtered person list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#setSelectedPerson(Person)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    void setSelectedPerson(Person person);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * It is called in the stop function of main. And clears all the filters if there"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * is any."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    void removeFilterWhileExiting() throws CommandException;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 7,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean addressBookModified;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set addressBookModified to true whenever the models\u0027 address book is modified."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        model.getAddressBook().addListener(observable -\u003e addressBookModified \u003d true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookModified \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            commandResult \u003d command.execute(model, history);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (addressBookModified) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Address book modified, saving to file.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return history.getHistory();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.selectedPersonProperty();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedPerson(Person person) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setSelectedPerson(person);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public void removeFilterWhileExiting() throws CommandException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        model.clearFilter();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 10,
      "-": 108
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EDUCATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GPA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_POS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SKILL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charnixon"
        },
        "content": "            + PREFIX_EDUCATION + \"EDUCATION \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            + PREFIX_GPA + \"Gpa \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abwilli"
        },
        "content": "            + \"[\" + PREFIX_SKILL + \"TAG]...\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charnixon"
        },
        "content": "            + PREFIX_EDUCATION + \"NUS \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charnixon"
        },
        "content": "            + PREFIX_GPA + \"3 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            + PREFIX_SKILL + \"Java \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            + PREFIX_POS + \"Software Engineer\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                || (other instanceof AddCommand"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 8,
      "charnixon": 3,
      "abwilli": 1,
      "-": 61,
      "DMGreenhouse": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charnixon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EDUCATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charnixon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GPA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abwilli"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SKILL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.model.person.Education;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.model.person.Gpa;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "abwilli"
        },
        "content": "import seedu.address.model.tag.SkillsTag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "charnixon"
        },
        "content": "            + \"[\" + PREFIX_EDUCATION + \"EDUCATION] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            + \"[\" + PREFIX_GPA + \"Gpa] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "abwilli"
        },
        "content": "            + \"[\" + PREFIX_SKILL + \"TAG]...\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getAddressBook().getPersonList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        Set\u003cSkillsTag\u003e previousTags \u003d new HashSet\u003c\u003e(personToEdit.getTags());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        Set\u003cSkillsTag\u003e endorsements \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        for (SkillsTag s: previousTags) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "abwilli"
        },
        "content": "            if (s.tagType.equals(\"endorse\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "abwilli"
        },
        "content": "                endorsements.add(s);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "abwilli"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        Person changedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        Set\u003cSkillsTag\u003e editedTags \u003d new HashSet\u003c\u003e(changedPerson.getTags());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        editedTags.addAll(endorsements);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        Person editedPerson \u003d new Person(changedPerson.getName(), changedPerson.getPhone(), changedPerson.getEmail(),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "abwilli"
        },
        "content": "                changedPerson.getEducation(), changedPerson.getGpa(), changedPerson.getAddress(), editedTags);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "charnixon"
        },
        "content": "        Education updatedEducation \u003d editPersonDescriptor.getEducation().orElse(personToEdit.getEducation());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        Gpa updatedGpa \u003d editPersonDescriptor.getGpa().orElse(personToEdit.getGpa());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        Set\u003cSkillsTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedEducation,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                updatedGpa, updatedAddress, updatedTags);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "charnixon"
        },
        "content": "        private Education education;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        private Gpa gpa;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        private Set\u003cSkillsTag\u003e tags;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "charnixon"
        },
        "content": "            setEducation(toCopy.education);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            setGpa(toCopy.gpa);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "charnixon"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, education, gpa, address, tags);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "charnixon"
        },
        "content": "        public void setEducation(Education education) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "charnixon"
        },
        "content": "            this.education \u003d education;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "charnixon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "charnixon"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "charnixon"
        },
        "content": "        public Optional\u003cEducation\u003e getEducation() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "charnixon"
        },
        "content": "            return Optional.ofNullable(education);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "charnixon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "charnixon"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        public void setGpa(Gpa gpa) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "charnixon"
        },
        "content": "            this.gpa \u003d gpa;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "charnixon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "charnixon"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        public Optional\u003cGpa\u003e getGpa() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "charnixon"
        },
        "content": "            return Optional.ofNullable(gpa);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "charnixon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "charnixon"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        public void setTags(Set\u003cSkillsTag\u003e tags) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        public Optional\u003cSet\u003cSkillsTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "charnixon"
        },
        "content": "                    \u0026\u0026 getEducation().equals(e.getEducation())"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                    \u0026\u0026 getGpa().equals(e.getGpa())"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 12,
      "charnixon": 22,
      "abwilli": 22,
      "-": 215
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EndorseCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abwilli"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abwilli"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abwilli"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abwilli"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abwilli"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abwilli"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abwilli"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abwilli"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abwilli"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abwilli"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abwilli"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abwilli"
        },
        "content": "import seedu.address.model.tag.SkillsTag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abwilli"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abwilli"
        },
        "content": " * Endorses a person in the recruiter platform."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abwilli"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abwilli"
        },
        "content": "public class EndorseCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abwilli"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"endorse\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            + \"Endorses a candidate in the recruiting list. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            + \" endorse \" + \"(index) \" + \"n/(your name) \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            + \"EXAMPLE: endorse 2 n/Warren Buffett\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abwilli"
        },
        "content": "    public static final String MESSAGE_ENDORSE_PERSON_SUCCESS \u003d \"Endorsed Person: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "abwilli"
        },
        "content": "    public static final String MESSAGE_REMOVE_ENDORSE_SUCESS \u003d \"You have unendorsed : %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "abwilli"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"You have already endorsed this person\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "abwilli"
        },
        "content": "    public static final String MESSAGE_MISSING_ENDORSEMENT \u003d \"You have not endorsed this person\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "abwilli"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "abwilli"
        },
        "content": "    private final String endorseName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "abwilli"
        },
        "content": "    private final boolean clearName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "abwilli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "abwilli"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "abwilli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "abwilli"
        },
        "content": "    public EndorseCommand(int process, Index index, String endorseName) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        this.endorseName \u003d endorseName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        if (process \u003d\u003d 1) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "abwilli"
        },
        "content": "            this.clearName \u003d true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "abwilli"
        },
        "content": "            this.clearName \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "abwilli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "abwilli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "abwilli"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getAddressBook().getPersonList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "abwilli"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        Set\u003cSkillsTag\u003e personTags \u003d new HashSet\u003c\u003e(personToEdit.getTags());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        if (clearName) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "abwilli"
        },
        "content": "            SkillsTag foundTag \u003d null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "abwilli"
        },
        "content": "            for (SkillsTag t : personTags) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "abwilli"
        },
        "content": "                if (t.tagName.equals(\"e:\" + endorseName)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "abwilli"
        },
        "content": "                    foundTag \u003d t;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "abwilli"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "abwilli"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "abwilli"
        },
        "content": "            if (foundTag !\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "abwilli"
        },
        "content": "                personTags.remove(foundTag);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "abwilli"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "abwilli"
        },
        "content": "                throw new CommandException(MESSAGE_MISSING_ENDORSEMENT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "abwilli"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "abwilli"
        },
        "content": "            if (personToEdit.isTagExist(endorseName)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "abwilli"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "abwilli"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "abwilli"
        },
        "content": "            personTags.add(new SkillsTag(endorseName, \"endorse\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "abwilli"
        },
        "content": "                personToEdit.getEducation(), personToEdit.getGpa(), personToEdit.getAddress(), personTags);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        if (clearName) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "abwilli"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_REMOVE_ENDORSE_SUCESS, editedPerson.getName()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "abwilli"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_ENDORSE_PERSON_SUCCESS, editedPerson.getName()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "abwilli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "abwilli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abwilli": 98,
      "DMGreenhouse": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FilterCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILTER_EMAIL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILTER_EMAIL_REVERSE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILTER_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILTER_NAME_REVERSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILTER_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILTER_PHONE_REVERSE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILTER_SKILL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILTER_SKILL_REVERSE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": " * Filters the address book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "public class FilterCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"filter\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public static final String MESSAGE_CLEAR_FILTER_PERSON_SUCCESS \u003d \"The Address Book is cleared from \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            + \"all the filters.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public static final String MESSAGE_FILTER_PERSON_SUCCESS \u003d \"The Address Book is filtered.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public static final String MESSAGE_FILTER_REVERSE_SUCCESS \u003d \"The filtering is reversed.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public static final String MESSAGE_NOT_FILTERED \u003d \"Filtering is not successful!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public static final String MESSAGE_NO_FILTER_TO_CLEAR \u003d \"There is no filter to clear.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public static final String MESSAGE_NO_FILTER_TO_REVERSE \u003d \"There is no filter to reverse.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            COMMAND_WORD + \" or/and \" + \"prefix1\u003ctext\u003eprefix1 [prefix2\u003ctext\u003eprefix2] \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            + \"--- OR --- \" + COMMAND_WORD + \" clear/reverse \\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            + \"Examples: \\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            + COMMAND_WORD + \" or  \" + PREFIX_FILTER_PHONE + \"91234567\" + PREFIX_FILTER_PHONE_REVERSE + \" \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            + PREFIX_FILTER_SKILL + \"C++, MS-Excel\" + PREFIX_FILTER_SKILL_REVERSE"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            + \" --\u003e SAVES THE FILTER. IF ONE OF THE FILTER TYPES MATCH, IT PRINTS IT! \\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            + COMMAND_WORD + \" and \" + PREFIX_FILTER_NAME + \"Alex\" + PREFIX_FILTER_NAME_REVERSE + \" \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            + PREFIX_FILTER_EMAIL + \"johndoe@example.com\" + PREFIX_FILTER_EMAIL_REVERSE"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            + \" --\u003e SAVES THE FILTER. IF ALL OF THE FILTER TYPES MATCH, IT PRINTS IT! \\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            + COMMAND_WORD + \" clear \" + \" --\u003e CLEARS ALL THE PREVIOUSLY MADE FILTERING! \\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            + COMMAND_WORD + \" reverse \" + \" --\u003e REVERSES THE FILTERING!\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * Explanation of process numbers:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * 0 -\u003e clear"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * 1 -\u003e or"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * 2 -\u003e and"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * 3 -\u003e reverse"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private final int processNum;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private String phone;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private String[] skillList;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private String[] posList;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private String gpa;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private String education;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private String endorseCount;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isFilterCleared;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public FilterCommand(String[] criterion, int processNumber) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        processNum \u003d processNumber;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        name \u003d criterion[0];"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        phone \u003d criterion[1];"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        email \u003d criterion[2];"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        address \u003d criterion[3];"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        gpa \u003d criterion[6];"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        education \u003d criterion[7];"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        endorseCount \u003d criterion[8];"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        isFilterCleared \u003d false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        if (criterion[4] !\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            skillList \u003d criterion[4].trim().split(\",\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            for (int i \u003d 0; i \u003c skillList.length; i++) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                skillList[i] \u003d skillList[i].trim().toLowerCase();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            skillList \u003d null;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        if (criterion[5] !\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            posList \u003d criterion[5].trim().split(\",\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            for (int i \u003d 0; i \u003c posList.length; i++) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                posList[i] \u003d posList[i].trim().toLowerCase();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            posList \u003d null;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * Decides which filter method will be called (and/or/clear) and calls the method"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private void processCommand(Model model) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        if (processNum \u003d\u003d 1) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            // or statement will be processed"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            isFilterCleared \u003d false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            model.filterOr(name, phone, email, address, skillList, posList, endorseCount, gpa, education);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        } else if (processNum \u003d\u003d 2) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            // and statement will be processed"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            isFilterCleared \u003d false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            model.filterAnd(name, phone, email, address, skillList, posList, endorseCount, gpa, education);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        } else if (processNum \u003d\u003d 3) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            // reverse statement will be processed"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            isFilterCleared \u003d false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            model.reverseFilter();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            // clear statement will be processed"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            if (model.getFilterInfo()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                model.clearFilter();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                isFilterCleared \u003d true;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            processCommand(model);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            if (isFilterCleared) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                isFilterCleared \u003d false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                model.commitAddressBook();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                return new CommandResult(MESSAGE_CLEAR_FILTER_PERSON_SUCCESS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            } else if (processNum \u003d\u003d 0 \u0026\u0026 !isFilterCleared) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                throw new CommandException(MESSAGE_NO_FILTER_TO_CLEAR);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            } else if (processNum \u003d\u003d 3) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                if (model.getFilterInfo()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                    model.commitAddressBook();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                    return new CommandResult(MESSAGE_FILTER_REVERSE_SUCCESS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                    throw new CommandException(MESSAGE_NO_FILTER_TO_REVERSE);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                model.commitAddressBook();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                return new CommandResult(MESSAGE_FILTER_PERSON_SUCCESS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        if (other \u003d\u003d this || (other instanceof FilterCommand"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                \u0026\u0026 ((name \u003d\u003d null \u0026\u0026 ((FilterCommand) other).name \u003d\u003d null)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                || name.equals(((FilterCommand) other).name))"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                \u0026\u0026 ((phone \u003d\u003d null \u0026\u0026 ((FilterCommand) other).phone \u003d\u003d null)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                || phone.equals(((FilterCommand) other).phone))"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                \u0026\u0026 ((email \u003d\u003d null \u0026\u0026 ((FilterCommand) other).email \u003d\u003d null)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                || email.equals(((FilterCommand) other).email))"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                \u0026\u0026 ((address \u003d\u003d null \u0026\u0026 ((FilterCommand) other).address \u003d\u003d null)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                || address.equals(((FilterCommand) other).address))"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                \u0026\u0026 ((skillList \u003d\u003d null \u0026\u0026 ((FilterCommand) other).skillList \u003d\u003d null)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                || Arrays.equals(skillList, ((FilterCommand) other).skillList))"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                \u0026\u0026 ((posList \u003d\u003d null \u0026\u0026 ((FilterCommand) other).posList \u003d\u003d null)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                || Arrays.equals(posList, ((FilterCommand) other).posList))"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                \u0026\u0026 ((education \u003d\u003d null \u0026\u0026 ((FilterCommand) other).education \u003d\u003d null)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                || education.equals(((FilterCommand) other).education))"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                \u0026\u0026 ((gpa \u003d\u003d null \u0026\u0026 ((FilterCommand) other).gpa \u003d\u003d null)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                || gpa.equals(((FilterCommand) other).gpa))"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                \u0026\u0026 ((endorseCount \u003d\u003d null \u0026\u0026 ((FilterCommand) other).endorseCount \u003d\u003d null)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                || endorseCount.equals(((FilterCommand) other).endorseCount)))) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 166,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SortCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import seedu.address.logic.commands.sortmethods.SortEducation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import seedu.address.logic.commands.sortmethods.SortGpa;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import seedu.address.logic.commands.sortmethods.SortName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.logic.commands.sortmethods.SortSkills;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import seedu.address.logic.commands.sortmethods.SortSurname;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import seedu.address.logic.commands.sortmethods.SortTagNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import seedu.address.logic.commands.sortmethods.SortUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.logic.parser.SortWord;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": " * Sorts all persons in the address book and lists to the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public static final String MESSAGE_NOT_SORTED \u003d \"Sorting is not successful!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Sorted all persons\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sorts all persons in address book \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            + \"according to the specified keyword and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            + \"Parameters: [reverse] KEYWORD \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            + \"Valid KEYWORD: education, endorsements, endorsement number, gpa, name, positions, position number,\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            + \"               skills, skill number, surname \\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" name \\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" reverse skills \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    private final SortWord method;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    private List\u003cPerson\u003e sortedPersons;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    private Boolean isReverseList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public SortCommand(SortWord method) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        this.method \u003d method;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     * Checks if the sort should be reversed."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     * If it should be reversed the class wide isReverseList boolean is updated and the input is shortened"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     *   to leave just the sorting method"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    private String checkReverse() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        String input \u003d this.method.getSortWord();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        isReverseList \u003d false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        if (input.contains(\"reverse\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            isReverseList \u003d true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            int firstSpace \u003d input.indexOf(\" \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            return input.substring(firstSpace + 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * Processes the sort command"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * @param model"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private void processCommand(Model model) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getAddressBook().getPersonList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        //Maybe use switch statement here?"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        String commandInput \u003d checkReverse();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        if (commandInput.equals(\"name\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            SortName sorted \u003d new SortName(lastShownList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            sortedPersons \u003d sorted.getList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            model.deleteAllPerson();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        } else if (commandInput.equals(\"surname\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            SortSurname sorted \u003d new SortSurname(lastShownList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            sortedPersons \u003d sorted.getList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            model.deleteAllPerson();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        } else if (commandInput.equals(\"skills\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            SortSkills sorted \u003d new SortSkills(lastShownList, commandInput);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            sortedPersons \u003d sorted.getList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            model.deleteAllPerson();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        } else if (commandInput.equals(\"endorsements\")) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            SortSkills sorted \u003d new SortSkills(lastShownList, commandInput);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            sortedPersons \u003d sorted.getList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            model.deleteAllPerson();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        } else if (commandInput.equals(\"positions\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            SortSkills sorted \u003d new SortSkills(lastShownList, commandInput);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            sortedPersons \u003d sorted.getList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            model.deleteAllPerson();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        } else if (commandInput.equals(\"gpa\")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            SortGpa sorted \u003d new SortGpa(lastShownList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            sortedPersons \u003d sorted.getList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            //TODO: remove this print statement"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            //Temporarily add print statement here since the gpa is not being printed to the GUI"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            //Note: this is performed before any reversal"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            System.out.println(sortedPersons);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            model.deleteAllPerson();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        } else if (commandInput.equals(\"education\")) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            SortEducation sorted \u003d new SortEducation(lastShownList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            sortedPersons \u003d sorted.getList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            //TODO: remove this print statement"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            //Temporarily add print statement here since the education is not being printed to the GUI"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            System.out.println(sortedPersons);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            model.deleteAllPerson();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        } else if (commandInput.substring(commandInput.lastIndexOf(\" \") + 1).equals(\"number\")) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            SortTagNumber sorted \u003d new SortTagNumber(lastShownList, commandInput);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            sortedPersons \u003d sorted.getList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            model.deleteAllPerson();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        if (isReverseList) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            sortedPersons \u003d SortUtil.reversePersonList(sortedPersons);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        for (Person newPerson : sortedPersons) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            model.addPersonWithFilter(newPerson);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            model.setSortInfo(true);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            processCommand(model);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            String messageSuccess \u003d \"Sorted all persons by \" + method.toString();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            model.commitAddressBook();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            model.setSortInfo(false);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            return new CommandResult(messageSuccess);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            return new CommandResult(MESSAGE_NOT_SORTED);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 23,
      "DMGreenhouse": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/sortmethods/SortEducation.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "package seedu.address.logic.commands.sortmethods;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": " * Sorts all persons by Education."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "public class SortEducation {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    private List\u003cPerson\u003e newList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public SortEducation(List\u003cPerson\u003e lastShownList) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        Comparator\u003cPerson\u003e personEducationComparator \u003d Comparator.comparing(Person::educationToString);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        this.newList \u003d SortUtil.sortPersons(lastShownList, personEducationComparator);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public List\u003cPerson\u003e getList() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        return this.newList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DMGreenhouse": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/sortmethods/SortGpa.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "package seedu.address.logic.commands.sortmethods;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": " * Sorts all persons by GPA."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "public class SortGpa {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    private List\u003cPerson\u003e newList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public SortGpa(List\u003cPerson\u003e lastShownList) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        Comparator\u003cPerson\u003e personGpaComparator \u003d Comparator.comparing(Person::gpaToString);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        this.newList \u003d SortUtil.sortPersons(lastShownList, personGpaComparator);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public List\u003cPerson\u003e getList() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        return this.newList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DMGreenhouse": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/sortmethods/SortName.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "package seedu.address.logic.commands.sortmethods;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": " * Sorts all persons by age."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "public class SortName {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    private List\u003cPerson\u003e newList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public SortName(List\u003cPerson\u003e lastShownList) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        Comparator\u003cPerson\u003e personNameComparator \u003d Comparator.comparing(Person::nameToString);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        this.newList \u003d SortUtil.sortPersons(lastShownList, personNameComparator);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public List\u003cPerson\u003e getList() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        return this.newList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 5,
      "DMGreenhouse": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/sortmethods/SortSkills.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "package seedu.address.logic.commands.sortmethods;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import java.util.LinkedHashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.model.person.Education;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.model.person.Gpa;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.model.tag.SkillsTag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": " * Sorts all persons by skill (tag)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": " * Currently only the first (alphabetically) is ordered."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "public class SortSkills {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    private List\u003cPerson\u003e newList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public SortSkills(List\u003cPerson\u003e lastShownList, String type) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        String prefix \u003d type.substring(0, 1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        //Modify each Person to organise tags alphabetically"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        List\u003cPerson\u003e personsWithCorrectTagOrder \u003d orderPersonsTags(lastShownList, prefix);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        //Sort Persons alphabetically by tags"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        Comparator\u003cPerson\u003e personTagComparator \u003d Comparator.comparing(Person::tagsToString);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        List\u003cPerson\u003e newList \u003d SortUtil.sortPersons(personsWithCorrectTagOrder, personTagComparator);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        this.newList \u003d newList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * Gets from the list the information of person and processes"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    private List\u003cPerson\u003e orderPersonsTags(List\u003cPerson\u003e lastShownList, String prefix) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        List\u003cPerson\u003e personsWithCorrectTagOrder \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        for (Person person : lastShownList) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            //Change Set to List to utilise stream sorting"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            List\u003cSkillsTag\u003e individualTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            List\u003cSkillsTag\u003e tagsToSort \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            List\u003cSkillsTag\u003e otherTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            individualTags.addAll(person.getTags());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            for (SkillsTag tag : individualTags) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                String tagString \u003d tag.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                //first element of string is \"[\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                if (tagString.substring(1, 2).equals(prefix)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                    tagsToSort.add(tag);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                    otherTags.add(tag);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            List\u003cSkillsTag\u003e individualSortedTags \u003d SortUtil.sortSkillTags(tagsToSort);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            individualSortedTags.addAll(otherTags);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            Name name \u003d person.getName();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            Phone phone \u003d person.getPhone();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            Email email \u003d person.getEmail();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            Education education \u003d person.getEducation();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            Gpa gpa \u003d person.getGpa();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            Address address \u003d person.getAddress();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            //change list back to set"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            LinkedHashSet\u003cSkillsTag\u003e tagSet \u003d SortUtil.toTags(individualSortedTags);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            Person newPerson \u003d new Person(name, phone, email, education, gpa, address, tagSet);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            personsWithCorrectTagOrder.add(newPerson);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        return personsWithCorrectTagOrder;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public List\u003cPerson\u003e getList() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        return this.newList;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 21,
      "DMGreenhouse": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/sortmethods/SortSurname.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "package seedu.address.logic.commands.sortmethods;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": " * Sorts all persons by age."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "public class SortSurname {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    private List\u003cPerson\u003e newList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public SortSurname(List\u003cPerson\u003e lastShownList) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        Comparator\u003cPerson\u003e personSurnameComparator \u003d Comparator.comparing(Person::surnameToString);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        this.newList \u003d SortUtil.sortPersons(lastShownList, personSurnameComparator);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public List\u003cPerson\u003e getList() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        return this.newList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 4,
      "DMGreenhouse": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/sortmethods/SortTagNumber.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "package seedu.address.logic.commands.sortmethods;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": " * Sorts all persons by number of skills, positions or endorsements"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "public class SortTagNumber {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    private List\u003cPerson\u003e newList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public SortTagNumber(List\u003cPerson\u003e lastShownList, String type) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        String prefix \u003d type.substring(0, 1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        List\u003cPerson\u003e sortedList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        if (prefix.equals(\"s\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            Comparator\u003cPerson\u003e personSkillsNumberComparator \u003d Comparator.comparing(Person::getSkillsNumber);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            sortedList \u003d SortUtil.sortPersons(lastShownList, personSkillsNumberComparator);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        } else if (prefix.equals(\"p\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            Comparator\u003cPerson\u003e personPositionsNumberComparator \u003d Comparator.comparing(Person::getPositionsNumber);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            sortedList \u003d SortUtil.sortPersons(lastShownList, personPositionsNumberComparator);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        } else if (prefix.equals(\"e\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            Comparator\u003cPerson\u003e personEndorsementsNumberComparator \u003d Comparator.comparing(Person::getEndorsementsNumber);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            sortedList \u003d SortUtil.sortPersons(lastShownList, personEndorsementsNumberComparator);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        Collections.reverse(sortedList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        this.newList \u003d sortedList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public List\u003cPerson\u003e getList() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        return this.newList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 2,
      "DMGreenhouse": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/sortmethods/SortUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "package seedu.address.logic.commands.sortmethods;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import java.util.LinkedHashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.model.tag.SkillsTag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "//SHOULD ANY OF THESE BE IN THE MODEL/PERSON/[] CLASS?"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "//TODO: rewrite all those using comparator, to just take in whatever it is to be sorted (skillstag, education etc.)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "//Maybe remove the toString method in Person class"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": " * One of the sorting helper commands"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "public class SortUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * Separates the tags"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public static LinkedHashSet\u003cSkillsTag\u003e toTags(List\u003cSkillsTag\u003e tags) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // Needs a LinkedHashSet to maintain the order"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        final LinkedHashSet\u003cSkillsTag\u003e tagSet \u003d new LinkedHashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            return tagSet;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        for (SkillsTag tagName : tags) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            tagSet.add(tagName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * sorts the skills tags"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public static List\u003cSkillsTag\u003e sortSkillTags(List\u003cSkillsTag\u003e skills) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        //Sorting tags in alphabetical order"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        List\u003cSkillsTag\u003e sortedList \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                skills.stream().sorted(Comparator.comparing(SkillsTag::toString)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        return sortedList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     *  uses the comparator to sort a list of persons"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public static List\u003cPerson\u003e sortPersons(List\u003cPerson\u003e persons, Comparator\u003cPerson\u003e comparator) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        List\u003cPerson\u003e sortedList \u003d persons.stream().sorted(comparator).collect(Collectors.toList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        return sortedList;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     * reverses a List of Person"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public static List\u003cPerson\u003e reversePersonList(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        //Included for abstraction"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        List\u003cPerson\u003e tempList \u003d persons;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        Collections.reverse(tempList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        return tempList;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 20,
      "DMGreenhouse": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EDUCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GPA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abwilli"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_POS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SKILL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abwilli"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.model.person.Education;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.model.person.Gpa;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abwilli"
        },
        "content": "import seedu.address.model.tag.SkillsTag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                        PREFIX_SKILL, PREFIX_POS, PREFIX_GPA, PREFIX_EDUCATION);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                PREFIX_GPA, PREFIX_EDUCATION)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        Set\u003cSkillsTag\u003e skillList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_SKILL), \"skill\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        Set\u003cSkillsTag\u003e posList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_POS), \"pos\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        Set\u003cSkillsTag\u003e tagList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        tagList.addAll(skillList);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        tagList.addAll(posList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        Gpa gpa \u003d ParserUtil.parseGpa(argMultimap.getValue(PREFIX_GPA).get());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "charnixon"
        },
        "content": "        Education education \u003d ParserUtil.parseEducation(argMultimap.getValue(PREFIX_EDUCATION).get());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "charnixon"
        },
        "content": "        Person person \u003d new Person(name, phone, email, education, gpa, address, tagList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 12,
      "abwilli": 9,
      "charnixon": 2,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abwilli"
        },
        "content": "import seedu.address.logic.commands.EndorseCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            return new SortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        case FilterCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            return new FilterCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        case EndorseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "abwilli"
        },
        "content": "            return new EndorseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 4,
      "abwilli": 4,
      "-": 92,
      "DMGreenhouse": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abwilli"
        },
        "content": "    public static final Prefix PREFIX_SKILL \u003d new Prefix(\"skill/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abwilli"
        },
        "content": "    public static final Prefix PREFIX_POS \u003d new Prefix(\"position/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charnixon"
        },
        "content": "    public static final Prefix PREFIX_GPA \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charnixon"
        },
        "content": "    public static final Prefix PREFIX_EDUCATION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    /* Prefix for Filtering definitions */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public static final Prefix PREFIX_FILTER_NAME \u003d new Prefix(\"name\u003c\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public static final Prefix PREFIX_FILTER_NAME_REVERSE \u003d new Prefix(\"\u003ename\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public static final Prefix PREFIX_FILTER_PHONE \u003d new Prefix(\"phone\u003c\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public static final Prefix PREFIX_FILTER_PHONE_REVERSE \u003d new Prefix(\"\u003ephone\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public static final Prefix PREFIX_FILTER_EMAIL \u003d new Prefix(\"email\u003c\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public static final Prefix PREFIX_FILTER_EMAIL_REVERSE \u003d new Prefix(\"\u003eemail\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public static final Prefix PREFIX_FILTER_ADDRESS \u003d new Prefix(\"addr\u003c\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public static final Prefix PREFIX_FILTER_ADDRESS_REVERSE \u003d new Prefix(\"\u003eaddr\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public static final Prefix PREFIX_FILTER_SKILL \u003d new Prefix(\"skill\u003c\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public static final Prefix PREFIX_FILTER_SKILL_REVERSE \u003d new Prefix(\"\u003eskill\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public static final Prefix PREFIX_FILTER_POS \u003d new Prefix(\"pos\u003c\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public static final Prefix PREFIX_FILTER_POS_REVERSE \u003d new Prefix(\"\u003epos\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public static final Prefix PREFIX_FILTER_ENDORSEMENT \u003d new Prefix(\"end\u003c\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public static final Prefix PREFIX_FILTER_ENDORSEMENT_REVERSE \u003d new Prefix(\"\u003eend\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public static final Prefix PREFIX_FILTER_GPA \u003d new Prefix(\"gpa\u003c\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public static final Prefix PREFIX_FILTER_GPA_REVERSE \u003d new Prefix(\"\u003egpa\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public static final Prefix PREFIX_FILTER_EDUCATION \u003d new Prefix(\"edu\u003c\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public static final Prefix PREFIX_FILTER_EDUCATION_REVERSE \u003d new Prefix(\"\u003eedu\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    /* Sort-Word definitions*/"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public static final SortWord SORTWORD_EDUCATION \u003d new SortWord(\"education\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public static final SortWord SORTWORD_ENDORSEMENTS \u003d new SortWord(\"endorsements\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public static final SortWord SORTWORD_ENDORSEMENT_NUMBER \u003d new SortWord(\"endorsement number\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public static final SortWord SORTWORD_GPA \u003d new SortWord(\"gpa\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public static final SortWord SORTWORD_NAME \u003d new SortWord(\"name\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public static final SortWord SORTWORD_POSITION_NUMBER \u003d new SortWord(\"position number\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public static final SortWord SORTWORD_POSITIONS \u003d new SortWord(\"positions\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public static final SortWord SORTWORD_REVERSE_EDUCATION \u003d new SortWord(\"reverse education\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public static final SortWord SORTWORD_REVERSE_ENDORSEMENTS \u003d new SortWord(\"reverse endorsements\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public static final SortWord SORTWORD_REVERSE_ENDORSEMENT_NUMBER \u003d new SortWord(\"reverse endorsement number\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public static final SortWord SORTWORD_REVERSE_GPA \u003d new SortWord(\"reverse gpa\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public static final SortWord SORTWORD_REVERSE_NAME \u003d new SortWord(\"reverse name\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public static final SortWord SORTWORD_REVERSE_POSITION_NUMBER \u003d new SortWord(\"reverse position number\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public static final SortWord SORTWORD_REVERSE_POSITIONS \u003d new SortWord(\"reverse positions\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public static final SortWord SORTWORD_REVERSE_SKILL_NUMBER \u003d new SortWord(\"reverse skill number\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public static final SortWord SORTWORD_REVERSE_SKILLS \u003d new SortWord(\"reverse skills\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public static final SortWord SORTWORD_REVERSE_SURNAME \u003d new SortWord(\"reverse surname\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public static final SortWord SORTWORD_SKILL_NUMBER \u003d new SortWord(\"skill number\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public static final SortWord SORTWORD_SKILLS \u003d new SortWord(\"skills\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public static final SortWord SORTWORD_SURNAME \u003d new SortWord(\"surname\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 21,
      "abwilli": 2,
      "charnixon": 2,
      "-": 15,
      "DMGreenhouse": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EDUCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GPA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_POS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SKILL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abwilli"
        },
        "content": "import seedu.address.model.tag.SkillsTag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private Set\u003cSkillsTag\u003e allTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_EDUCATION,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                        PREFIX_GPA, PREFIX_ADDRESS, PREFIX_SKILL, PREFIX_POS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_GPA).isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            editPersonDescriptor.setGpa(ParserUtil.parseGpa(argMultimap.getValue(PREFIX_GPA).get()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EDUCATION).isPresent()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            editPersonDescriptor.setEducation(ParserUtil.parseEducation(argMultimap.getValue(PREFIX_EDUCATION).get()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_SKILL), \"skill\").ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_POS), \"pos\").ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "abwilli"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cSkillsTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "abwilli"
        },
        "content": "     * {@code Set\u003cSkillsTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "abwilli"
        },
        "content": "    private Optional\u003cSet\u003cSkillsTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags, String type) throws ParseException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        allTags.addAll(ParserUtil.parseTags(tagSet, type));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        return Optional.of(allTags);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 19,
      "abwilli": 10,
      "-": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EndorseCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abwilli"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abwilli"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abwilli"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abwilli"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abwilli"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abwilli"
        },
        "content": "import seedu.address.logic.commands.EndorseCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abwilli"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": " * Parser implementation for EndorseCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abwilli"
        },
        "content": "public class EndorseCommandParser implements Parser\u003cEndorseCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abwilli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abwilli"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SelectCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abwilli"
        },
        "content": "     * and returns an SelectCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abwilli"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abwilli"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abwilli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abwilli"
        },
        "content": "    public EndorseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        String endorseName \u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        int process;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        if (args.contains(\"clear\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "abwilli"
        },
        "content": "            process \u003d 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "abwilli"
        },
        "content": "            process \u003d 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "abwilli"
        },
        "content": "            String prefix \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "abwilli"
        },
        "content": "            index \u003d ParserUtil.parseIndex(prefix.substring(prefix.length() - 1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "abwilli"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "abwilli"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EndorseCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "abwilli"
        },
        "content": "            endorseName \u003d argMultimap.getValue(PREFIX_NAME).get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        return new EndorseCommand(process, index, endorseName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "abwilli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "abwilli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abwilli": 50,
      "DMGreenhouse": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FilterCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILTER_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILTER_ADDRESS_REVERSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILTER_EDUCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILTER_EDUCATION_REVERSE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILTER_EMAIL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILTER_EMAIL_REVERSE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILTER_ENDORSEMENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILTER_ENDORSEMENT_REVERSE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILTER_GPA;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILTER_GPA_REVERSE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILTER_NAME;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILTER_NAME_REVERSE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILTER_PHONE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILTER_PHONE_REVERSE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILTER_POS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILTER_POS_REVERSE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILTER_SKILL;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILTER_SKILL_REVERSE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import java.util.concurrent.atomic.AtomicInteger;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.model.person.Education;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.model.person.Gpa;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.model.tag.SkillsTag;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": " * Parses the information in filter command"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "public class FilterCommandParser implements Parser\u003cFilterCommand\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public static final String MESSAGE_INPUT_NOT_IN_TRUE_FORM \u003d \"The filtering parameters entered \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            + \"is not correct accepted form!\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public static final String EMAIL_VALIDATION_REGEX \u003d \"[\\\\p{ASCII}][\\\\p{ASCII} ]*\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private final int totalNumberOfInfo \u003d 9;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private boolean inputParameterInCorrectForm \u003d true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * Since there are multiple options in filtering: and, or , clear, reverse"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * Decides which type of the filtering process will be executed from above"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private String filterTypeDivider(String args, AtomicInteger typeOfProcess) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        typeOfProcess.set(-1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        if (args.length() \u003e 3 \u0026\u0026 args.substring(0, 3).equals(\"or \")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            typeOfProcess.set(1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            args \u003d args.substring(3);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        } else if (args.length() \u003e 4 \u0026\u0026 args.substring(0, 4).equals(\"and \")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            typeOfProcess.set(2);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            args \u003d args.substring(4);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        } else if (args.length() \u003e 4 \u0026\u0026 args.substring(0, 5).equals(\"clear\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            typeOfProcess.set(0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        } else if (args.length() \u003e 6 \u0026\u0026 args.substring(0, 7).equals(\"reverse\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            typeOfProcess.set(3);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        return args;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * Checks if the input for phone is correct or not"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private boolean numberInputControl(String arg) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        arg \u003d arg.trim();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        if (arg.length() \u003c 1) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        for (int i \u003d 0; i \u003c arg.length(); i++) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            if (arg.charAt(i) \u003c \u00270\u0027 || arg.charAt(i) \u003e \u00279\u0027) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * Checks if the input for any input that needs at least 1 ASCII character"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public static boolean isValidAsciiInput(String test) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        return test.matches(EMAIL_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    /** Divides every filter criteria into Strings. The information order in the"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     *  returned array is as follows:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     *  1- Name"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     *  2- Phone"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     *  3- Email"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     *  4- Address"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     *  5- Skills"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     *  6- Positions"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     *  7- Gpa"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     *  8- Education"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     *  9- Endorsement"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     *  !!! If some of the above ones are not given, then their value will be null"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * Since there can be multiple filtering criterion at once, this function detects which criteron exist and"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * Places evey criteria text into a String array"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private String[] divideFilterCriterion(String args, AtomicInteger typeOfProcess) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String[] criterion \u003d new String[totalNumberOfInfo];"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        int totalNumOfCriterion \u003d 0;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        if ((args.contains(PREFIX_FILTER_NAME.toString())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                \u0026\u0026 !args.contains(PREFIX_FILTER_NAME_REVERSE.toString()))"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                || (!args.contains(PREFIX_FILTER_NAME.toString())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                \u0026\u0026 args.contains(PREFIX_FILTER_NAME_REVERSE.toString()))) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            inputParameterInCorrectForm \u003d false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        } else if (args.contains(PREFIX_FILTER_NAME.toString()) \u0026\u0026 args.contains(PREFIX_FILTER_NAME_REVERSE.toString())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                \u0026\u0026 args.indexOf(PREFIX_FILTER_NAME.toString())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                \u003c args.indexOf(PREFIX_FILTER_NAME_REVERSE.toString())) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            criterion[0] \u003d \"available\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            totalNumOfCriterion++;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            criterion[0] \u003d null;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        if ((args.contains(PREFIX_FILTER_PHONE.toString())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                \u0026\u0026 !args.contains(PREFIX_FILTER_PHONE_REVERSE.toString()))"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                || (!args.contains(PREFIX_FILTER_PHONE.toString())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                \u0026\u0026 args.contains(PREFIX_FILTER_PHONE_REVERSE.toString()))) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            inputParameterInCorrectForm \u003d false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        } else if (args.contains(PREFIX_FILTER_PHONE.toString())"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                \u0026\u0026 args.contains(PREFIX_FILTER_PHONE_REVERSE.toString())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                \u0026\u0026 args.indexOf(PREFIX_FILTER_PHONE.toString())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                \u003c args.indexOf(PREFIX_FILTER_PHONE_REVERSE.toString())) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            criterion[1] \u003d \"available\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            totalNumOfCriterion++;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            criterion[1] \u003d null;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        if ((args.contains(PREFIX_FILTER_EMAIL.toString())"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                \u0026\u0026 !args.contains(PREFIX_FILTER_EMAIL_REVERSE.toString()))"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                || (!args.contains(PREFIX_FILTER_EMAIL.toString())"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                \u0026\u0026 args.contains(PREFIX_FILTER_EMAIL_REVERSE.toString()))) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            inputParameterInCorrectForm \u003d false;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        } else if (args.contains(PREFIX_FILTER_EMAIL.toString())"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                \u0026\u0026 args.contains(PREFIX_FILTER_EMAIL_REVERSE.toString())"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                \u0026\u0026 args.indexOf(PREFIX_FILTER_EMAIL.toString())"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                \u003c args.indexOf(PREFIX_FILTER_EMAIL_REVERSE.toString())) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            criterion[2] \u003d \"available\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            totalNumOfCriterion++;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            criterion[2] \u003d null;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        if ((args.contains(PREFIX_FILTER_ADDRESS.toString())"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                \u0026\u0026 !args.contains(PREFIX_FILTER_ADDRESS_REVERSE.toString()))"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                || (!args.contains(PREFIX_FILTER_ADDRESS.toString())"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                \u0026\u0026 args.contains(PREFIX_FILTER_ADDRESS_REVERSE.toString()))) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            inputParameterInCorrectForm \u003d false;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        } else if (args.contains(PREFIX_FILTER_ADDRESS.toString())"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                \u0026\u0026 args.contains(PREFIX_FILTER_ADDRESS_REVERSE.toString())"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                \u0026\u0026 args.indexOf(PREFIX_FILTER_ADDRESS.toString())"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                \u003c args.indexOf(PREFIX_FILTER_ADDRESS_REVERSE.toString())) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            criterion[3] \u003d \"available\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            totalNumOfCriterion++;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            criterion[3] \u003d null;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        if ((args.contains(PREFIX_FILTER_SKILL.toString())"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                \u0026\u0026 !args.contains(PREFIX_FILTER_SKILL_REVERSE.toString()))"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                || (!args.contains(PREFIX_FILTER_SKILL.toString())"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                \u0026\u0026 args.contains(PREFIX_FILTER_SKILL_REVERSE.toString()))) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            inputParameterInCorrectForm \u003d false;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        } else if (args.contains(PREFIX_FILTER_SKILL.toString())"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                \u0026\u0026 args.contains(PREFIX_FILTER_SKILL_REVERSE.toString())"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                \u0026\u0026 args.indexOf(PREFIX_FILTER_SKILL.toString())"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                \u003c args.indexOf(PREFIX_FILTER_SKILL_REVERSE.toString())) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            criterion[4] \u003d \"available\";"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            totalNumOfCriterion++;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            criterion[4] \u003d null;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        if ((args.contains(PREFIX_FILTER_POS.toString())"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                \u0026\u0026 !args.contains(PREFIX_FILTER_POS_REVERSE.toString()))"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                || (!args.contains(PREFIX_FILTER_POS.toString())"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                \u0026\u0026 args.contains(PREFIX_FILTER_POS_REVERSE.toString()))) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            inputParameterInCorrectForm \u003d false;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        } else if (args.contains(PREFIX_FILTER_POS.toString())"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                \u0026\u0026 args.contains(PREFIX_FILTER_POS_REVERSE.toString())"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                \u0026\u0026 args.indexOf(PREFIX_FILTER_POS.toString()) \u003c args.indexOf(PREFIX_FILTER_POS_REVERSE.toString())) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            criterion[5] \u003d \"available\";"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            totalNumOfCriterion++;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            criterion[5] \u003d null;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        if ((args.contains(PREFIX_FILTER_GPA.toString())"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                \u0026\u0026 !args.contains(PREFIX_FILTER_GPA_REVERSE.toString()))"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                || (!args.contains(PREFIX_FILTER_GPA.toString())"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                \u0026\u0026 args.contains(PREFIX_FILTER_GPA_REVERSE.toString()))) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            inputParameterInCorrectForm \u003d false;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        } else if (args.contains(PREFIX_FILTER_GPA.toString())"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                \u0026\u0026 args.contains(PREFIX_FILTER_GPA_REVERSE.toString())"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                \u0026\u0026 args.indexOf(PREFIX_FILTER_GPA.toString()) \u003c args.indexOf(PREFIX_FILTER_GPA_REVERSE.toString())) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            criterion[6] \u003d \"available\";"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            totalNumOfCriterion++;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            criterion[6] \u003d null;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        if ((args.contains(PREFIX_FILTER_EDUCATION.toString())"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                \u0026\u0026 !args.contains(PREFIX_FILTER_EDUCATION_REVERSE.toString()))"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                || (!args.contains(PREFIX_FILTER_EDUCATION.toString())"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                \u0026\u0026 args.contains(PREFIX_FILTER_EDUCATION_REVERSE.toString()))) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            inputParameterInCorrectForm \u003d false;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        } else if (args.contains(PREFIX_FILTER_EDUCATION.toString())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                \u0026\u0026 args.contains(PREFIX_FILTER_EDUCATION_REVERSE.toString())"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                \u0026\u0026 args.indexOf(PREFIX_FILTER_EDUCATION.toString())"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                \u003c args.indexOf(PREFIX_FILTER_EDUCATION_REVERSE.toString())) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            criterion[7] \u003d \"available\";"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            totalNumOfCriterion++;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            criterion[7] \u003d null;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        if ((args.contains(PREFIX_FILTER_ENDORSEMENT.toString())"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                \u0026\u0026 !args.contains(PREFIX_FILTER_ENDORSEMENT_REVERSE.toString()))"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                || (!args.contains(PREFIX_FILTER_ENDORSEMENT.toString())"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                \u0026\u0026 args.contains(PREFIX_FILTER_ENDORSEMENT_REVERSE.toString()))) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            inputParameterInCorrectForm \u003d false;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        } else if (args.contains(PREFIX_FILTER_ENDORSEMENT.toString())"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                \u0026\u0026 args.contains(PREFIX_FILTER_ENDORSEMENT_REVERSE.toString())"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                \u0026\u0026 args.indexOf(PREFIX_FILTER_ENDORSEMENT.toString())"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                \u003c args.indexOf(PREFIX_FILTER_ENDORSEMENT_REVERSE.toString())) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            criterion[8] \u003d \"available\";"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            totalNumOfCriterion++;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            criterion[8] \u003d null;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        if (totalNumOfCriterion \u003d\u003d 0 || !inputParameterInCorrectForm) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            typeOfProcess.set(-1);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            if (criterion[0] !\u003d null) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                criterion[0] \u003d infoBetweenPrefixes(args, PREFIX_FILTER_NAME.toString(),"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                        PREFIX_FILTER_NAME_REVERSE.toString(), typeOfProcess, false);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                if (criterion[0] \u003d\u003d null || !Name.isValidName(criterion[0])) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                    inputParameterInCorrectForm \u003d false;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                    typeOfProcess.set(-1);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            if (criterion[1] !\u003d null) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                criterion[1] \u003d infoBetweenPrefixes(args, PREFIX_FILTER_PHONE.toString(),"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                        PREFIX_FILTER_PHONE_REVERSE.toString(), typeOfProcess, false);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                if (criterion[1] \u003d\u003d null || !numberInputControl(criterion[1])) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                    inputParameterInCorrectForm \u003d false;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                    typeOfProcess.set(-1);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            if (criterion[2] !\u003d null) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                criterion[2] \u003d infoBetweenPrefixes(args, PREFIX_FILTER_EMAIL.toString(),"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                        PREFIX_FILTER_EMAIL_REVERSE.toString(), typeOfProcess, false);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                if (criterion[2] \u003d\u003d null || !isValidAsciiInput(criterion[2])) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                    inputParameterInCorrectForm \u003d false;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                    typeOfProcess.set(-1);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            if (criterion[3] !\u003d null) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                criterion[3] \u003d infoBetweenPrefixes(args, PREFIX_FILTER_ADDRESS.toString(),"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                        PREFIX_FILTER_ADDRESS_REVERSE.toString(), typeOfProcess, false);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                if (criterion[3] \u003d\u003d null || !Address.isValidAddress(criterion[3])) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                    inputParameterInCorrectForm \u003d false;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                    typeOfProcess.set(-1);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            if (criterion[4] !\u003d null) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                criterion[4] \u003d infoBetweenPrefixes(args, PREFIX_FILTER_SKILL.toString(),"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                        PREFIX_FILTER_SKILL_REVERSE.toString(), typeOfProcess, false);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                if (criterion[4] !\u003d null) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                    for (String tag : criterion[4].split(\",\")) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                        tag.trim();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                        if (!SkillsTag.isValidTagName(tag)) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                            inputParameterInCorrectForm \u003d false;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                            typeOfProcess.set(-1);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                    inputParameterInCorrectForm \u003d false;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                    typeOfProcess.set(-1);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            if (criterion[5] !\u003d null) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                criterion[5] \u003d infoBetweenPrefixes(args, PREFIX_FILTER_POS.toString(),"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                        PREFIX_FILTER_POS_REVERSE.toString(), typeOfProcess, false);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                if (criterion[5] !\u003d null) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                    for (String tag : criterion[5].split(\",\")) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                        tag \u003d tag.trim();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                        if (!SkillsTag.isValidTagName(tag)) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                            inputParameterInCorrectForm \u003d false;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                            typeOfProcess.set(-1);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                    inputParameterInCorrectForm \u003d false;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                    typeOfProcess.set(-1);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            if (criterion[6] !\u003d null) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                criterion[6] \u003d infoBetweenPrefixes(args, PREFIX_FILTER_GPA.toString(),"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                        PREFIX_FILTER_GPA_REVERSE.toString(), typeOfProcess, true);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                if (criterion[6] \u003d\u003d null || !Gpa.isValidGpa(criterion[6])) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                    inputParameterInCorrectForm \u003d false;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                    typeOfProcess.set(-1);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            if (criterion[7] !\u003d null) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                criterion[7] \u003d infoBetweenPrefixes(args, PREFIX_FILTER_EDUCATION.toString(),"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                        PREFIX_FILTER_EDUCATION_REVERSE.toString(), typeOfProcess, false);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                if (criterion[7] \u003d\u003d null || !Education.isValidEducation(criterion[7])) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                    inputParameterInCorrectForm \u003d false;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                    typeOfProcess.set(-1);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            if (criterion[8] !\u003d null) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                criterion[8] \u003d infoBetweenPrefixes(args, PREFIX_FILTER_ENDORSEMENT.toString(),"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                        PREFIX_FILTER_ENDORSEMENT_REVERSE.toString(), typeOfProcess, false);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                if (criterion[8] \u003d\u003d null || !numberInputControl(criterion[8])) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                    inputParameterInCorrectForm \u003d false;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                    typeOfProcess.set(-1);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        return criterion;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * Since filter form is like prefix + text + prefix, this function returns the text between given prefixes."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private String infoBetweenPrefixes(String args, String prefixBegin, String prefixEnd,"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                                       AtomicInteger typeOfProcess, boolean isInputGpa) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        int beginLoc \u003d args.indexOf(prefixBegin) + prefixBegin.length();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        int endLoc \u003d args.indexOf(prefixEnd);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        if (beginLoc \u003e\u003d endLoc) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            typeOfProcess.set(-1);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        for (int i \u003d beginLoc; i \u003c endLoc; i++) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            if (args.charAt(i) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                beginLoc++;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        for (int j \u003d endLoc - 1; j \u003e beginLoc; j--) {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            if (args.charAt(j) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                endLoc--;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // checks if the Gpa value can be parsed into a float"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        if (isInputGpa) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                Float.parseFloat(args.substring(beginLoc, endLoc));"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                typeOfProcess.set(-1);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                return args.substring(beginLoc, endLoc);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        return args.substring(beginLoc, endLoc).toLowerCase();"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public FilterCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        args \u003d args.trim().replaceAll(\" +\", \" \");"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        AtomicInteger typeOfProcess \u003d new AtomicInteger(-1);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        args \u003d filterTypeDivider(args, typeOfProcess);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String[] criterion \u003d {\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"};"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        if (typeOfProcess.get() !\u003d 0 \u0026\u0026 typeOfProcess.get() !\u003d 3) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            criterion \u003d divideFilterCriterion(args, typeOfProcess);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        if (typeOfProcess.get() \u003d\u003d -1) {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            if (!inputParameterInCorrectForm) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                throw new ParseException(MESSAGE_INPUT_NOT_IN_TRUE_FORM);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        } else if (typeOfProcess.get() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            return new FilterCommand(criterion, 1);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        } else if (typeOfProcess.get() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            return new FilterCommand(criterion, 2);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        } else if (typeOfProcess.get() \u003d\u003d 3) {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            return new FilterCommand(criterion, 3);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            return new FilterCommand(criterion, 0);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 421
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.model.person.Education;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.model.person.Gpa;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abwilli"
        },
        "content": "import seedu.address.model.tag.SkillsTag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "abwilli"
        },
        "content": "     * Parses a {@code String tag} into a {@code SkillsTag}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "abwilli"
        },
        "content": "    public static SkillsTag parseTag(String tag, String type) throws ParseException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        if (!SkillsTag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "abwilli"
        },
        "content": "            throw new ParseException(SkillsTag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        return new SkillsTag(trimmedTag, type);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * Parses the Gpa"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * @param gpa"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public static Gpa parseGpa(String gpa) throws ParseException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "charnixon"
        },
        "content": "        requireNonNull(gpa);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String trimmedGpa \u003d gpa.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        if (!Gpa.isValidGpa(trimmedGpa)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            throw new ParseException(Gpa.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "charnixon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        return new Gpa(trimmedGpa);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "charnixon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "charnixon"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * Parses the education field"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * @param education"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "charnixon"
        },
        "content": "    public static Education parseEducation(String education) throws ParseException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "charnixon"
        },
        "content": "        requireNonNull(education);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "charnixon"
        },
        "content": "        String trimmedEducation \u003d education.trim();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "charnixon"
        },
        "content": "        if (!Education.isValidEducation(trimmedEducation)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "charnixon"
        },
        "content": "            throw new ParseException(Education.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "charnixon"
        },
        "content": "        return new Education(trimmedEducation);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "abwilli"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cSkillsTag\u003e}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "abwilli"
        },
        "content": "    public static Set\u003cSkillsTag\u003e parseTags(Collection\u003cString\u003e tags, String type) throws ParseException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        final Set\u003cSkillsTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        //final String color;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "abwilli"
        },
        "content": "            tagSet.add(parseTag(tagName, type));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     * Parses a {@code String sortWord} into a {@code SortWord}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public static SortWord parseSortWord(String sortWord) throws ParseException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        requireNonNull(sortWord);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        String trimmedSortWord \u003d sortWord.trim();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        return new SortWord(trimmedSortWord);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 20,
      "abwilli": 11,
      "charnixon": 10,
      "-": 117,
      "DMGreenhouse": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SortCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.SORTWORD_EDUCATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.SORTWORD_ENDORSEMENTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.SORTWORD_ENDORSEMENT_NUMBER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.SORTWORD_GPA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.SORTWORD_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.SORTWORD_POSITIONS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.SORTWORD_POSITION_NUMBER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.SORTWORD_REVERSE_EDUCATION;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.SORTWORD_REVERSE_ENDORSEMENTS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.SORTWORD_REVERSE_ENDORSEMENT_NUMBER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.SORTWORD_REVERSE_GPA;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.SORTWORD_REVERSE_NAME;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.SORTWORD_REVERSE_POSITIONS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.SORTWORD_REVERSE_POSITION_NUMBER;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.SORTWORD_REVERSE_SKILLS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.SORTWORD_REVERSE_SKILL_NUMBER;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.SORTWORD_REVERSE_SURNAME;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.SORTWORD_SKILLS;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.SORTWORD_SKILL_NUMBER;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.SORTWORD_SURNAME;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "public class SortCommandParser implements Parser\u003cSortCommand\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SortCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     * and returns an SortCommand object for execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public SortCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        String word \u003d args.substring(1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        String[] possibleSortWords \u003d {SORTWORD_EDUCATION.toString(), SORTWORD_REVERSE_EDUCATION.toString(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                SORTWORD_ENDORSEMENTS.toString(), SORTWORD_REVERSE_ENDORSEMENTS.toString(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                SORTWORD_ENDORSEMENT_NUMBER.toString(), SORTWORD_REVERSE_ENDORSEMENT_NUMBER.toString(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                SORTWORD_GPA.toString(), SORTWORD_REVERSE_GPA.toString(),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                SORTWORD_NAME.toString(), SORTWORD_REVERSE_NAME.toString(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                SORTWORD_POSITION_NUMBER.toString(), SORTWORD_REVERSE_POSITION_NUMBER.toString(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                SORTWORD_POSITIONS.toString(), SORTWORD_REVERSE_POSITIONS.toString(),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                SORTWORD_SKILL_NUMBER.toString(), SORTWORD_REVERSE_SKILL_NUMBER.toString(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                SORTWORD_SKILLS.toString(), SORTWORD_REVERSE_SKILLS.toString(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                SORTWORD_SURNAME.toString(), SORTWORD_REVERSE_SURNAME.toString()};"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        if (!areSortWordsPresent(word, possibleSortWords)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        return new SortCommand(ParserUtil.parseSortWord(args));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     * Returns true if args is a sortWord."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    private static boolean areSortWordsPresent(String inputWord, String[] sortWords) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        return Arrays.stream(sortWords).parallel().anyMatch(inputWord::equals);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 11,
      "DMGreenhouse": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SortWord.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": " * A keyword that specifies the type of sorting"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": " * E.g. \u0027age\u0027 in \u0027sort age\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "public class SortWord {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    private final String sortWord;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public SortWord(String sortWord) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        this.sortWord \u003d sortWord;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public String getSortWord() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        return sortWord;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        return getSortWord();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        return sortWord \u003d\u003d null ? 0 : sortWord.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        if (!(obj instanceof SortWord)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        SortWord otherSortWord \u003d (SortWord) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        return otherSortWord.getSortWord().equals(getSortWord());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DMGreenhouse": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.InvalidationListenerManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * With filtering, there should be 2 lists. One is the storage that holds all the persons in the address book"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * and the other one will only hold the ones that will be displayed. Thus, another list is created as the main"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * storage and the list persons is used as the current filtered list holder."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private boolean isFilterExist;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private boolean sortingExist;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private UniquePersonList allPersonsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private UniquePersonList persons;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        allPersonsStorage \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        isFilterExist \u003d false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        sortingExist \u003d false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "abwilli"
        },
        "content": "    public AddressBook() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "abwilli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        this.allPersonsStorage.setPersons(persons);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        allPersonsStorage.setPersons(newData.getAllPersonsStorageList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        persons.setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        if (!sortingExist) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            allPersonsStorage.add(p);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        if (isFilterExist \u0026\u0026 !sortingExist) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            clearFilter();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            isFilterExist \u003d false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            persons.add(p);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public void addPersonWithFilter(Person p) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        allPersonsStorage.add(p);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        allPersonsStorage.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        if (!sortingExist) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            allPersonsStorage.remove(key);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * It removes all the persons in the list"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public void removeAllPerson() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        List\u003cPerson\u003e listToRemove \u003d new ArrayList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        for (Person person : persons) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            listToRemove.add(person);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        allPersonsStorage.removeAll(listToRemove);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        persons.removeAll(listToRemove);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * Makes the filtering process according to and command"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public void filterAnd(String name, String phone, String email, String address, String[] skillList,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                          String[] posList, String endorseCount, String gpa, String education) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        isFilterExist \u003d true;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        List\u003cPerson\u003e listToRemove \u003d new ArrayList();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        for (Person person : persons) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            boolean ifExcluded \u003d false;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            if (name !\u003d null \u0026\u0026 !person.getName().toString().toLowerCase().contains(name)) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                ifExcluded \u003d true;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            if (phone !\u003d null \u0026\u0026 !person.getPhone().toString().toLowerCase().contains(phone)) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                ifExcluded \u003d true;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            if (email !\u003d null \u0026\u0026 !person.getEmail().toString().toLowerCase().contains(email)) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                ifExcluded \u003d true;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            if (address !\u003d null \u0026\u0026 !person.getAddress().toString().toLowerCase().contains(address)) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                ifExcluded \u003d true;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            if (skillList !\u003d null) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                for (String skill : skillList) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                    if (!person.isSkillExist(skill)) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                        ifExcluded \u003d true;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            if (posList !\u003d null) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                for (String pos : posList) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                    if (!person.isPositionExist(pos)) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                        ifExcluded \u003d true;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            if (endorseCount !\u003d null \u0026\u0026 Integer.parseInt(endorseCount) \u003e person.getEndorsementsNumber()) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                ifExcluded \u003d true;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            if (education !\u003d null \u0026\u0026 !person.getEducation().toString().toLowerCase().contains(education)) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                ifExcluded \u003d true;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            if (gpa !\u003d null \u0026\u0026 Float.parseFloat(gpa) \u003e Float.parseFloat(person.getGpa().toString())) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                ifExcluded \u003d true;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            if (ifExcluded) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                listToRemove.add(person);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        persons.removeAll(listToRemove);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * Makes the filtering process according to or command"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public void filterOr(String name, String phone, String email, String address, String[] skillList,"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                         String[] posList, String endorseCount, String gpa, String education) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        isFilterExist \u003d true;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        List\u003cPerson\u003e listToRemove \u003d new ArrayList();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        for (Person person : persons) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            boolean ifIncluded \u003d false;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            if (name !\u003d null \u0026\u0026 person.getName().toString().toLowerCase().contains(name)) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                ifIncluded \u003d true;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            if (phone !\u003d null \u0026\u0026 person.getPhone().toString().toLowerCase().contains(phone)) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                ifIncluded \u003d true;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            if (email !\u003d null \u0026\u0026 person.getEmail().toString().toLowerCase().contains(email)) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                ifIncluded \u003d true;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            if (address !\u003d null \u0026\u0026 person.getAddress().toString().toLowerCase().contains(address)) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                ifIncluded \u003d true;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            if (skillList !\u003d null) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                for (String skill : skillList) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                    if (person.isSkillExist(skill)) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                        ifIncluded \u003d true;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            if (posList !\u003d null) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                for (String pos : posList) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                    if (person.isPositionExist(pos)) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                        ifIncluded \u003d true;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            if (endorseCount !\u003d null \u0026\u0026 Integer.parseInt(endorseCount) \u003c\u003d person.getEndorsementsNumber()) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                ifIncluded \u003d true;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            if (education !\u003d null \u0026\u0026 person.getEducation().toString().toLowerCase().contains(education)) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                ifIncluded \u003d true;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            if (gpa !\u003d null \u0026\u0026 Float.parseFloat(gpa) \u003c\u003d Float.parseFloat(person.getGpa().toString())) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                ifIncluded \u003d true;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            if (!ifIncluded) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                listToRemove.add(person);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        persons.removeAll(listToRemove);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * Clears the filter"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public void clearFilter() {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        if (isFilterExist) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            for (Person person : allPersonsStorage) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                if (!persons.contains(person)) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                    persons.add(person);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            indicateModified();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        isFilterExist \u003d false;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * Reverses the filter if a filtering is available"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public void reverseFilter() {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        if (isFilterExist) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            List\u003cPerson\u003e listToRemove \u003d new ArrayList();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            for (Person person : allPersonsStorage) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                if (!persons.contains(person)) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                    persons.add(person);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                    listToRemove.add(person);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            persons.removeAll(listToRemove);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            indicateModified();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * gets filter info"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public boolean getFilterInfo() {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        return isFilterExist;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * sets filter info"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public void setFilterInfo(boolean status) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        isFilterExist \u003d status;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * gets sort info"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public boolean getSortInfo() {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        return sortingExist;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * sets sort info"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public void setSortInfo(boolean status) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        sortingExist \u003d status;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "     * Notifies listeners that the address book has been modified."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void indicateModified() {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(this);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public ObservableList\u003cPerson\u003e getAllPersonsStorageList() {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        return allPersonsStorage.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 248,
      "abwilli": 3,
      "-": 144,
      "DMGreenhouse": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     * Deletes all persons existing in the address book."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    void deleteAllPerson();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     * Adds the given person without clearing the filter."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    void addPersonWithFilter(Person person);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canUndoAddressBook();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has undone address book states to restore."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canRedoAddressBook();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    void undoAddressBook();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    void redoAddressBook();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    void commitAddressBook();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * Clears the filter and makes the printed address book equal to"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * the whole storage address book"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    void clearFilter();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * Reverses the filtered persons if there is a filter available"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    void reverseFilter();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * Applies filtering and chooses the persons that pass all the conditions"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    void filterAnd(String name, String phone, String email, String address, String[] skillList,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                   String[] posList, String endorseCount, String gpa, String education);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * Applies filtering and chooses the persons that pass at least one of the conditions"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    void filterOr(String name, String phone, String email, String address, String[] skillList,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                  String[] posList, String endorseCount, String gpa, String education);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * gets if filtering is active in current situation"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    boolean getFilterInfo();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * sets the filtering situation"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    void setFilterInfo(boolean status);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * gets if sorting is active in current situation"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    boolean getSortInfo();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * sets the sorting situation"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    void setSortInfo(boolean status);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selected person in the filtered person list."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * null if no person is selected."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the selected person in the filtered person list."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * null if no person is selected."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    Person getSelectedPerson();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the selected person in the filtered person list."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    void setSelectedPerson(Person person);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 43,
      "-": 130,
      "DMGreenhouse": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final VersionedAddressBook versionedAddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final SimpleObjectProperty\u003cPerson\u003e selectedPerson \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.addListener(this::ensureSelectedPersonIsValid);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.hasPerson(person);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.removePerson(target);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public void deleteAllPerson() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        versionedAddressBook.removeAllPerson();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.addPerson(person);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public void addPersonWithFilter(Person person) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        versionedAddressBook.addPersonWithFilter(person);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtering Processes \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public void clearFilter() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        versionedAddressBook.clearFilter();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        logger.info(\"All the filters are cleared.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public void reverseFilter() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        versionedAddressBook.reverseFilter();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        logger.info(\"All the filters are reversed.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public void filterAnd(String name, String phone, String email, String address, String[] skillList,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                          String[] posList, String endorseCount, String gpa, String education) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        versionedAddressBook.filterAnd(name, phone, email, address, skillList, posList, endorseCount, gpa, education);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        logger.info(\"Persons are filtered according to \u0027AND\u0027 condition.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public void filterOr(String name, String phone, String email, String address, String[] skillList,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                         String[] posList, String endorseCount, String gpa, String education) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        versionedAddressBook.filterOr(name, phone, email, address, skillList, posList, endorseCount, gpa, education);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        logger.info(\"Persons are filtered according to \u0027OR\u0027 condition.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public boolean getFilterInfo() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        return versionedAddressBook.getFilterInfo();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public void setFilterInfo(boolean status) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        versionedAddressBook.setFilterInfo(status);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public boolean getSortInfo() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        return versionedAddressBook.getSortInfo();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public void setSortInfo(boolean status) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        versionedAddressBook.setSortInfo(status);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Selected person \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        return selectedPerson;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person getSelectedPerson() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        return selectedPerson.getValue();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedPerson(Person person) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        if (person !\u003d null \u0026\u0026 !filteredPersons.contains(person)) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        selectedPerson.setValue(person);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ensures {@code selectedPerson} is a valid person in {@code filteredPersons}."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    private void ensureSelectedPersonIsValid(ListChangeListener.Change\u003c? extends Person\u003e change) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            if (selectedPerson.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "                // null is always a valid selected person, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean wasSelectedPersonReplaced \u003d change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedPerson.getValue());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            if (wasSelectedPersonReplaced) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "                // Update selectedPerson to its new value."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedPerson.getValue());"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "                selectedPerson.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean wasSelectedPersonRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "                    .anyMatch(removedPerson -\u003e selectedPerson.getValue().isSamePerson(removedPerson));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            if (wasSelectedPersonRemoved) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "                // Select the person that came before it in the list,"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "                // or clear the selection if there is no such person."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "                selectedPerson.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(selectedPerson.get(), other.selectedPerson.get());"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 48,
      "-": 235,
      "DMGreenhouse": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook extends Observable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    ObservableList\u003cPerson\u003e getAllPersonsStorageList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 2,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code AddressBook} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionedAddressBook extends AddressBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cReadOnlyAddressBook\u003e addressBookStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public VersionedAddressBook(ReadOnlyAddressBook initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStateList.add(new AddressBook(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves a copy of the current {@code AddressBook} state at the end of the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStateList.add(new AddressBook(this));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStateList.subList(currentStatePointer + 1, addressBookStateList.size()).clear();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the address book to its previous state."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(addressBookStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the address book to its previously undone state."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(addressBookStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code undo()} has address book states to undo."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code redo()} has address book states to redo."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return currentStatePointer \u003c addressBookStateList.size() - 1;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof VersionedAddressBook)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook otherVersionedAddressBook \u003d (VersionedAddressBook) other;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return super.equals(otherVersionedAddressBook)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookStateList.equals(otherVersionedAddressBook.addressBookStateList)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedAddressBook.currentStatePointer;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            super(\"Current state pointer at start of addressBookState list, unable to undo.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            super(\"Current state pointer at end of addressBookState list, unable to redo.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 4,
      "-": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Education.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charnixon"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charnixon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charnixon"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charnixon"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charnixon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charnixon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charnixon"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charnixon"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEducation(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charnixon"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charnixon"
        },
        "content": "public class Education {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charnixon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charnixon"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charnixon"
        },
        "content": "            \"Education should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charnixon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charnixon"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charnixon"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charnixon"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charnixon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charnixon"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charnixon"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charnixon"
        },
        "content": "    public final String university;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charnixon"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charnixon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charnixon"
        },
        "content": "     * Constructs a {@code Education}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charnixon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charnixon"
        },
        "content": "     * @param education A valid university."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charnixon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charnixon"
        },
        "content": "    public Education(String education) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charnixon"
        },
        "content": "        requireNonNull(education);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charnixon"
        },
        "content": "        checkArgument(isValidEducation(education), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charnixon"
        },
        "content": "        university \u003d education;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charnixon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charnixon"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charnixon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charnixon"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charnixon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charnixon"
        },
        "content": "    public static boolean isValidEducation(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charnixon"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charnixon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charnixon"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charnixon"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charnixon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charnixon"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charnixon"
        },
        "content": "        return university;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charnixon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "charnixon"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "charnixon"
        },
        "content": "    //unsure if needed bc people can have the same university???"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "charnixon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "charnixon"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "charnixon"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "charnixon"
        },
        "content": "                || (other instanceof Education // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charnixon"
        },
        "content": "                \u0026\u0026 university.equals(((Education) other).university)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "charnixon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "charnixon"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "charnixon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "charnixon"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "charnixon"
        },
        "content": "        return university.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "charnixon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "charnixon"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "charnixon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "charnixon": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Gpa.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charnixon"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charnixon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charnixon"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charnixon"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charnixon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charnixon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charnixon"
        },
        "content": " * Represents a Person\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charnixon"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidGpa(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charnixon"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "public class Gpa {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charnixon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charnixon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charnixon"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            \"Gpa values should only contain float numbers between 0.0 and 4.0 (American Grading System)\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    // public static final String VALIDATION_REGEX \u003d \"\\\\d{1,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charnixon"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charnixon"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charnixon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * Constructs a {@code Gpa}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charnixon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charnixon"
        },
        "content": "     * @param gpa A valid gpa value."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charnixon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public Gpa(String gpa) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charnixon"
        },
        "content": "        requireNonNull(gpa);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charnixon"
        },
        "content": "        checkArgument(isValidGpa(gpa), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charnixon"
        },
        "content": "        value \u003d gpa;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charnixon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charnixon"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charnixon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * Returns true if a given string is a valid gpa."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charnixon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charnixon"
        },
        "content": "    public static boolean isValidGpa(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            float value \u003d Float.parseFloat(test.trim().toLowerCase());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            if (value \u003c 0.0 || value \u003e 4.0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charnixon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charnixon"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charnixon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "charnixon"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "charnixon"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "charnixon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "charnixon"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "charnixon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "charnixon"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charnixon"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                || (other instanceof Gpa // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                \u0026\u0026 value.equals(((Gpa) other).value)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "charnixon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "charnixon"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "charnixon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "charnixon"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "charnixon"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "charnixon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "charnixon"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "charnixon"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "charnixon"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 18,
      "charnixon": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import java.util.LinkedHashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.model.tag.SkillsTag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charnixon"
        },
        "content": "    // new identity fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charnixon"
        },
        "content": "    private final Education education;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private final Gpa gpa;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charnixon"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charnixon"
        },
        "content": "    //private final Skills skills;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charnixon"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    private final LinkedHashSet\u003cSkillsTag\u003e tags \u003d new LinkedHashSet\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Education education, Gpa gpa, Address address,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                  Set\u003cSkillsTag\u003e tags) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charnixon"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charnixon"
        },
        "content": "        this.education \u003d education;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "charnixon"
        },
        "content": "        this.gpa \u003d gpa;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "charnixon"
        },
        "content": "    public Education getEducation() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "charnixon"
        },
        "content": "        return education;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "charnixon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "charnixon"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public Gpa getGpa() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "charnixon"
        },
        "content": "        return gpa;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "charnixon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "charnixon"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "abwilli"
        },
        "content": "    public Set\u003cSkillsTag\u003e getTags() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     * Returns the number of Skills a person has"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public int getSkillsNumber() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        return PersonUtil.getTagTypeNumber(getTags(), \"s\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     * Returns the number of Positions a person has"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public int getPositionsNumber() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        return PersonUtil.getTagTypeNumber(getTags(), \"p\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     * Returns the number of Endorsements a person has"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public int getEndorsementsNumber() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        return PersonUtil.getTagTypeNumber(getTags(), \"e\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * Checks if a tag as a String parameter is contained in one of the tags of that person"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public boolean isTagExist(String tag) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        for (SkillsTag skill : tags) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "abwilli"
        },
        "content": "            if (skill.tagName.toLowerCase().contains(tag) || skill.tagName.contains(tag)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * Checks if the string parameter is contained in one of the skills of the person"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public boolean isSkillExist(String tag) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        for (SkillsTag skill : tags) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            if (skill.toString().charAt(1) \u003d\u003d \u0027s\u0027) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                if (skill.toString().substring(3, skill.toString().length() - 1).trim().toLowerCase()"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                        .contains(tag.trim().toLowerCase())) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * Checks if the string parameter is contained in one of the positions of the person"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public boolean isPositionExist(String tag) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        for (SkillsTag pos : tags) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            if (pos.toString().charAt(1) \u003d\u003d \u0027p\u0027) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                if (pos.toString().substring(3, pos.toString().length() - 1).trim().toLowerCase()"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                        .contains(tag.trim().toLowerCase())) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * Checks if the object and the given tags are the same tags, order is not important"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private boolean isTagsEqual(Set\u003cSkillsTag\u003e compare) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        for (SkillsTag tag : tags) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            if (!compare.contains(tag)) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        for (SkillsTag tag : compare) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            if (!tags.contains(tag)) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                \u0026\u0026 isTagsEqual(otherPerson.getTags());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "charnixon"
        },
        "content": "        return Objects.hash(name, phone, email, education, address, tags);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "charnixon"
        },
        "content": "                .append(\" Education: \")"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "charnixon"
        },
        "content": "                .append(getEducation())"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                .append(\" Gpa: \")"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                .append(getGpa())"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     *  returns the Person\u0027s tags as lower case strings"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public String tagsToString() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        return getTags().toString().toLowerCase();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     *  returns the Person\u0027s name as a string"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public String nameToString() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        return getName().toString();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     *  returns the Person\u0027s first name as a string"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public String firstNameToString() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        String fullName \u003d nameToString();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        int firstSpace \u003d fullName.indexOf(\" \");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        return fullName.substring(0, firstSpace);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     * Returns just the surname of the Persons name as a string"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public String surnameToString() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        String fullName \u003d nameToString();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        int finalSpace \u003d fullName.lastIndexOf(\" \");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        return fullName.substring(finalSpace + 1);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     *  returns the Person\u0027s GPA as a string"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public String gpaToString() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        return getGpa().toString();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     *  returns the Person\u0027s education as a string in lowercase"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public String educationToString() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        return getEducation().toString().toLowerCase();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     *  returns the Person\u0027s positions as a string in lowercase"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public List\u003cString\u003e getPositionString() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        Set\u003cSkillsTag\u003e individualTags \u003d getTags();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        List\u003cString\u003e positionTagStrings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        Set\u003cSkillsTag\u003e positionTags \u003d PersonUtil.getTagsOfType(individualTags, \"p\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        for (SkillsTag tag : positionTags) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            positionTagStrings.add(tag.toString());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        return positionTagStrings;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 70,
      "charnixon": 18,
      "abwilli": 2,
      "-": 113,
      "DMGreenhouse": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/PersonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.model.tag.SkillsTag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": " * Space for general methods relating to the Person class"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     * counts the number of tags of a certain type denoted by the prefix"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     *  Accepted prefixes: \"s\" \u003d skills; \"p\" \u003d positions; \"e\" \u003d endorsements"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public static int getTagTypeNumber(Set\u003cSkillsTag\u003e individualTags, String prefix) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        for (SkillsTag tag : individualTags) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            String tagString \u003d tag.toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            //first element of string is \"[\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            if (tagString.substring(1, 2).equals(prefix)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                count +\u003d 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        return count;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     * returns a list of tags of a certain type denoted by the prefix"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     *  Accepted prefixes: \"s\" \u003d skills; \"p\" \u003d positions; \"e\" \u003d endorsements"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public static Set\u003cSkillsTag\u003e getTagsOfType(Set\u003cSkillsTag\u003e individualTags, String prefix) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        Set\u003cSkillsTag\u003e tagsOfType \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        for (SkillsTag tag : individualTags) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            String tagString \u003d tag.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            //first element of string is \"[\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            if (tagString.substring(1, 2).equals(prefix)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                tagsOfType.add(tag);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        return tagsOfType;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 2,
      "DMGreenhouse": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * Returns the size of the current selected address book"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * Removes all the persons from the list taken as input"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * @param personList"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public void removeAll(List\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        for (Person person : personList) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            remove(person);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * sets all the persons from the list taken as input"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 23,
      "-": 136
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/SkillsTag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abwilli"
        },
        "content": " * Represents a SkillsTag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abwilli"
        },
        "content": "public class SkillsTag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abwilli"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{ASCII}][\\\\p{ASCII} ]*\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abwilli"
        },
        "content": "    public final String tagColor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abwilli"
        },
        "content": "    public final String tagType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abwilli"
        },
        "content": "     * Constructs a {@code SkillsTag}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abwilli"
        },
        "content": "     * @param type"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abwilli"
        },
        "content": "    public SkillsTag(String tagName, String type) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        this.tagType \u003d type;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        if (type.equals(\"skill\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "abwilli"
        },
        "content": "            //skill tag"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "abwilli"
        },
        "content": "            this.tagColor \u003d \"pink\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "abwilli"
        },
        "content": "            this.tagName \u003d \"s:\" + tagName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        } else if (type.equals(\"pos\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "abwilli"
        },
        "content": "            //position tag"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "abwilli"
        },
        "content": "            this.tagColor \u003d \"yellow\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "abwilli"
        },
        "content": "            this.tagName \u003d \"p:\" + tagName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "abwilli"
        },
        "content": "            //endorsement tag"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "abwilli"
        },
        "content": "            this.tagColor \u003d \"teal\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "abwilli"
        },
        "content": "            this.tagName \u003d \"e:\" + tagName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "abwilli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "abwilli"
        },
        "content": "    public SkillsTag(String tagName) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        this.tagColor \u003d null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        this.tagType \u003d null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "abwilli"
        },
        "content": "                || (other instanceof SkillsTag // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "abwilli"
        },
        "content": "                \u0026\u0026 tagName.equals(((SkillsTag) other).tagName)); // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abwilli": 33,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abwilli"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abwilli"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.model.person.Education;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.model.person.Gpa;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abwilli"
        },
        "content": "import seedu.address.model.tag.SkillsTag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                    new Education(\"NUS\"), new Gpa(\"3\"), new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abwilli"
        },
        "content": "                    getTagSet(Arrays.asList(\"PHP\", \"Java\", \"Debugging\", \"C#\", \"Internet Protocols\"), Arrays.asList("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abwilli"
        },
        "content": "                            \"UI Developer\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abwilli"
        },
        "content": "                            \"Advanced Graphics Designer\"), Arrays.asList(\"Steve Jobs\", \"Mark Cuban\"))),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                    new Education(\"NUS\"), new Gpa(\"3\"), new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "abwilli"
        },
        "content": "                    getTagSet(Arrays.asList(\"HTML\", \"JavaScript\", \"C++\", \"Perl\", \"Linux\", \"Task Management\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abwilli"
        },
        "content": "                            Arrays.asList(\"Front End Specialist\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "abwilli"
        },
        "content": "                            \"Software Engineer\"), Arrays.asList(\"Mark Zuckerberg\"))),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                    new Education(\"NUS\"), new Gpa(\"3\"), new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "abwilli"
        },
        "content": "                    getTagSet(Arrays.asList(\"C++\", \"Java\", \"Swift\", \"Certificates\", \"Networking\"), Arrays.asList("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "abwilli"
        },
        "content": "                            \"Cyber Crime \"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "abwilli"
        },
        "content": "                            Arrays.asList(\"Barack Obama\"))),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                    new Education(\"NUS\"), new Gpa(\"3\"), new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "abwilli"
        },
        "content": "                    getTagSet(Arrays.asList(\"Python\", \"SQL\", \"Database Administration\", \"Project Management\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "abwilli"
        },
        "content": "                            \"Software Testing\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                            Arrays.asList(\"Databases\", \"Systems \" + \"Analyst\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "abwilli"
        },
        "content": "                            Arrays.asList(\"Bill Gates\", \"Frederick Brooks\"))),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                    new Education(\"NUS\"), new Gpa(\"3\"), new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "abwilli"
        },
        "content": "                    getTagSet(Arrays.asList(\"Java\", \"JavaScript\", \"Excel\", \"Hadoop\", \"Market Analysis\"), Arrays.asList("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                            \"Software \", \"Engineer\", \"Financial Analyst\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                            Arrays.asList(\"Jeff Bezos\", \"Warren Buffett\"))),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "abwilli"
        },
        "content": "            new Person(new Name(\"Susan McDonald\"), new Phone(\"35810495\"), new Email(\"susanM@gmail.com\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "abwilli"
        },
        "content": "                    new Education(\"Yale\"), new Gpa(\"4\"), new Address(\"32 Independence Way, New York NY\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                    getTagSet(Arrays.asList(\"Java\", \"HTML\", \"CSS\", \"JavaScript\", \"Swift\"), Arrays.asList(\"Front \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                            + \"End Specialist\", \"UI Developer\", \"Project Manager\"), Arrays.asList(\"Jeff Bezos\"))),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "abwilli"
        },
        "content": "            new Person(new Name(\"Tony Stark\"), new Phone(\"92874639\"), new Email(\"tonys@avengers.com\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "abwilli"
        },
        "content": "                    new Education(\"MIT\"), new Gpa(\"4\"), new Address(\"911 Avengers Way, New York NY\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "abwilli"
        },
        "content": "                    getTagSet(Arrays.asList(\"Java\", \"Electrical Engineering\", \"MATLab\", \"Software Development\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "abwilli"
        },
        "content": "                            \"Leadership\", \"Presentation Skills\"), Arrays.asList(\"Software Engineer\", \"Project Manager\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                            Arrays.asList(\"Stan Lee\"))),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "abwilli"
        },
        "content": "            new Person(new Name(\"Bruce Wayne\"), new Phone(\"92875639\"), new Email(\"bruce@wayne.com\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "abwilli"
        },
        "content": "                    new Education(\"Stanford\"), new Gpa(\"4\"), new Address(\"1 Wayne Manor, New York NY\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "abwilli"
        },
        "content": "                    getTagSet(Arrays.asList(\"Hardware Testing\", \"Business Analysis\", \"Finance\", \"Cyber Crime\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                            Arrays.asList(\"Project Consultant\", \"Crime Analyst\"), Arrays.asList(\"Thomas Wayne\"))),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "abwilli"
        },
        "content": "            new Person(new Name(\"Peter Parker\"), new Phone(\"92874339\"), new Email(\"peterp@gmail.com\"),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                    new Education(\"Brooklyn High School\"), new Gpa(\"4\"), new Address(\"99 Sunflower Dr, Brooklyn \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                    + \"NY\"), getTagSet(Arrays.asList(\"Electrical Engineering\", \"Java\", \"Python\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                            \"Design\", \"Photography\"), Arrays.asList(\"Advanced Graphics Designer\", \"Software \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                            + \"Testing\"), Arrays.asList(\"Stan Lee\"))),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "abwilli"
        },
        "content": "            new Person(new Name(\"Claire Smith\"), new Phone(\"98765432\"), new Email(\"claireS@gmail.com\"),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "abwilli"
        },
        "content": "                    new Education(\"Oxford\"), new Gpa(\"3\"), new Address(\"12 Biscuits Way, Oxford\"),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                    getTagSet(Arrays.asList(\"C#\", \"PHP\", \"Linux\", \"C++\", \"Finance\"), Arrays.asList(\"Systems \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                                    + \"Analyst\"), Arrays.asList(\"Elon Musk\"))),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                    new Education(\"NUS\"), new Gpa(\"3\"), new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "abwilli"
        },
        "content": "                    getTagSet(Arrays.asList(\"Swift\", \"Java\", \"Linux\", \"Operating Systems\", \"Graphic Design\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                            \"Hardware\"), Arrays.asList(\"Project Consultant\"), Arrays.asList(\"Steve Jobs\")))"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "abwilli"
        },
        "content": "    public static Set\u003cSkillsTag\u003e getTagSet(List\u003cString\u003e skills, List\u003cString\u003e positions, List\u003cString\u003e endorsements) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        final Set\u003cSkillsTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        if (skills !\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "abwilli"
        },
        "content": "            for (String skill : skills) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "abwilli"
        },
        "content": "                tagSet.add(new SkillsTag(skill, \"skill\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "abwilli"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        if (positions !\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "abwilli"
        },
        "content": "            for (String pos : positions) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "abwilli"
        },
        "content": "                tagSet.add(new SkillsTag(pos, \"pos\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "abwilli"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (endorsements !\u003d null) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "abwilli"
        },
        "content": "            for (String end : endorsements) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "abwilli"
        },
        "content": "                tagSet.add(new SkillsTag(end, \"endorse\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "abwilli"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 14,
      "abwilli": 42,
      "-": 45,
      "DMGreenhouse": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.model.person.Education;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.model.person.Gpa;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abwilli"
        },
        "content": "import seedu.address.model.tag.SkillsTag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charnixon"
        },
        "content": "    private final String education;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charnixon"
        },
        "content": "    private final String gpa;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                             @JsonProperty(\"education\") String education, @JsonProperty(\"gpa\") String gpa,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                             @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "charnixon"
        },
        "content": "        this.education \u003d education;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "charnixon"
        },
        "content": "        this.gpa \u003d gpa;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "charnixon"
        },
        "content": "        education \u003d source.getEducation().university;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        gpa \u003d source.getGpa().value;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        final List\u003cSkillsTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "charnixon"
        },
        "content": "        if (gpa \u003d\u003d null) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Gpa.class.getSimpleName()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "charnixon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        if (!Gpa.isValidGpa(gpa)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "charnixon"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "charnixon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        final Gpa modelGpa \u003d new Gpa(gpa);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "charnixon"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "charnixon"
        },
        "content": "        if (education \u003d\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                    Education.class.getSimpleName()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "charnixon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "charnixon"
        },
        "content": "        if (!Education.isValidEducation(education)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "charnixon"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "charnixon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "charnixon"
        },
        "content": "        final Education modelEducation \u003d new Education(education);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "charnixon"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                    Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        final Set\u003cSkillsTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelEducation, modelGpa, modelAddress, modelTags);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 12,
      "abwilli": 3,
      "charnixon": 17,
      "-": 103
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abwilli"
        },
        "content": "import seedu.address.model.tag.SkillsTag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abwilli"
        },
        "content": " * Jackson-friendly version of {@link SkillsTag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abwilli"
        },
        "content": "    private final String tagType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        String parsed \u003d tagName.substring(2);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        String prefix \u003d tagName.substring(0, 1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        this.tagName \u003d parsed;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        if (prefix.equals(\"s\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abwilli"
        },
        "content": "            this.tagType \u003d \"skill\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        } else if (prefix.equals(\"p\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abwilli"
        },
        "content": "            this.tagType \u003d \"pos\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "abwilli"
        },
        "content": "            this.tagType \u003d \"endorse\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "abwilli"
        },
        "content": "     * Converts a given {@code SkillsTag} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "abwilli"
        },
        "content": "    public JsonAdaptedTag(SkillsTag source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        this.tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        this.tagType \u003d source.tagType;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "abwilli"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code SkillsTag} object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "abwilli"
        },
        "content": "    public SkillsTag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        if (!SkillsTag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "abwilli"
        },
        "content": "            throw new IllegalValueException(SkillsTag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        return new SkillsTag(tagName, tagType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abwilli": 23,
      "-": 37,
      "DMGreenhouse": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final URL DEFAULT_PAGE \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(MainApp.class.getResource(FXML_FILE_FOLDER + \"default.html\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public static final String SEARCH_PAGE_URL \u003d \"https://www.linkedin.com/search/results/all/?keywords\u003d\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    private static final String DELIM \u003d \"%20\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanel(ObservableValue\u003cPerson\u003e selectedPerson) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // Load person page when selected person changes."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        selectedPerson.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                loadDefaultPage();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            loadPersonPage(newValue);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     * Loads the linked in page, making a search for the person with their name and one of their positions."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     * If no positions are held then just the name is searched for"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadPersonPage(Person person) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        String personsPosition;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        String personsName \u003d person.nameToString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        String personsModifiedName \u003d trimToSearchFormat(personsName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        List\u003cString\u003e positions \u003d person.getPositionString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        if (positions.isEmpty()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            personsPosition \u003d \"\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            personsPosition \u003d trimToSearchFormat(positions.get(0));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        String searchString1 \u003d SEARCH_PAGE_URL + personsModifiedName + DELIM + personsPosition;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        loadPage(searchString1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().load(url));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(DEFAULT_PAGE.toExternalForm());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     * removes p:, [, ] and , from string and replaces spaces with a certain delimiter"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    private String trimToSearchFormat(String input) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        String output \u003d input.replace(\"p:\", \"\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                .replace(\"[\", \"\")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                .replace(\"]\", \"\")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                .replace(\",\", \"\")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                .replace(\" \", DELIM);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 65,
      "DMGreenhouse": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        //person.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        formatTags(person);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "abwilli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "abwilli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "abwilli"
        },
        "content": "\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "abwilli"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "abwilli"
        },
        "content": "     * Method to get tag color from each tag element associated with Person"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "abwilli"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e faf83f1c6d7509fcadcb3dfb0120b740ba2e574b"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "abwilli"
        },
        "content": "     * Change Tag color"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "abwilli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "abwilli"
        },
        "content": "    private void formatTags(Person person) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        person.getTags().forEach(tag -\u003e {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "abwilli"
        },
        "content": "            Label tLabel \u003d new Label(tag.tagName.substring(2));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "abwilli"
        },
        "content": "            tLabel.getStyleClass().add(tag.tagColor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "abwilli"
        },
        "content": "            tags.getChildren().add(tLabel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        });"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abwilli": 18,
      "-": 69
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "abwilli"
        },
        "content": "#tags .teal {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "abwilli"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "abwilli"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "abwilli"
        },
        "content": "}"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "abwilli"
        },
        "content": "#tags .red {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "abwilli"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "abwilli"
        },
        "content": "    -fx-background-color: red;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "abwilli"
        },
        "content": "}"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "abwilli"
        },
        "content": "#tags .yellow {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "abwilli"
        },
        "content": "    -fx-background-color: #fcc602;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "abwilli"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "abwilli"
        },
        "content": "}"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "abwilli"
        },
        "content": "}"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "abwilli"
        },
        "content": "#tags .pink {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "abwilli"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "abwilli"
        },
        "content": "    -fx-background-color: #cca9b4;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "abwilli"
        },
        "content": "}"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "abwilli": 22,
      "-": 350
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/duplicatePersonAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"alice@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    \"education\" : \"NUS\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    \"gpa\" : \"4.0\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\": [ \"friends\" ]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"pauline@example.com\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    \"education\" : \"NUS\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    \"gpa\" : \"4.0\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 4,
      "-": 14
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/invalidPersonAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Hans Muster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"invalid@email!3e\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    \"education\" : \"NUS\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    \"gpa\" : \"4.0\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 2,
      "-": 8
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/typicalPersonsAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"_comment\": \"AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"94351253\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"alice@example.com\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    \"education\" : \"NUS\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    \"gpa\" : \"3.4\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    \"tagged\" : [ \"s:C++\", \"s:Debugging\", \"p:Software Engineer\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Benson Meier\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"98765432\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"johnd@example.com\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    \"education\" : \"NTU\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    \"gpa\" : \"3.1\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"311, Clementi Ave 2, #02-25\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    \"tagged\" : [ \"s:C++\", \"s:Debugging\", \"s:JavaScript\", \"p:Website Developer\" ]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"95352563\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"heinz@example.com\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    \"education\" : \"NTU\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    \"gpa\" : \"3.2\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"wall street\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    \"tagged\" : [ \"s:Python\", \"s:Photography\", \"s:Cyber Crime\", \"s:Finance\", \"s:JavaScript\", \"p:Systems Analyst\", \"p:UI Developer\"]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"87652533\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"cornelia@example.com\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    \"education\" : \"NUS\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    \"gpa\" : \"2.6\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"10th street\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    \"tagged\" : [ \"s:C++\", \"s:Debugging\", \"s:Linux\", \"e:Bill Gates\", \"e:Mark Cuban\", \"e:Elon Musk\", \"e:Barak Obama\", \"p:UI Developer\" ]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Elle Meyer\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482224\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"werner@example.com\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    \"education\" : \"Harvard\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    \"gpa\" : \"1.3\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"michegan ave\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    \"tagged\" : [ \"s:C++\", \"s:C#\", \"s:Java\", \"s:excel\", \"e:Elon Musk\", \"e:Mark Cuban\" ]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482427\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"lydia@example.com\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    \"education\" : \"HARVARD\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    \"gpa\" : \"4.0\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"little tokyo\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    \"tagged\" : [ \"s:C++\", \"s:Java\", \"s:MATlab\", \"p:Civil Servant\", \"p:Project Manager\", \"e:Stan Lee\", \"e:Barak Obama\" ]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"George Best\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482442\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"anna@example.com\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    \"education\" : \"NUS\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    \"gpa\" : \"0.0\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"4th street\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    \"tagged\" : [ \"s:Linux\", \"s:PHP\", \"p:Data Analyst\", \"e:Mark Zuckerberg\" ]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 4,
      "-": 39,
      "DMGreenhouse": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EDUCATION_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GPA_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                + EDUCATION_DESC_AMY + GPA_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withSkills().build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(CommandException.class, addCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(addCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 3,
      "-": 187,
      "DMGreenhouse": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        public void addPersonWithFilter(Person person) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        public void filterAnd(String name, String phone, String email, String address, String[] skillList,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                              String[] posList, String endorseCount, String gpa, String education) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        public void filterOr(String name, String phone, String email, String address, String[] skillList,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                              String[] posList, String endorseCount, String gpa, String education) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        public void reverseFilter() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        public boolean getFilterInfo() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        public void setFilterInfo(boolean status) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        public boolean getSortInfo() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        public void setSortInfo(boolean status) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        public void deleteAllPerson() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        public void clearFilter() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        public Person getSelectedPerson() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setSelectedPerson(Person person) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 52,
      "-": 253
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EDUCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GPA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abwilli"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SKILL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public static final String VALID_GPA_AMY \u003d \"3.2\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public static final String VALID_GPA_BOB \u003d \"2.8\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public static final String VALID_EDUCATION_AMY \u003d \"NUS\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public static final String VALID_EDUCATION_BOB \u003d \"NTU\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public static final String VALID_SKILL_JAVA \u003d \"Java\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public static final String VALID_SKILL_PYTHON \u003d \"Python\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public static final String GPA_DESC_AMY \u003d \" \" + PREFIX_GPA + VALID_GPA_AMY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public static final String GPA_DESC_BOB \u003d \" \" + PREFIX_GPA + VALID_GPA_BOB;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public static final String EDUCATION_DESC_AMY \u003d \" \" + PREFIX_EDUCATION + VALID_EDUCATION_AMY;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public static final String EDUCATION_DESC_BOB \u003d \" \" + PREFIX_EDUCATION + VALID_EDUCATION_BOB;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public static final String SKILL_DESC_PYTHON \u003d \" \" + PREFIX_SKILL + VALID_SKILL_PYTHON;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public static final String SKILL_DESC_JAVA \u003d \" \" + PREFIX_SKILL + VALID_SKILL_JAVA;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "abwilli"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_SKILL + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                .withSkills(VALID_SKILL_PYTHON).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                .withSkills(VALID_SKILL_JAVA, VALID_SKILL_PYTHON).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult expectedCommandResult, Model expectedModel) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandHistory, CommandResult, Model)}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, actualCommandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedSelectedPerson \u003d actualModel.getSelectedPerson();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedSelectedPerson, actualModel.getSelectedPerson());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(firstPerson);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 10,
      "abwilli": 2,
      "-": 145,
      "DMGreenhouse": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SKILL_JAVA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.model.tag.SkillsTag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                .withSkills(VALID_SKILL_JAVA).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // to order both skills correctly in the expectedModel and model"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String[] skillsToBuild \u003d new String[5];"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        for (SkillsTag tag : editedPerson.getTags()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            skillsToBuild[i] \u003d tag.toString().substring(1, tag.toString().length() - 1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withSkills(skillsToBuild[0], skillsToBuild[1], skillsToBuild[2],"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                        skillsToBuild[3], skillsToBuild[4]).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "               new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * Edit filtered list where index is larger than size of persons in AddressBook"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public void execute_invalidPersonIndexPersonList_failure() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getAddressBook().getPersonList().size() + 1);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e first person edited"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person edited again"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 15,
      "-": 205,
      "DMGreenhouse": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SKILL_JAVA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withSkills(VALID_SKILL_JAVA).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 56,
      "DMGreenhouse": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FilterCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SKILL_JAVA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.logic.commands.sortmethods.SortName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.logic.commands.sortmethods.SortUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.logic.parser.SortWord;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.model.tag.SkillsTag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": " * Contains integration tests for FilterCommand."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": " * Checks the usage of filter command with edit, undo, redo, add, delete, sort"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": " * For each test except the last one the order is as follows:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": " * 1- filter and/or"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": " * 2- filter and/or"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": " * 3- tested other command"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": " * 4- filter reverse"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": " * 5- tested other command"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": " * 6- filter clear"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": " * 7- tested other command"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": " * 8- filter reverse"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "public class FilterCommandIntegrationTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private static final int TYPE_CLEAR \u003d 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private static final int TYPE_OR \u003d 1;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private static final int TYPE_AND \u003d 2;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private static final int TYPE_REVERSE \u003d 3;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * Indexes in the criterion array:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * 1- Name"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * 2- Phone"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * 3- Email"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * 4- Address"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * 5- Skills"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * 6- Positions"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * 7- Gpa"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * 8- Education"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * 9- Endorsement"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private String[] criterionClearAndReverse \u003d {null, null, null, null, null, null, null, null, null};"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private String[] criterion1 \u003d {null, null, null, null, \"Java, C++\", null, \"2.6\", \"NUS\", null};"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private String[] criterion2 \u003d {\"e\", \"5\", null, null, null, null, null, null, \"2\"};"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private String[] criterion3 \u003d {null, null, \"a@\", \"street\", null, \"Manager, Developer\", null, null, null};"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * Divides the tags string to an array with separated tags"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private String[] divideTagsFromString(String tags) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        if (tags \u003d\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        return tags.trim().split(\", \");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public void execute_filterWithUndoAndRedo() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // filtering takes place 2 times"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        FilterCommand commandFilter \u003d new FilterCommand(criterion1, TYPE_AND);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.filterAnd(criterion1[0], criterion1[1], criterion1[2], criterion1[3],"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                divideTagsFromString(criterion1[4]), divideTagsFromString(criterion1[5]),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                criterion1[8], criterion1[6], criterion1[7]);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandFilter, model, commandHistory,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommand.MESSAGE_FILTER_PERSON_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandFilter \u003d new FilterCommand(criterion2, TYPE_OR);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.filterOr(criterion2[0], criterion2[1], criterion2[2], criterion2[3],"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                divideTagsFromString(criterion1[4]), divideTagsFromString(criterion1[5]),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                criterion2[8], criterion2[6], criterion2[7]);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandFilter, model, commandHistory,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommand.MESSAGE_FILTER_PERSON_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // undoing takes place 3 times"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // redoing takes place"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // filter reverse takes place"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandFilter \u003d new FilterCommand(criterionClearAndReverse, TYPE_REVERSE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.reverseFilter();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandFilter, model, commandHistory,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommand.MESSAGE_FILTER_REVERSE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // undo takes place"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // redo takes place"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // filter clear takes place 2 times"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandFilter \u003d new FilterCommand(criterionClearAndReverse, TYPE_CLEAR);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.clearFilter();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandFilter, model, commandHistory,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommand.MESSAGE_CLEAR_FILTER_PERSON_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandFilter \u003d new FilterCommand(criterionClearAndReverse, TYPE_CLEAR);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandFailure(commandFilter, model, commandHistory, FilterCommand.MESSAGE_NO_FILTER_TO_CLEAR);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // undo takes place"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // redo takes place"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // filter reverse takes place"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandFilter \u003d new FilterCommand(criterionClearAndReverse, TYPE_REVERSE);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.reverseFilter();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandFailure(commandFilter, model, commandHistory, FilterCommand.MESSAGE_NO_FILTER_TO_REVERSE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public void execute_filterWithEdit() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // filtering takes place"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        FilterCommand commandFilter \u003d new FilterCommand(criterion3, TYPE_OR);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.filterOr(criterion3[0], criterion3[1], criterion3[2], criterion3[3],"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                divideTagsFromString(criterion3[4]), divideTagsFromString(criterion3[5]),"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                criterion3[8], criterion3[6], criterion3[7]);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandFilter, model, commandHistory,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommand.MESSAGE_FILTER_PERSON_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // edit all fields specified successful"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        EditCommand.EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // edit outOfBoundsException failure"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder()"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                .withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // filter reverse takes place"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandFilter \u003d new FilterCommand(criterionClearAndReverse, TYPE_REVERSE);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.reverseFilter();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandFilter, model, commandHistory,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommand.MESSAGE_FILTER_REVERSE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // edit no fields specified successful"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditCommand.EditPersonDescriptor());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // edit duplicate person failure"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // filter clear takes place 2 times"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandFilter \u003d new FilterCommand(criterionClearAndReverse, TYPE_CLEAR);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.clearFilter();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandFilter, model, commandHistory,"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommand.MESSAGE_CLEAR_FILTER_PERSON_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandFilter \u003d new FilterCommand(criterionClearAndReverse, TYPE_CLEAR);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandFailure(commandFilter, model, commandHistory, FilterCommand.MESSAGE_NO_FILTER_TO_CLEAR);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // edit some fields specified successful"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                .withSkills(VALID_SKILL_JAVA).build();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String[] skillsToBuild \u003d new String[5];"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        for (SkillsTag tag : editedPerson.getTags()) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            skillsToBuild[i] \u003d tag.toString().substring(1, tag.toString().length() - 1);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withSkills(skillsToBuild[0], skillsToBuild[1], skillsToBuild[2],"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                        skillsToBuild[3], skillsToBuild[4]).build();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // filter reverse takes place"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandFilter \u003d new FilterCommand(criterionClearAndReverse, TYPE_REVERSE);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.reverseFilter();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandFailure(commandFilter, model, commandHistory, FilterCommand.MESSAGE_NO_FILTER_TO_REVERSE);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public void execute_filterWithDelete() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // filtering takes place"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        FilterCommand commandFilter \u003d new FilterCommand(criterion3, TYPE_OR);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.filterOr(criterion3[0], criterion3[1], criterion3[2], criterion3[3],"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                divideTagsFromString(criterion3[4]), divideTagsFromString(criterion3[5]),"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                criterion3[8], criterion3[6], criterion3[7]);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandFilter, model, commandHistory,"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommand.MESSAGE_FILTER_PERSON_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // delete takes place 3 times"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        personToDelete \u003d model.getFilteredPersonList().get(INDEX_THIRD_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        deleteCommand \u003d new DeleteCommand(INDEX_THIRD_PERSON);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // filter reverse takes place"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandFilter \u003d new FilterCommand(criterionClearAndReverse, TYPE_REVERSE);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.reverseFilter();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandFilter, model, commandHistory,"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommand.MESSAGE_FILTER_REVERSE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // delete takes place 2 times"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        personToDelete \u003d model.getFilteredPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        deleteCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // filter clear takes place 2 times"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandFilter \u003d new FilterCommand(criterionClearAndReverse, TYPE_CLEAR);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.clearFilter();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandFilter, model, commandHistory,"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommand.MESSAGE_CLEAR_FILTER_PERSON_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandFilter \u003d new FilterCommand(criterionClearAndReverse, TYPE_CLEAR);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandFailure(commandFilter, model, commandHistory, FilterCommand.MESSAGE_NO_FILTER_TO_CLEAR);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // delete takes place 2 times"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // filter reverse takes place"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandFilter \u003d new FilterCommand(criterionClearAndReverse, TYPE_REVERSE);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.reverseFilter();"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandFailure(commandFilter, model, commandHistory, FilterCommand.MESSAGE_NO_FILTER_TO_REVERSE);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public void execute_filterWithAdd() {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // filtering takes place 2 times"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        FilterCommand commandFilter \u003d new FilterCommand(criterion2, TYPE_AND);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.filterAnd(criterion2[0], criterion2[1], criterion2[2], criterion2[3],"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                divideTagsFromString(criterion2[4]), divideTagsFromString(criterion2[5]),"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                criterion2[8], criterion2[6], criterion2[7]);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandFilter, model, commandHistory,"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommand.MESSAGE_FILTER_PERSON_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // filtering reverse takes place"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandFilter \u003d new FilterCommand(criterionClearAndReverse, TYPE_REVERSE);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.reverseFilter();"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandFilter, model, commandHistory,"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommand.MESSAGE_FILTER_REVERSE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // valid addition takes place"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        Person validPerson \u003d HOON;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model, commandHistory,"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // invalid addition takes place"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, commandHistory,"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // filtering reverse takes place"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandFilter \u003d new FilterCommand(criterionClearAndReverse, TYPE_REVERSE);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.reverseFilter();"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandFailure(commandFilter, model, commandHistory, FilterCommand.MESSAGE_NO_FILTER_TO_REVERSE);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // filter clear takes place"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandFilter \u003d new FilterCommand(criterionClearAndReverse, TYPE_CLEAR);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandFailure(commandFilter, model, commandHistory, FilterCommand.MESSAGE_NO_FILTER_TO_CLEAR);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public void execute_filterWithSortName() {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // filter takes place - success"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        FilterCommand commandFilter \u003d new FilterCommand(criterion1, TYPE_OR);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.filterOr(criterion1[0], criterion1[1], criterion1[2], criterion1[3],"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                divideTagsFromString(criterion1[4]), divideTagsFromString(criterion1[5]),"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                criterion1[8], criterion1[6], criterion1[7]);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandFilter, model, commandHistory,"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommand.MESSAGE_FILTER_PERSON_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandFilter \u003d new FilterCommand(criterion3, TYPE_AND);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.filterAnd(criterion3[0], criterion3[1], criterion3[2], criterion3[3],"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                divideTagsFromString(criterion3[4]), divideTagsFromString(criterion3[5]),"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                criterion3[8], criterion3[6], criterion3[7]);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandFilter, model, commandHistory, FilterCommand.MESSAGE_FILTER_PERSON_SUCCESS,"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // sorting by names takes place - success"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String expectedMessage \u003d \"Sorted all persons by name\";"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        SortWord type \u003d new SortWord(\"name\");"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        SortCommand commandSort \u003d new SortCommand(type);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        SortName sortName \u003d new SortName(expectedModel.getAddressBook().getPersonList());"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        List\u003cPerson\u003e sortedPersons \u003d sortName.getList();"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.deleteAllPerson();"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        for (Person newPerson : sortedPersons) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            expectedModel.addPersonWithFilter(newPerson);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandSort, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // filter reverse takes place - success"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandFilter \u003d new FilterCommand(criterionClearAndReverse, TYPE_REVERSE);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.reverseFilter();"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandFilter, model, commandHistory, FilterCommand.MESSAGE_FILTER_REVERSE_SUCCESS,"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // sorting by reverse names takes place - success"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedMessage \u003d \"Sorted all persons by reverse name\";"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        type \u003d new SortWord(\"reverse name\");"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandSort \u003d new SortCommand(type);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        sortName \u003d new SortName(expectedModel.getAddressBook().getPersonList());"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        sortedPersons \u003d SortUtil.reversePersonList(sortName.getList());"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.deleteAllPerson();"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        for (Person newPerson : sortedPersons) {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            expectedModel.addPersonWithFilter(newPerson);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandSort, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // filter clear takes place - success"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandFilter \u003d new FilterCommand(criterionClearAndReverse, TYPE_CLEAR);"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.clearFilter();"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandFilter, model, commandHistory,"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommand.MESSAGE_CLEAR_FILTER_PERSON_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // filter clear takes place - failure"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandFilter \u003d new FilterCommand(criterionClearAndReverse, TYPE_CLEAR);"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandFailure(commandFilter, model, commandHistory, FilterCommand.MESSAGE_NO_FILTER_TO_CLEAR);"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // sort by names takes place"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedMessage \u003d \"Sorted all persons by name\";"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        type \u003d new SortWord(\"name\");"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandSort \u003d new SortCommand(type);"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        sortName \u003d new SortName(expectedModel.getAddressBook().getPersonList());"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        sortedPersons \u003d sortName.getList();"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.deleteAllPerson();"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        for (Person newPerson : sortedPersons) {"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            expectedModel.addPersonWithFilter(newPerson);"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandSort, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // filter reverse takes place - failure"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandFilter \u003d new FilterCommand(criterionClearAndReverse, TYPE_REVERSE);"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        expectedModel.reverseFilter();"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandFailure(commandFilter, model, commandHistory, FilterCommand.MESSAGE_NO_FILTER_TO_REVERSE);"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public void execute_filterWithFindCommand() {"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        //TODO: add a testcase with find command"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public void execute_filterWithSelectCommand() {"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        //TODO: add a testcase with select command"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public void execute_allCommands() {"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        //TODO: add a long testcase in which every important command is used"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 474
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FilterCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.GEORGE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": " *Contains unit tests for FilterCommand."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "public class FilterCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private Model model2 \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private CommandHistory commandHistory2 \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private Model modelOr \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private Model modelAnd \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * Explanation of process numbers:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * 0 -\u003e clear"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * 1 -\u003e or"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * 2 -\u003e and"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * 3 -\u003e reverse"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * Indexes in the criterion array:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * 1- Name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * 2- Phone"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * 3- Email"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * 4- Address"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * 5- Skills"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * 6- Positions"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * 7- Gpa"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * 8- Education"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * 9- Endorsement"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public void execute_oneConditionAtOneFilter_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // name condition - 2 peoples are listed: DANIEL, ELLE"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String[] criterion \u003d {\"el\", null, null, null, null, null, null, null, null};"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        FilterCommand commandOr \u003d new FilterCommand(criterion, 1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        FilterCommand commandAnd \u003d new FilterCommand(criterion, 2);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd.filterAnd(criterion[0], null, null, null, null,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                null, null, null, null);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertEquals(Arrays.asList(DANIEL, ELLE), modelAnd.getFilteredPersonList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd.commitAddressBook();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandAnd, model, commandHistory, FilterCommand.MESSAGE_FILTER_PERSON_SUCCESS, modelAnd);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr.filterOr(criterion[0], null, null, null, null,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                null, null, null, null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertEquals(Arrays.asList(DANIEL, ELLE), modelOr.getFilteredPersonList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr.commitAddressBook();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandOr, model, commandHistory, FilterCommand.MESSAGE_FILTER_PERSON_SUCCESS, modelOr);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // phone condition - 1 person listed: ALICE"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        criterion[0] \u003d null;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        criterion[1] \u003d \"9435\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandOr \u003d new FilterCommand(criterion, 1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandAnd \u003d new FilterCommand(criterion, 2);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd.filterAnd(null, criterion[1], null, null, null,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                null, null, null, null);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertEquals(Arrays.asList(ALICE), modelAnd.getFilteredPersonList());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd.commitAddressBook();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandAnd, model, commandHistory, FilterCommand.MESSAGE_FILTER_PERSON_SUCCESS, modelAnd);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr.filterOr(null, criterion[1], null, null, null,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                null, null, null, null);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertEquals(Arrays.asList(ALICE), modelOr.getFilteredPersonList());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr.commitAddressBook();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandOr, model, commandHistory, FilterCommand.MESSAGE_FILTER_PERSON_SUCCESS, modelOr);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // email condition - 7 people are listed: ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        criterion[1] \u003d null;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        criterion[2] \u003d \"@example.com\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandOr \u003d new FilterCommand(criterion, 1);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandAnd \u003d new FilterCommand(criterion, 2);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd.filterAnd(null, null, criterion[2], null, null,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                null, null, null, null);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE), modelAnd.getFilteredPersonList());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd.commitAddressBook();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandAnd, model, commandHistory, FilterCommand.MESSAGE_FILTER_PERSON_SUCCESS, modelAnd);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr.filterOr(null, null, criterion[2], null, null,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                null, null, null, null);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE), modelOr.getFilteredPersonList());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr.commitAddressBook();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandOr, model, commandHistory, FilterCommand.MESSAGE_FILTER_PERSON_SUCCESS, modelOr);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // address condition - 0 persons are listed"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        criterion[2] \u003d null;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        criterion[3] \u003d \"UTown Centre\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandOr \u003d new FilterCommand(criterion, 1);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandAnd \u003d new FilterCommand(criterion, 2);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd.filterAnd(null, null, null, criterion[3], null,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                null, null, null, null);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertEquals(Collections.emptyList(), modelAnd.getFilteredPersonList());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd.commitAddressBook();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandAnd, model, commandHistory, FilterCommand.MESSAGE_FILTER_PERSON_SUCCESS, modelAnd);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr.filterOr(null, null, null, criterion[3], null,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                null, null, null, null);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertEquals(Collections.emptyList(), modelOr.getFilteredPersonList());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr.commitAddressBook();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandOr, model, commandHistory, FilterCommand.MESSAGE_FILTER_PERSON_SUCCESS, modelOr);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // skills tag condition - 3 persons are listed: ALICE, BENSON, DANIEL"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        criterion[3] \u003d null;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        criterion[4] \u003d \"Debugging\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        String[] skillArr \u003d {\"Debugging\"};"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandOr \u003d new FilterCommand(criterion, 1);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandAnd \u003d new FilterCommand(criterion, 2);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd.filterAnd(null, null, null, null, skillArr,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                null, null, null, null);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BENSON, DANIEL), modelAnd.getFilteredPersonList());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd.commitAddressBook();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandAnd, model, commandHistory, FilterCommand.MESSAGE_FILTER_PERSON_SUCCESS, modelAnd);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr.filterOr(null, null, null, null, skillArr,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                null, null, null, null);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BENSON, DANIEL), modelOr.getFilteredPersonList());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr.commitAddressBook();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandOr, model, commandHistory, FilterCommand.MESSAGE_FILTER_PERSON_SUCCESS, modelOr);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // multiple skills tags together condition"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        criterion[4] \u003d \"C++, JavaScript\";"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        String[] skillMultipleInfoArr \u003d {\"C++\", \"JavaScript\"};"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandOr \u003d new FilterCommand(criterion, 1);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandAnd \u003d new FilterCommand(criterion, 2);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // and condition - 1 person is listed: BENSON"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd.filterAnd(null, null, null, null, skillMultipleInfoArr,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                null, null, null, null);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertEquals(Arrays.asList(BENSON), modelAnd.getFilteredPersonList());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd.commitAddressBook();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandAnd, model, commandHistory, FilterCommand.MESSAGE_FILTER_PERSON_SUCCESS, modelAnd);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        // or condition - 6 persons are listed: ALICE, BENSON, CARL, DANIEL, ELLE, FIONA"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr.filterOr(null, null, null, null, skillMultipleInfoArr,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                null, null, null, null);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA), modelOr.getFilteredPersonList());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr.commitAddressBook();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandOr, model, commandHistory, FilterCommand.MESSAGE_FILTER_PERSON_SUCCESS, modelOr);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // multiple position tags together condition"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        criterion[4] \u003d null;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        criterion[5] \u003d \"Developer, UI\";"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String[] tagMultipleInfoArr \u003d {\"Developer\", \"UI\"};"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandOr \u003d new FilterCommand(criterion, 1);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandAnd \u003d new FilterCommand(criterion, 2);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // and condition - 2 persons are listed: CARL, DANIEL"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd.filterAnd(null, null, null, null, null,"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                tagMultipleInfoArr, null, null, null);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertEquals(Arrays.asList(CARL, DANIEL), modelAnd.getFilteredPersonList());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd.commitAddressBook();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandAnd, model, commandHistory, FilterCommand.MESSAGE_FILTER_PERSON_SUCCESS, modelAnd);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // or condition - 3 persons are listed: BENSON, CARL, DANIEL"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr.filterOr(null, null, null, null, null,"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                tagMultipleInfoArr, null, null, null);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertEquals(Arrays.asList(BENSON, CARL, DANIEL), modelOr.getFilteredPersonList());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr.commitAddressBook();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandOr, model, commandHistory, FilterCommand.MESSAGE_FILTER_PERSON_SUCCESS, modelOr);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // gpa condition - 1 person listed: FIONA"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        criterion[5] \u003d null;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        criterion[6] \u003d \"4.0\";"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandOr \u003d new FilterCommand(criterion, 1);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandAnd \u003d new FilterCommand(criterion, 2);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd.filterAnd(null, null, null, null, null,"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                null, null, criterion[6], null);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertEquals(Arrays.asList(FIONA), modelAnd.getFilteredPersonList());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd.commitAddressBook();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandAnd, model, commandHistory, FilterCommand.MESSAGE_FILTER_PERSON_SUCCESS, modelAnd);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr.filterOr(null, null, null, null, null,"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                null, null, criterion[6], null);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertEquals(Arrays.asList(FIONA), modelOr.getFilteredPersonList());"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr.commitAddressBook();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandOr, model, commandHistory, FilterCommand.MESSAGE_FILTER_PERSON_SUCCESS, modelOr);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // education condition - 2 people are listed: FIONA, ELLE"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        criterion[6] \u003d null;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        criterion[7] \u003d \"harvard\";"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandOr \u003d new FilterCommand(criterion, 1);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandAnd \u003d new FilterCommand(criterion, 2);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd.filterAnd(null, null, null, null, null,"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                null, null, null, criterion[7]);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertEquals(Arrays.asList(ELLE, FIONA), modelAnd.getFilteredPersonList());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd.commitAddressBook();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandAnd, model, commandHistory, FilterCommand.MESSAGE_FILTER_PERSON_SUCCESS, modelAnd);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr.filterOr(null, null, null, null, null,"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                null, null, null, criterion[7]);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertEquals(Arrays.asList(ELLE, FIONA), modelOr.getFilteredPersonList());"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr.commitAddressBook();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandOr, model, commandHistory, FilterCommand.MESSAGE_FILTER_PERSON_SUCCESS, modelOr);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // gpa condition - 1 person listed: FIONA"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        criterion[7] \u003d null;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        criterion[8] \u003d \"2\";"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandOr \u003d new FilterCommand(criterion, 1);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandAnd \u003d new FilterCommand(criterion, 2);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd.filterAnd(null, null, null, null, null,"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                null, criterion[8], null, null);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertEquals(Arrays.asList(DANIEL, ELLE, FIONA), modelAnd.getFilteredPersonList());"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd.commitAddressBook();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandAnd, model, commandHistory, FilterCommand.MESSAGE_FILTER_PERSON_SUCCESS, modelAnd);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr.filterOr(null, null, null, null, null,"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                null, criterion[8], null, null);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertEquals(Arrays.asList(DANIEL, ELLE, FIONA), modelOr.getFilteredPersonList());"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr.commitAddressBook();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandOr, model, commandHistory, FilterCommand.MESSAGE_FILTER_PERSON_SUCCESS, modelOr);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public void execute_filterClearAtOneFilterActive_success() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String[] criterion \u003d {\"el\", null, null, null, null, null, \"2.6\", null, null};"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        FilterCommand commandAnd \u003d new FilterCommand(criterion, 2);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        FilterCommand commandOr \u003d new FilterCommand(criterion, 1);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        FilterCommand command \u003d new FilterCommand(criterion, 0);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd.filterAnd(criterion[0], null, null, null, null,"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                null, null, criterion[6], null);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd.commitAddressBook();"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandAnd, model, commandHistory,"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommand.MESSAGE_FILTER_PERSON_SUCCESS, modelAnd);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // filter cleared, all persons will be shown"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd.clearFilter();"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertEquals(Arrays.asList(DANIEL, ALICE, BENSON, CARL, ELLE, FIONA, GEORGE),"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                modelAnd.getFilteredPersonList());"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd.commitAddressBook();"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory,"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommand.MESSAGE_CLEAR_FILTER_PERSON_SUCCESS, modelAnd);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr.filterOr(criterion[0], null, null, null, null,"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                null, null, criterion[6], null);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr.commitAddressBook();"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandOr, model, commandHistory,"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommand.MESSAGE_FILTER_PERSON_SUCCESS, modelOr);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // filter cleared, all persons will be shown"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr.clearFilter();"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE),"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                modelOr.getFilteredPersonList());"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr.commitAddressBook();"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory,"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommand.MESSAGE_CLEAR_FILTER_PERSON_SUCCESS, modelOr);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public void execute_filterReverseAtOneFilterActive_success() {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String[] criterion \u003d {\"el\", null, null, null, null, null, null, null, null};"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        FilterCommand commandAnd \u003d new FilterCommand(criterion, 2);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        FilterCommand commandOr \u003d new FilterCommand(criterion, 1);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        FilterCommand command \u003d new FilterCommand(criterion, 3);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // name condition - 2 peoples are listed: DANIEL, ELLE"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd.filterAnd(criterion[0], null, null, null, null,"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                null, null, null, null);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd.commitAddressBook();"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandAnd, model, commandHistory,"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommand.MESSAGE_FILTER_PERSON_SUCCESS, modelAnd);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // filter reversed, all persons will be shown except DANIEL and ELLE"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd.reverseFilter();"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd.commitAddressBook();"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BENSON, CARL, FIONA, GEORGE), modelAnd.getFilteredPersonList());"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory,"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommand.MESSAGE_FILTER_REVERSE_SUCCESS, modelAnd);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr.filterOr(criterion[0], null, null, null, null,"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                null, null, null, null);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr.commitAddressBook();"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandOr, model, commandHistory,"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommand.MESSAGE_FILTER_PERSON_SUCCESS, modelOr);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // filter reversed, all persons will be shown except DANIEL and ELLE"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr.reverseFilter();"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr.commitAddressBook();"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BENSON, CARL, FIONA, GEORGE), modelOr.getFilteredPersonList());"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory,"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommand.MESSAGE_FILTER_REVERSE_SUCCESS, modelOr);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public void execute_filterClearAtMultipleFiltersActive_success() {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String[] skillArr \u003d {\"C++\"};"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // Filter Level 1: ALICE, BENSON, CARL, FIONA will be remained"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String[] criterion1 \u003d {null, null, null, null, null, null, \"2.8\", null, null};"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        FilterCommand commandAnd \u003d new FilterCommand(criterion1, 2);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        FilterCommand commandOr \u003d new FilterCommand(criterion1, 1);"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd.filterAnd(null, null, null, null, null,"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                null, null, criterion1[6], null);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr.filterOr(null, null, null, null, null,"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                null, null, criterion1[6], null);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd.commitAddressBook();"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr.commitAddressBook();"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandAnd, model, commandHistory,"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommand.MESSAGE_FILTER_PERSON_SUCCESS, modelAnd);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandOr, model2, commandHistory2,"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommand.MESSAGE_FILTER_PERSON_SUCCESS, modelOr);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // Filter Level 2"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String[] criterion2 \u003d {null, null, null, null, skillArr[0], null, null, null, null};"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandAnd \u003d new FilterCommand(criterion2, 2);"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandOr \u003d new FilterCommand(criterion2, 1);"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd.filterOr(null, null, null, null, skillArr,"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                null, null, null, null);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr.filterAnd(null, null, null, null, skillArr,"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                null, null, null, null);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd.commitAddressBook();"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr.commitAddressBook();"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandAnd, model, commandHistory,"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommand.MESSAGE_FILTER_PERSON_SUCCESS, modelAnd);"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandOr, model2, commandHistory2,"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommand.MESSAGE_FILTER_PERSON_SUCCESS, modelOr);"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // Filter Level 3: ALICE will be remained"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String[] criterion3 \u003d {null, null, \"alice\", null, null, null, null, null, null};"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandAnd \u003d new FilterCommand(criterion3, 2);"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandOr \u003d new FilterCommand(criterion3, 1);"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd.filterAnd(null, null, criterion3[2], null, null,"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                null, null, null, null);"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr.filterOr(null, null, criterion3[2], null, null,"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                null, null, null, null);"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd.commitAddressBook();"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr.commitAddressBook();"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandAnd, model, commandHistory,"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommand.MESSAGE_FILTER_PERSON_SUCCESS, modelAnd);"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandOr, model2, commandHistory2,"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommand.MESSAGE_FILTER_PERSON_SUCCESS, modelOr);"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // Filter Clear Level: All persons will be restored"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String[] criterionClear \u003d {null, null, null, null, null, null, null, null, null};"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        FilterCommand command \u003d new FilterCommand(criterionClear, 0);"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd.clearFilter();"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE),"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                modelAnd.getFilteredPersonList());"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr.clearFilter();"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE),"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                modelOr.getFilteredPersonList());"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd.commitAddressBook();"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr.commitAddressBook();"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory,"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommand.MESSAGE_CLEAR_FILTER_PERSON_SUCCESS, modelAnd);"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(command, model2, commandHistory2,"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommand.MESSAGE_CLEAR_FILTER_PERSON_SUCCESS, modelOr);"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public void execute_filterReverseAtMultipleFiltersActive_success() {"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String[] skillArr \u003d {\"C++\"};"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // Filter Level 1: ALICE, BENSON, CARL, FIONA will be remained"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String[] criterion1 \u003d {null, null, null, null, null, null, \"2.8\", null, null};"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        FilterCommand commandAnd \u003d new FilterCommand(criterion1, 2);"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        FilterCommand commandOr \u003d new FilterCommand(criterion1, 1);"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd.filterAnd(null, null, null, null, null,"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                null, null, criterion1[6], null);"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr.filterOr(null, null, null, null, null,"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                null, null, criterion1[6], null);"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd.commitAddressBook();"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr.commitAddressBook();"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandAnd, model, commandHistory,"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommand.MESSAGE_FILTER_PERSON_SUCCESS, modelAnd);"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandOr, model2, commandHistory2,"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommand.MESSAGE_FILTER_PERSON_SUCCESS, modelOr);"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // Filter Level 2: ALICE, BENSON will be remained"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String[] criterion2 \u003d {null, null, null, null, \"C++\", null, null, null, null};"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandAnd \u003d new FilterCommand(criterion2, 2);"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandOr \u003d new FilterCommand(criterion2, 1);"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd.filterOr(null, null, null, null, skillArr,"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                null, null, null, null);"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr.filterAnd(null, null, null, null, skillArr,"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                null, null, null, null);"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd.commitAddressBook();"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr.commitAddressBook();"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandAnd, model, commandHistory,"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommand.MESSAGE_FILTER_PERSON_SUCCESS, modelAnd);"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandOr, model2, commandHistory2,"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommand.MESSAGE_FILTER_PERSON_SUCCESS, modelOr);"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // Filter Level 3: ALICE will be remained"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String[] criterion3 \u003d {null, null, \"alice\", null, null, null, null, null, null};"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandAnd \u003d new FilterCommand(criterion3, 2);"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandOr \u003d new FilterCommand(criterion3, 1);"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd.filterAnd(null, null, criterion3[2], null, null,"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                null, null, null, null);"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr.filterOr(null, null, criterion3[2], null, null,"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                null, null, null, null);"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd.commitAddressBook();"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr.commitAddressBook();"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandAnd, model, commandHistory,"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommand.MESSAGE_FILTER_PERSON_SUCCESS, modelAnd);"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandOr, model2, commandHistory2,"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommand.MESSAGE_FILTER_PERSON_SUCCESS, modelOr);"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // Filter Reverse Level: All persons will be restored excluding ALICE"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String[] criterionReverse \u003d {null, null, null, null, null, null, null, null, null};"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        FilterCommand command \u003d new FilterCommand(criterionReverse, 3);"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd.reverseFilter();"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertEquals(Arrays.asList(BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE),"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                modelAnd.getFilteredPersonList());"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr.reverseFilter();"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertEquals(Arrays.asList(BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE),"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                modelOr.getFilteredPersonList());"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd.commitAddressBook();"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr.commitAddressBook();"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory,"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommand.MESSAGE_FILTER_REVERSE_SUCCESS, modelAnd);"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(command, model2, commandHistory2,"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommand.MESSAGE_FILTER_REVERSE_SUCCESS, modelOr);"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public void execute_multipleConditionsAtOneFilter_success() {"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String[] criterion \u003d {\"a\", \"5\", \"n\", null, null, null, null, null, null};"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        FilterCommand commandAnd \u003d new FilterCommand(criterion, 2);"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        FilterCommand commandOr \u003d new FilterCommand(criterion, 1);"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd.filterAnd(criterion[0], criterion[1], criterion[2], null, null,"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                null, null, null, null);"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertEquals(Arrays.asList(CARL, DANIEL), modelAnd.getFilteredPersonList());"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr.filterOr(criterion[0], criterion[1], criterion[2], null, null,"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                null, null, null, null);"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE),"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                modelOr.getFilteredPersonList());"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd.commitAddressBook();"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr.commitAddressBook();"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandAnd, model, commandHistory,"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommand.MESSAGE_FILTER_PERSON_SUCCESS, modelAnd);"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandOr, model2, commandHistory2,"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommand.MESSAGE_FILTER_PERSON_SUCCESS, modelOr);"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public void execute_allConditionsAtOneFilter_success() {"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String[] criterion \u003d {\"a\", \"5\", \"n\", \"street\", \"C++\", \"Developer\", \"2.5\", \"nus\", \"2\"};"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        String[] skillArr \u003d {\"C++\"};"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String[] posArr \u003d {\"Developer\"};"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        FilterCommand commandAnd \u003d new FilterCommand(criterion, 2);"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        FilterCommand commandOr \u003d new FilterCommand(criterion, 1);"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd.filterAnd(criterion[0], criterion[1], criterion[2], criterion[3], skillArr,"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                posArr, criterion[8], criterion[6], criterion[7]);"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertEquals(Arrays.asList(DANIEL), modelAnd.getFilteredPersonList());"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelAnd.commitAddressBook();"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandAnd, model, commandHistory, FilterCommand.MESSAGE_FILTER_PERSON_SUCCESS, modelAnd);"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr.filterOr(criterion[0], criterion[1], criterion[2], criterion[3], skillArr,"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                posArr, criterion[8], criterion[6], criterion[7]);"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE), modelOr.getFilteredPersonList());"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        modelOr.commitAddressBook();"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandSuccess(commandOr, model, commandHistory, FilterCommand.MESSAGE_FILTER_PERSON_SUCCESS, modelOr);"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public void execute_filterClearWhenNoFilterActive_failure() {"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String[] criterion \u003d {null, null, null, null, null, null, null, null, null};"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        FilterCommand command \u003d new FilterCommand(criterion, 0);"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, FilterCommand.MESSAGE_NO_FILTER_TO_CLEAR);"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public void execute_filterReverseWhenNoFilterActive_failure() {"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String[] criterion \u003d {null, null, null, null, null, null, null, null, null};"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        FilterCommand command \u003d new FilterCommand(criterion, 3);"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, FilterCommand.MESSAGE_NO_FILTER_TO_REVERSE);"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 612,
      "DMGreenhouse": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SortCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.GEORGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import seedu.address.logic.parser.SortWord;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "public class SortCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    private List\u003cPerson\u003e correctPersonOrder \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public void execute_sortNames_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        String expectedMessage \u003d String.format(\"Sorted all persons by name\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        SortWord type \u003d new SortWord(\"name\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        SortCommand command \u003d new SortCommand(type);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        expectedModel.deleteAllPerson();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        correctPersonOrder \u003d Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        for (Person newPerson : correctPersonOrder) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            expectedModel.addPersonWithFilter(newPerson);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public void execute_sortReverseNames_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        //TODO: Look at situation for matching surnames"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        String expectedMessage \u003d String.format(\"Sorted all persons by reverse name\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        SortWord type \u003d new SortWord(\"reverse name\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        SortCommand command \u003d new SortCommand(type);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        expectedModel.deleteAllPerson();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        correctPersonOrder \u003d Arrays.asList(GEORGE, FIONA, ELLE, DANIEL, CARL, BENSON, ALICE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        for (Person newPerson : correctPersonOrder) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            expectedModel.addPersonWithFilter(newPerson);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public void execute_sortSurnames_success() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        //TODO: Look at situation for matching surnames"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        String expectedMessage \u003d String.format(\"Sorted all persons by surname\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        SortWord type \u003d new SortWord(\"surname\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        SortCommand command \u003d new SortCommand(type);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        expectedModel.deleteAllPerson();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        correctPersonOrder \u003d Arrays.asList(GEORGE, FIONA, CARL, BENSON, DANIEL, ELLE, ALICE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        for (Person newPerson : correctPersonOrder) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            expectedModel.addPersonWithFilter(newPerson);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public void execute_sortReverseSurnames_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        //TODO: Look at situation for matching surnames"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        String expectedMessage \u003d String.format(\"Sorted all persons by reverse surname\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        SortWord type \u003d new SortWord(\"reverse surname\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        SortCommand command \u003d new SortCommand(type);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        expectedModel.deleteAllPerson();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        correctPersonOrder \u003d Arrays.asList(ALICE, ELLE, DANIEL, BENSON, CARL, FIONA, GEORGE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        for (Person newPerson : correctPersonOrder) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            expectedModel.addPersonWithFilter(newPerson);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public void execute_sortEducation_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        String expectedMessage \u003d String.format(\"Sorted all persons by education\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        SortWord type \u003d new SortWord(\"education\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        SortCommand command \u003d new SortCommand(type);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        expectedModel.deleteAllPerson();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        correctPersonOrder \u003d Arrays.asList(ELLE, FIONA, BENSON, CARL, ALICE, DANIEL, GEORGE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        for (Person newPerson : correctPersonOrder) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            expectedModel.addPersonWithFilter(newPerson);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public void execute_sortReverseEducation_success() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        String expectedMessage \u003d String.format(\"Sorted all persons by reverse education\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        SortWord type \u003d new SortWord(\"reverse education\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        SortCommand command \u003d new SortCommand(type);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        expectedModel.deleteAllPerson();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        correctPersonOrder \u003d Arrays.asList(GEORGE, DANIEL, ALICE, CARL, BENSON, FIONA, ELLE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        for (Person newPerson : correctPersonOrder) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            expectedModel.addPersonWithFilter(newPerson);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public void execute_sortGpa_success() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        String expectedMessage \u003d String.format(\"Sorted all persons by gpa\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        SortWord type \u003d new SortWord(\"gpa\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        SortCommand command \u003d new SortCommand(type);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        expectedModel.deleteAllPerson();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        correctPersonOrder \u003d Arrays.asList(GEORGE, ELLE, DANIEL, BENSON, CARL, ALICE, FIONA);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        for (Person newPerson : correctPersonOrder) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            expectedModel.addPersonWithFilter(newPerson);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public void execute_sortReverseGpa_success() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        String expectedMessage \u003d String.format(\"Sorted all persons by reverse gpa\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        SortWord type \u003d new SortWord(\"reverse gpa\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        SortCommand command \u003d new SortCommand(type);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        expectedModel.deleteAllPerson();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        correctPersonOrder \u003d Arrays.asList(FIONA, ALICE, CARL, BENSON, DANIEL, ELLE, GEORGE);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        for (Person newPerson : correctPersonOrder) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            expectedModel.addPersonWithFilter(newPerson);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public void execute_sortSkills_success() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        String expectedMessage \u003d String.format(\"Sorted all persons by skills\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        SortWord type \u003d new SortWord(\"skills\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        SortCommand command \u003d new SortCommand(type);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        expectedModel.deleteAllPerson();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        correctPersonOrder \u003d Arrays.asList(ELLE, ALICE, BENSON, DANIEL, FIONA, CARL, GEORGE);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        for (Person newPerson : correctPersonOrder) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            expectedModel.addPersonWithFilter(newPerson);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public void execute_sortPositions_success() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        String expectedMessage \u003d String.format(\"Sorted all persons by positions\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        SortWord type \u003d new SortWord(\"positions\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        SortCommand command \u003d new SortCommand(type);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        expectedModel.deleteAllPerson();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        correctPersonOrder \u003d Arrays.asList(ELLE, FIONA, GEORGE, ALICE, CARL, DANIEL, BENSON);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        for (Person newPerson : correctPersonOrder) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            expectedModel.addPersonWithFilter(newPerson);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public void execute_sortEndorsements_success() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        String expectedMessage \u003d String.format(\"Sorted all persons by endorsements\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        SortWord type \u003d new SortWord(\"endorsements\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        SortCommand command \u003d new SortCommand(type);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        expectedModel.deleteAllPerson();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        correctPersonOrder \u003d Arrays.asList(DANIEL, FIONA, ELLE, GEORGE, ALICE, BENSON, CARL);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        for (Person newPerson : correctPersonOrder) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            expectedModel.addPersonWithFilter(newPerson);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public void execute_sortSkillNumber_success() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        String expectedMessage \u003d String.format(\"Sorted all persons by skill number\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        SortWord type \u003d new SortWord(\"skill number\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        SortCommand command \u003d new SortCommand(type);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        expectedModel.deleteAllPerson();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        correctPersonOrder \u003d Arrays.asList(CARL, ELLE, FIONA, DANIEL, BENSON, GEORGE, ALICE);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        for (Person newPerson : correctPersonOrder) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            expectedModel.addPersonWithFilter(newPerson);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public void execute_sortPositionNumber_success() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        String expectedMessage \u003d String.format(\"Sorted all persons by position number\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        SortWord type \u003d new SortWord(\"position number\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        SortCommand command \u003d new SortCommand(type);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        expectedModel.deleteAllPerson();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        correctPersonOrder \u003d Arrays.asList(FIONA, CARL, GEORGE, DANIEL, BENSON, ALICE, ELLE);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        for (Person newPerson : correctPersonOrder) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            expectedModel.addPersonWithFilter(newPerson);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public void execute_sortEndorsementNumber_success() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        String expectedMessage \u003d String.format(\"Sorted all persons by endorsement number\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        SortWord type \u003d new SortWord(\"endorsement number\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        SortCommand command \u003d new SortCommand(type);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        expectedModel.deleteAllPerson();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        correctPersonOrder \u003d Arrays.asList(DANIEL, FIONA, ELLE, GEORGE, CARL, BENSON, ALICE);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        for (Person newPerson : correctPersonOrder) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            expectedModel.addPersonWithFilter(newPerson);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 15,
      "DMGreenhouse": 218
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EDUCATION_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EDUCATION_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GPA_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GPA_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SKILL_DESC_JAVA;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SKILL_DESC_PYTHON;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SKILL_JAVA;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SKILL_PYTHON;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withSkills(VALID_SKILL_PYTHON).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                + EDUCATION_DESC_BOB + GPA_DESC_BOB"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                + ADDRESS_DESC_BOB + SKILL_DESC_PYTHON, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                + EDUCATION_DESC_BOB + GPA_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                + ADDRESS_DESC_BOB + SKILL_DESC_PYTHON, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                + EDUCATION_DESC_BOB + GPA_DESC_BOB"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                + ADDRESS_DESC_BOB + SKILL_DESC_PYTHON, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                + EDUCATION_DESC_BOB + GPA_DESC_BOB"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                + ADDRESS_DESC_BOB + SKILL_DESC_PYTHON, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                + EDUCATION_DESC_BOB + GPA_DESC_BOB"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                + ADDRESS_DESC_BOB + SKILL_DESC_PYTHON, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withSkills(VALID_SKILL_PYTHON, VALID_SKILL_JAVA)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + EDUCATION_DESC_BOB"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                + GPA_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                + SKILL_DESC_JAVA + SKILL_DESC_PYTHON, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withSkills().build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + EDUCATION_DESC_AMY"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                        + GPA_DESC_AMY + ADDRESS_DESC_AMY, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                + EDUCATION_DESC_BOB + GPA_DESC_BOB"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                + SKILL_DESC_JAVA + SKILL_DESC_PYTHON, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                + EDUCATION_DESC_BOB + GPA_DESC_BOB"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                + SKILL_DESC_JAVA + SKILL_DESC_PYTHON, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                + EDUCATION_DESC_BOB + GPA_DESC_BOB"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                + SKILL_DESC_JAVA + SKILL_DESC_PYTHON, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                + EDUCATION_DESC_BOB + GPA_DESC_BOB"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                + SKILL_DESC_JAVA + SKILL_DESC_PYTHON, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                + EDUCATION_DESC_BOB + GPA_DESC_BOB , Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                + EDUCATION_DESC_BOB + GPA_DESC_BOB + ADDRESS_DESC_BOB + SKILL_DESC_JAVA + SKILL_DESC_PYTHON,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 19,
      "-": 112,
      "DMGreenhouse": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "// import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SKILL_DESC_JAVA;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SKILL_DESC_PYTHON;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SKILL_JAVA;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SKILL_PYTHON;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abwilli"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SKILL;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "abwilli"
        },
        "content": "import seedu.address.model.tag.SkillsTag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "abwilli"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_SKILL;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // no need to execute, tag format is changed"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, SkillsTag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        // while parsing {@code PREFIX_SKILL} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        assertParseFailure(parser, \"1\" + SKILL_DESC_PYTHON + SKILL_DESC_JAVA"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                + TAG_EMPTY, SkillsTag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        assertParseFailure(parser, \"1\" + SKILL_DESC_PYTHON + TAG_EMPTY"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                + SKILL_DESC_JAVA, SkillsTag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + SKILL_DESC_PYTHON"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                + SKILL_DESC_JAVA, SkillsTag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                        + VALID_ADDRESS_AMY + VALID_PHONE_AMY, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + SKILL_DESC_JAVA"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + SKILL_DESC_PYTHON;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                .withSkills(\"s:\" + VALID_SKILL_JAVA, \"s:\" + VALID_SKILL_PYTHON).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + SKILL_DESC_PYTHON;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withSkills(\"s:\" + VALID_SKILL_PYTHON).build();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                + SKILL_DESC_PYTHON + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + SKILL_DESC_PYTHON"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + SKILL_DESC_JAVA;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                .withSkills(\"s:\" + VALID_SKILL_PYTHON, \"s:\" + VALID_SKILL_JAVA).build();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withSkills().build();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 6,
      "abwilli": 4,
      "-": 186,
      "DMGreenhouse": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FilterCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GPA_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILTER_ADDRESS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILTER_ADDRESS_REVERSE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILTER_EDUCATION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILTER_EDUCATION_REVERSE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILTER_EMAIL;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILTER_EMAIL_REVERSE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILTER_ENDORSEMENT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILTER_ENDORSEMENT_REVERSE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILTER_GPA;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILTER_GPA_REVERSE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILTER_NAME;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILTER_NAME_REVERSE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILTER_PHONE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILTER_PHONE_REVERSE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILTER_POS;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILTER_POS_REVERSE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILTER_SKILL;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILTER_SKILL_REVERSE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "public class FilterCommandParserTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private static final String AND_TYPE \u003d \"and \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private static final String OR_TYPE \u003d \"or \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private static final String NON_EXISTING_PREFIX \u003d \"h\u003c\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private static final String NON_EXISTING_PREFIX_FILTER_REVERSE \u003d \"\u003eh\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private static final String EMPTY_FIELD_ADDRESS \u003d PREFIX_FILTER_ADDRESS + \"\" + PREFIX_FILTER_ADDRESS_REVERSE;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private static final String EMPTY_FIELD_EMAIL \u003d PREFIX_FILTER_EMAIL + \"\" + PREFIX_FILTER_EMAIL_REVERSE;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private static final String EMPTY_FIELD_EDUCATION \u003d PREFIX_FILTER_EDUCATION + \"\" + PREFIX_FILTER_EDUCATION_REVERSE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private static final String EMPTY_FIELD_ENDORSEMENT \u003d PREFIX_FILTER_ENDORSEMENT + \"\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            + PREFIX_FILTER_ENDORSEMENT_REVERSE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private static final String EMPTY_FIELD_GPA \u003d PREFIX_FILTER_GPA + \"\" + PREFIX_FILTER_GPA_REVERSE;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private static final String EMPTY_FIELD_NAME \u003d PREFIX_FILTER_NAME + \"\" + PREFIX_FILTER_NAME_REVERSE;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private static final String EMPTY_FIELD_PHONE \u003d PREFIX_FILTER_PHONE + \"\" + PREFIX_FILTER_PHONE_REVERSE;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private static final String EMPTY_FIELD_POS \u003d PREFIX_FILTER_POS + \"\" + PREFIX_FILTER_POS_REVERSE;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private static final String EMPTY_FIELD_SKILL \u003d PREFIX_FILTER_SKILL + \"\" + PREFIX_FILTER_SKILL_REVERSE;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private static final String INVALID_ENDORSEMENT1 \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            PREFIX_FILTER_ENDORSEMENT + \"2.5\" + PREFIX_FILTER_ENDORSEMENT_REVERSE;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private static final String INVALID_ENDORSEMENT2 \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            PREFIX_FILTER_ENDORSEMENT + \"text\" + PREFIX_FILTER_ENDORSEMENT_REVERSE;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private static final String INVALID_GPA1 \u003d PREFIX_FILTER_GPA + \"2..5\" + PREFIX_FILTER_GPA_REVERSE;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private static final String INVALID_GPA2 \u003d PREFIX_FILTER_GPA + \"text\" + PREFIX_FILTER_GPA_REVERSE;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private static final String INVALID_GPA3 \u003d PREFIX_FILTER_GPA + \"4.1\" + PREFIX_FILTER_GPA_REVERSE;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private static final String INVALID_GPA4 \u003d PREFIX_FILTER_GPA + \"-0.2\" + PREFIX_FILTER_GPA_REVERSE;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private static final String INVALID_PHONE1 \u003d PREFIX_FILTER_PHONE + \"2..5\" + PREFIX_FILTER_PHONE_REVERSE;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private static final String INVALID_PHONE2 \u003d PREFIX_FILTER_PHONE + \"text\" + PREFIX_FILTER_PHONE_REVERSE;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private static final String INVALID_PHONE3 \u003d PREFIX_FILTER_PHONE + \"-2\" + PREFIX_FILTER_PHONE_REVERSE;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private static final String INVALID_NAME1 \u003d PREFIX_FILTER_NAME + \"m8\" + PREFIX_FILTER_NAME_REVERSE;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private static final String INVALID_NAME2 \u003d PREFIX_FILTER_NAME + \"Alex*\" + PREFIX_FILTER_NAME_REVERSE;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private static final String VALID_ADDRESS \u003d PREFIX_FILTER_ADDRESS + \"street\" + PREFIX_FILTER_ADDRESS_REVERSE;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private static final String VALID_ADDRESS2 \u003d PREFIX_FILTER_ADDRESS + \"road\" + PREFIX_FILTER_ADDRESS_REVERSE;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private static final String VALID_EDUCATION \u003d PREFIX_FILTER_EDUCATION + \"NUS\" + PREFIX_FILTER_EDUCATION_REVERSE;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private static final String VALID_EDUCATION2 \u003d PREFIX_FILTER_EDUCATION + \"NTU\" + PREFIX_FILTER_EDUCATION_REVERSE;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private static final String VALID_EMAIL \u003d PREFIX_FILTER_EMAIL + \"e@ex\" + PREFIX_FILTER_EMAIL_REVERSE;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private static final String VALID_EMAIL2 \u003d PREFIX_FILTER_EMAIL + \"b@ex\" + PREFIX_FILTER_EMAIL_REVERSE;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private static final String VALID_ENDORSEMENT \u003d PREFIX_FILTER_ENDORSEMENT + \"2\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            + PREFIX_FILTER_ENDORSEMENT_REVERSE;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private static final String VALID_ENDORSEMENT2 \u003d PREFIX_FILTER_ENDORSEMENT + \"3\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            + PREFIX_FILTER_ENDORSEMENT_REVERSE;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private static final String VALID_GPA \u003d PREFIX_FILTER_GPA + \"3.1\" + PREFIX_FILTER_GPA_REVERSE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private static final String VALID_GPA2 \u003d PREFIX_FILTER_GPA + \"2.7\" + PREFIX_FILTER_GPA_REVERSE;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private static final String VALID_NAME1 \u003d PREFIX_FILTER_NAME + VALID_NAME_AMY + PREFIX_FILTER_NAME_REVERSE;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private static final String VALID_NAME2 \u003d PREFIX_FILTER_NAME + \"Neill\" + PREFIX_FILTER_NAME_REVERSE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private static final String VALID_PHONE \u003d PREFIX_FILTER_PHONE + \"92\" + PREFIX_FILTER_PHONE_REVERSE;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private static final String VALID_PHONE2 \u003d PREFIX_FILTER_PHONE + \"65\" + PREFIX_FILTER_PHONE_REVERSE;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private static final String VALID_POS \u003d PREFIX_FILTER_POS + \"Manager, Engineer\" + PREFIX_FILTER_POS_REVERSE;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private static final String VALID_POS2 \u003d PREFIX_FILTER_POS + \"Engineer, UI\" + PREFIX_FILTER_POS_REVERSE;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private static final String VALID_SKILL \u003d PREFIX_FILTER_SKILL + \"Java, C++\" + PREFIX_FILTER_SKILL_REVERSE;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private static final String VALID_SKILL2 \u003d PREFIX_FILTER_SKILL + \"Java, Python\" + PREFIX_FILTER_SKILL_REVERSE;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private static final String MISSING_BEGIN_PREFIX_FILTER_EMAIL \u003d VALID_EMAIL_AMY + PREFIX_FILTER_EMAIL_REVERSE;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private static final String MISSING_END_PREFIX_FILTER_ADDRESS \u003d PREFIX_FILTER_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private static final String MISSING_END_PREFIX_FILTER_EDUCATION \u003d PREFIX_FILTER_EDUCATION + VALID_GPA_AMY;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private FilterCommandParser parser \u003d new FilterCommandParser();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // no process type specified"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertParseFailure(parser, VALID_NAME1, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertParseFailure(parser, AND_TYPE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertParseFailure(parser, OR_TYPE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // no type and no field specified"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public void parse_invalidPrefixPair_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // only beginning prefix is used"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertParseFailure(parser, AND_TYPE + MISSING_END_PREFIX_FILTER_ADDRESS,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommandParser.MESSAGE_INPUT_NOT_IN_TRUE_FORM);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // only ending prefix is used"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertParseFailure(parser, OR_TYPE + MISSING_BEGIN_PREFIX_FILTER_EMAIL,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommandParser.MESSAGE_INPUT_NOT_IN_TRUE_FORM);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // false beginning and ending prefix couples are used"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertParseFailure(parser, AND_TYPE + MISSING_END_PREFIX_FILTER_EDUCATION + PREFIX_FILTER_GPA_REVERSE,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommandParser.MESSAGE_INPUT_NOT_IN_TRUE_FORM);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // non-existing prefix is used all by itself"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertParseFailure(parser, OR_TYPE + NON_EXISTING_PREFIX + \"someText\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                + NON_EXISTING_PREFIX_FILTER_REVERSE, FilterCommandParser.MESSAGE_INPUT_NOT_IN_TRUE_FORM);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public void parse_emptyFields_failure() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertParseFailure(parser, AND_TYPE + EMPTY_FIELD_ADDRESS,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommandParser.MESSAGE_INPUT_NOT_IN_TRUE_FORM);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertParseFailure(parser, AND_TYPE + EMPTY_FIELD_EDUCATION,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommandParser.MESSAGE_INPUT_NOT_IN_TRUE_FORM);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertParseFailure(parser, AND_TYPE + EMPTY_FIELD_EMAIL,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommandParser.MESSAGE_INPUT_NOT_IN_TRUE_FORM);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertParseFailure(parser, AND_TYPE + EMPTY_FIELD_ENDORSEMENT,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommandParser.MESSAGE_INPUT_NOT_IN_TRUE_FORM);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertParseFailure(parser, AND_TYPE + EMPTY_FIELD_GPA,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommandParser.MESSAGE_INPUT_NOT_IN_TRUE_FORM);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertParseFailure(parser, AND_TYPE + EMPTY_FIELD_NAME,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommandParser.MESSAGE_INPUT_NOT_IN_TRUE_FORM);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertParseFailure(parser, AND_TYPE + EMPTY_FIELD_PHONE,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommandParser.MESSAGE_INPUT_NOT_IN_TRUE_FORM);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertParseFailure(parser, AND_TYPE + EMPTY_FIELD_POS,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommandParser.MESSAGE_INPUT_NOT_IN_TRUE_FORM);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertParseFailure(parser, AND_TYPE + EMPTY_FIELD_SKILL,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommandParser.MESSAGE_INPUT_NOT_IN_TRUE_FORM);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public void parse_invalidFieldValues_failure() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // float value for endorsement"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertParseFailure(parser, AND_TYPE + INVALID_ENDORSEMENT1,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommandParser.MESSAGE_INPUT_NOT_IN_TRUE_FORM);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // string value for endorsement"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertParseFailure(parser, OR_TYPE + INVALID_ENDORSEMENT2,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommandParser.MESSAGE_INPUT_NOT_IN_TRUE_FORM);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // float value for phone"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertParseFailure(parser, AND_TYPE + INVALID_PHONE1,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommandParser.MESSAGE_INPUT_NOT_IN_TRUE_FORM);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // string value for phone"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertParseFailure(parser, OR_TYPE + INVALID_PHONE2,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommandParser.MESSAGE_INPUT_NOT_IN_TRUE_FORM);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // negative value for phone"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertParseFailure(parser, OR_TYPE + INVALID_PHONE3,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommandParser.MESSAGE_INPUT_NOT_IN_TRUE_FORM);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // float value for gpa with 2 dots"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertParseFailure(parser, AND_TYPE + INVALID_GPA1,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommandParser.MESSAGE_INPUT_NOT_IN_TRUE_FORM);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // string value for gpa"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertParseFailure(parser, OR_TYPE + INVALID_GPA2,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommandParser.MESSAGE_INPUT_NOT_IN_TRUE_FORM);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // float value for gpa bigger than 4.0"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertParseFailure(parser, OR_TYPE + INVALID_GPA3,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommandParser.MESSAGE_INPUT_NOT_IN_TRUE_FORM);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // negative float value for gpa"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertParseFailure(parser, OR_TYPE + INVALID_GPA4,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommandParser.MESSAGE_INPUT_NOT_IN_TRUE_FORM);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // Name has a numerical character"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertParseFailure(parser, AND_TYPE + INVALID_NAME1,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommandParser.MESSAGE_INPUT_NOT_IN_TRUE_FORM);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        // Name has a non-alphanumerical character, in this case \u0027*\u0027"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertParseFailure(parser, OR_TYPE + INVALID_NAME2,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                FilterCommandParser.MESSAGE_INPUT_NOT_IN_TRUE_FORM);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public void parse_validFields_success() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String userInputAddress \u003d AND_TYPE + VALID_ADDRESS;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String[] criterionAddress \u003d {null, null, null, \"street\".trim().toLowerCase(), null, null, null, null, null};"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        FilterCommand expectedAddressCommand \u003d new FilterCommand(criterionAddress, 2);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertParseSuccess(parser, userInputAddress, expectedAddressCommand);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String userInputEducation \u003d AND_TYPE + VALID_EDUCATION;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String[] criterionEducation \u003d {null, null, null, null, null, null, null, \"NUS\".trim().toLowerCase(), null};"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        FilterCommand expectedEducationCommand \u003d new FilterCommand(criterionEducation, 2);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertParseSuccess(parser, userInputEducation, expectedEducationCommand);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String userInputEmail \u003d AND_TYPE + VALID_EMAIL;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String[] criterionEmail \u003d {null, null, \"e@ex\".trim().toLowerCase(), null, null, null, null, null, null};"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        FilterCommand expectedEmailCommand \u003d new FilterCommand(criterionEmail, 2);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertParseSuccess(parser, userInputEmail, expectedEmailCommand);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String userInputEndorsement \u003d AND_TYPE + VALID_ENDORSEMENT;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String[] criterionEndorsement \u003d {null, null, null, null, null, null, null, null, \"2\".trim().toLowerCase()};"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        FilterCommand expectedEndorsementCommand \u003d new FilterCommand(criterionEndorsement, 2);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertParseSuccess(parser, userInputEndorsement, expectedEndorsementCommand);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String userInputGpa \u003d AND_TYPE + VALID_GPA;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String[] criterionGpa \u003d {null, null, null, null, null, null, \"3.1\".trim().toLowerCase(), null, null};"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        FilterCommand expectedGpaCommand \u003d new FilterCommand(criterionGpa, 2);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertParseSuccess(parser, userInputGpa, expectedGpaCommand);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String userInputName \u003d OR_TYPE + VALID_NAME2;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String[] criterionName \u003d {\"Neill\".trim().toLowerCase(), null, null, null, null, null, null, null, null};"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        FilterCommand expectedNameCommand \u003d new FilterCommand(criterionName, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertParseSuccess(parser, userInputName, expectedNameCommand);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String userInputPhone \u003d OR_TYPE + VALID_PHONE;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String[] criterionPhone \u003d {null, \"92\".trim().toLowerCase(), null, null, null, null, null, null, null};"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        FilterCommand expectedPhoneCommand \u003d new FilterCommand(criterionPhone, 1);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertParseSuccess(parser, userInputPhone, expectedPhoneCommand);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String userInputPos \u003d OR_TYPE + VALID_POS;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String[] criterionPos \u003d {null, null, null, null, null, \"Manager, Engineer\".trim().toLowerCase(),"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            null, null, null};"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        FilterCommand expectedPosCommand \u003d new FilterCommand(criterionPos, 1);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertParseSuccess(parser, userInputPos, expectedPosCommand);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String userInputSkill \u003d OR_TYPE + VALID_SKILL;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String[] criterionSkill \u003d {null, null, null, null, \"Java, C++\".trim().toLowerCase(), null, null, null, null};"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        FilterCommand expectedSkillCommand \u003d new FilterCommand(criterionSkill, 1);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertParseSuccess(parser, userInputSkill, expectedSkillCommand);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * If multiple times a field is called, the first one will be taken"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    public void parse_repeatedFields_success() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String userInputAddress \u003d AND_TYPE + VALID_ADDRESS + \" \" + VALID_ADDRESS2;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String[] criterionAddress \u003d {null, null, null, \"street\".trim().toLowerCase(), null, null, null, null, null};"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        FilterCommand expectedAddressCommand \u003d new FilterCommand(criterionAddress, 2);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertParseSuccess(parser, userInputAddress, expectedAddressCommand);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String userInputEducation \u003d AND_TYPE + VALID_EDUCATION + \" \" + VALID_EDUCATION2;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String[] criterionEducation \u003d {null, null, null, null, null, null, null, \"NUS\".trim().toLowerCase(), null};"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        FilterCommand expectedEducationCommand \u003d new FilterCommand(criterionEducation, 2);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertParseSuccess(parser, userInputEducation, expectedEducationCommand);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String userInputEmail \u003d AND_TYPE + VALID_EMAIL + \" \" + VALID_EMAIL2;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String[] criterionEmail \u003d {null, null, \"e@ex\".trim().toLowerCase(), null, null, null, null, null, null};"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        FilterCommand expectedEmailCommand \u003d new FilterCommand(criterionEmail, 2);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertParseSuccess(parser, userInputEmail, expectedEmailCommand);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String userInputEndorsement \u003d AND_TYPE + VALID_ENDORSEMENT + \" \" + VALID_ENDORSEMENT2;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String[] criterionEndorsement \u003d {null, null, null, null, null, null, null, null, \"2\".trim().toLowerCase()};"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        FilterCommand expectedEndorsementCommand \u003d new FilterCommand(criterionEndorsement, 2);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertParseSuccess(parser, userInputEndorsement, expectedEndorsementCommand);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String userInputGpa \u003d AND_TYPE + VALID_GPA + \" \" + VALID_GPA2;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String[] criterionGpa \u003d {null, null, null, null, null, null, \"3.1\".trim().toLowerCase(), null, null};"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        FilterCommand expectedGpaCommand \u003d new FilterCommand(criterionGpa, 2);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertParseSuccess(parser, userInputGpa, expectedGpaCommand);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String userInputName \u003d OR_TYPE + VALID_NAME2 + \" \" + VALID_NAME1;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String[] criterionName \u003d {\"Neill\".trim().toLowerCase(), null, null, null, null, null, null, null, null};"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        FilterCommand expectedNameCommand \u003d new FilterCommand(criterionName, 1);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertParseSuccess(parser, userInputName, expectedNameCommand);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String userInputPhone \u003d OR_TYPE + VALID_PHONE + \" \" + VALID_PHONE2;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String[] criterionPhone \u003d {null, \"92\".trim().toLowerCase(), null, null, null, null, null, null, null};"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        FilterCommand expectedPhoneCommand \u003d new FilterCommand(criterionPhone, 1);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertParseSuccess(parser, userInputPhone, expectedPhoneCommand);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String userInputPos \u003d OR_TYPE + VALID_POS + \" \" + VALID_POS2;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String[] criterionPos \u003d {null, null, null, null, null, \"Manager, Engineer\".trim().toLowerCase(),"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            null, null, null};"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        FilterCommand expectedPosCommand \u003d new FilterCommand(criterionPos, 1);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertParseSuccess(parser, userInputPos, expectedPosCommand);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String userInputSkill \u003d OR_TYPE + VALID_SKILL + \" \" + VALID_SKILL2;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        String[] criterionSkill \u003d {null, null, null, null, \"Java, C++\".trim().toLowerCase(), null, null, null, null};"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        FilterCommand expectedSkillCommand \u003d new FilterCommand(criterionSkill, 1);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertParseSuccess(parser, userInputSkill, expectedSkillCommand);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 312
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abwilli"
        },
        "content": "import seedu.address.model.tag.SkillsTag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "abwilli"
        },
        "content": "    private static final String INVALID_COLOR \u003d \"black\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "abwilli"
        },
        "content": "    private static final String VALID_COLOR \u003d \"teal\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "abwilli"
        },
        "content": "    private static final String VALID_TYPE \u003d \"skill\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        ParserUtil.parseTag(null, null);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        SkillsTag expectedTag \u003d new SkillsTag(VALID_TAG_1, VALID_COLOR);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1, VALID_COLOR));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        SkillsTag expectedTag \u003d new SkillsTag(VALID_TAG_1, \"endorsement\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace, VALID_COLOR));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        ParserUtil.parseTags(null, null);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList(), VALID_TYPE).isEmpty());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        Set\u003cSkillsTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2), VALID_TYPE);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        Set\u003cSkillsTag\u003e expectedTagSet \u003d new HashSet\u003cSkillsTag\u003e(Arrays.asList(new SkillsTag(VALID_TAG_1, \"skill\"),"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                new SkillsTag(VALID_TAG_2, \"skill\")));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abwilli": 11,
      "-": 184,
      "DMGreenhouse": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SKILL_JAVA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withSkills(VALID_SKILL_JAVA)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.hasPerson(null);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withSkills(VALID_SKILL_JAVA)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.getPersonList().remove(0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener_withInvalidationListener_listenerAdded() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addListener(listener);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, counter.get());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener_withInvalidationListener_listenerRemoved() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addListener(listener);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removeListener(listener);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, counter.get());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        private final ObservableList\u003cPerson\u003e allPersonsStorage \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        public ObservableList\u003cPerson\u003e getAllPersonsStorageList() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            return allPersonsStorage;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 6,
      "-": 138,
      "DMGreenhouse": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SKILL_JAVA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().remove(0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                .withSkills(VALID_SKILL_JAVA).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                .withSkills(VALID_SKILL_JAVA).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withSkills(VALID_SKILL_JAVA).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withSkills(VALID_SKILL_JAVA).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 94,
      "DMGreenhouse": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniquePersonListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SKILL_JAVA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.contains(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withSkills(VALID_SKILL_JAVA)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(null, ALICE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(PersonNotFoundException.class);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withSkills(VALID_SKILL_JAVA)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(null);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(PersonNotFoundException.class);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons((UniquePersonList) null);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons((List\u003cPerson\u003e) null);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(listWithDuplicatePersons);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 182,
      "DMGreenhouse": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/tag/SkillsTagTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abwilli"
        },
        "content": "public class SkillsTagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new SkillsTag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new SkillsTag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e SkillsTag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abwilli": 4,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.JOHN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charnixon"
        },
        "content": "    private static final String INVALID_EDUCATION \u003d \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charnixon"
        },
        "content": "    private static final String INVALID_GPA \u003d \"A\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charnixon"
        },
        "content": "    private static final String VALID_EDUCATION \u003d BENSON.getEducation().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private static final String VALID_GPA \u003d BENSON.getGpa().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(JOHN); // temporarily use JOHN since he has no tags"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        assertEquals(JOHN, person.toModelType());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "abwilli"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_EDUCATION, VALID_GPA,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "abwilli"
        },
        "content": "                        VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_EDUCATION, VALID_GPA,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "abwilli"
        },
        "content": "                VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "abwilli"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_EDUCATION, VALID_GPA,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "abwilli"
        },
        "content": "                        VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_EDUCATION, VALID_GPA,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "abwilli"
        },
        "content": "                VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "abwilli"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_EDUCATION, VALID_GPA,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "abwilli"
        },
        "content": "                        VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EDUCATION, VALID_GPA,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                null, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE , VALID_EDUCATION, VALID_GPA,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                        VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME , VALID_PHONE, VALID_EDUCATION,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                VALID_GPA, VALID_EMAIL, null, VALID_TAGS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "abwilli"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME , VALID_PHONE, VALID_EMAIL, VALID_EDUCATION, VALID_GPA,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "abwilli"
        },
        "content": "                        VALID_ADDRESS, invalidTags);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 7,
      "charnixon": 3,
      "abwilli": 12,
      "-": 99,
      "DMGreenhouse": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abwilli"
        },
        "content": "import seedu.address.model.tag.SkillsTag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        descriptor.setEducation(person.getEducation());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        descriptor.setGpa(person.getGpa());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     * Parses the {@code skills} into a {@code Set\u003cSkillsTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public EditPersonDescriptorBuilder withSkills(String... tags) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "abwilli"
        },
        "content": "        Set\u003cSkillsTag\u003e tagSet \u003d Stream.of(tags).map(SkillsTag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 2,
      "abwilli": 2,
      "-": 83,
      "DMGreenhouse": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abwilli"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abwilli"
        },
        "content": "import seedu.address.model.person.Education;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.model.person.Gpa;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abwilli"
        },
        "content": "import seedu.address.model.tag.SkillsTag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charnixon"
        },
        "content": "    public static final String DEFAULT_EDUCATION \u003d \"NUS\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charnixon"
        },
        "content": "    public static final String DEFAULT_GPA \u003d \"3\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charnixon"
        },
        "content": "    private Education education;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    private Gpa gpa;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "abwilli"
        },
        "content": "    private Set\u003cSkillsTag\u003e tags;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charnixon"
        },
        "content": "        education \u003d new Education(DEFAULT_EDUCATION);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        gpa \u003d new Gpa(DEFAULT_GPA);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "charnixon"
        },
        "content": "        education \u003d personToCopy.getEducation();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        gpa \u003d personToCopy.getGpa();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     * Parses the {@code skills} into a {@code Set\u003cSkillsTag\u003e}, appends any other tags already present"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     * and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public PersonBuilder withSkills(String ... skills) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        Set otherTags \u003d this.tags;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        Set newTags \u003d SampleDataUtil.getTagSet(Arrays.asList(skills), null, null);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        otherTags.addAll(newTags);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     * Parses the {@code positions} into a {@code Set\u003cSkillsTag\u003e}, appends any other tags already present"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     * and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public PersonBuilder withPositions(String ... positions) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        Set otherTags \u003d this.tags;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        Set newTags \u003d SampleDataUtil.getTagSet(null, Arrays.asList(positions), null);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        otherTags.addAll(newTags);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     * Parses the {@code endorsements} into a {@code Set\u003cSkillsTag\u003e}, appends any other tags already present"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     * and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public PersonBuilder withEndorsements(String ... endorsements) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        Set otherTags \u003d this.tags;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        Set newTags \u003d SampleDataUtil.getTagSet(null, null, Arrays.asList(endorsements));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        otherTags.addAll(newTags);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "abwilli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "abwilli"
        },
        "content": "     * Sets the {@code Education} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "abwilli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "charnixon"
        },
        "content": "    public PersonBuilder withEducation(String education) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "charnixon"
        },
        "content": "        this.education \u003d new Education(education);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "charnixon"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "charnixon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "charnixon"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "abwilli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "abwilli"
        },
        "content": "     * Sets the {@code GPA} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "abwilli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "abwilli"
        },
        "content": "    public PersonBuilder withGpa(String gpa) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        this.gpa \u003d new Gpa(gpa);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "charnixon"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "charnixon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "charnixon"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "abwilli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "abwilli"
        },
        "content": "     * {@code Person} that we are building."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "abwilli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "charnixon"
        },
        "content": "        return new Person(name, phone, email, education, gpa, address, tags);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 5,
      "abwilli": 14,
      "charnixon": 14,
      "-": 87,
      "DMGreenhouse": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EDUCATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GPA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abwilli"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SKILL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abwilli"
        },
        "content": "import seedu.address.model.tag.SkillsTag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        sb.append(PREFIX_EDUCATION + person.getEducation().toString() + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        sb.append(PREFIX_GPA + person.getGpa().value + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "abwilli"
        },
        "content": "            s -\u003e sb.append(PREFIX_SKILL + s.tagName + \" \")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        descriptor.getEducation().ifPresent(education -\u003e sb.append(PREFIX_EDUCATION)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                .append(education.toString()).append(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        descriptor.getGpa().ifPresent(gpa -\u003e sb.append(PREFIX_GPA).append(gpa.value).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "abwilli"
        },
        "content": "            Set\u003cSkillsTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "abwilli"
        },
        "content": "                sb.append(PREFIX_SKILL);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "abwilli"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_SKILL).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 7,
      "abwilli": 6,
      "-": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EDUCATION_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EDUCATION_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GPA_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GPA_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withEducation(\"NUS\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withGpa(\"3.4\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withSkills(\"C++\", \"Debugging\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withPositions(\"Software Engineer\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withPhone(\"98765432\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withEmail(\"johnd@example.com\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withEducation(\"NTU\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withGpa(\"3.1\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withSkills(\"C++\", \"Debugging\", \"JavaScript\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withPositions(\"Website Developer\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withPhone(\"95352563\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withEducation(\"NTU\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withGpa(\"3.2\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withEmail(\"heinz@example.com\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withAddress(\"wall street\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withSkills(\"Python\", \"Photography\", \"Cyber Crime\", \"Finance\", \"JavaScript\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withPositions(\"Systems Analyst\", \"UI Developer\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withPhone(\"87652533\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withEducation(\"NUS\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withGpa(\"2.6\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withEmail(\"cornelia@example.com\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withAddress(\"10th street\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withSkills(\"C++\", \"Debugging\", \"Linux\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withEndorsements(\"Bill Gates\", \"Mark Cuban\", \"Elon Musk\", \"Barak Obama\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withPositions(\"UI Developer\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withPhone(\"9482224\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withEducation(\"Harvard\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withGpa(\"1.3\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withEmail(\"werner@example.com\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withAddress(\"michegan ave\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withSkills(\"C++\", \"C#\", \"Java\", \"excel\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withEndorsements(\"Elon Musk\", \"Mark Cuban\").build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withPhone(\"9482427\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withEducation(\"HARVARD\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withGpa(\"4.0\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withEmail(\"lydia@example.com\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withAddress(\"little tokyo\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withSkills(\"C++\", \"Java\", \"MATlab\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withPositions(\"Civil Servant\", \"Project Manager\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withEndorsements(\"Stan Lee\", \"Barak Obama\").build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withPhone(\"9482442\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withEducation(\"NUS\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withGpa(\"0.0\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withEmail(\"anna@example.com\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withAddress(\"4th street\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withSkills(\"Linux\", \"PHP\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withPositions(\"Data Analyst\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withEndorsements(\"Mark Zuckerberg\").build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withPhone(\"8482424\")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withEducation(\"NTU\")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withGpa(\"1.6\")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withEmail(\"stefan@example.com\")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withPhone(\"8482131\")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withEducation(\"Nus\")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withGpa(\"2.8\")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withEmail(\"hans@example.com\")"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    // Persons without tags, used for some tests as a temporary work-around"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public static final Person JOHN \u003d new PersonBuilder().withName(\"John Peer\")"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withEmail(\"john@example.com\")"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withEducation(\"NUS\")"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withGpa(\"3.4\").build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public static final Person KATIE \u003d new PersonBuilder().withName(\"Katie Ming\")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withPhone(\"98765432\")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withEmail(\"katie@example.com\")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withEducation(\"NTU\")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withGpa(\"3.1\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\").build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public static final Person LARS \u003d new PersonBuilder().withName(\"Lars Schaaf\")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withPhone(\"95352563\")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withEducation(\"NTU\")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withGpa(\"3.2\")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withEmail(\"heinz@example.com\")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withEducation(VALID_EDUCATION_AMY).withGpa(VALID_GPA_AMY)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withEducation(VALID_EDUCATION_BOB).withGpa(VALID_GPA_BOB)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersonsNoTags() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(JOHN, KATIE, LARS));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 5,
      "-": 54,
      "DMGreenhouse": 93
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/BrowserPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private SimpleObjectProperty\u003cPerson\u003e selectedPerson \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanelHandle browserPanelHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel(selectedPerson));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(browserPanel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // default web page"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BrowserPanel.DEFAULT_PAGE, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // associated web page of a person"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e selectedPerson.set(ALICE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        URL expectedPersonUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + ALICE.getName()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                .fullName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        URL expectedPersonUrlLogin \u003d new URL(\"https://www.linkedin.com/m/login/\"); //Login Page returned first"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(browserPanelHandle);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        // there are two options depending on if the page has been logged into or not"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            assertEquals(expectedPersonUrlLogin, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        } catch (Exception AssertionError) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "            assertEquals(expectedPersonUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 4,
      "-": 39,
      "DMGreenhouse": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/HelpWindowTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assume.assumeFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.HelpWindow.USERGUIDE_FILE_PATH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindowTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindowHandle helpWindowHandle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e helpWindow \u003d new HelpWindow());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.registerStage(helpWindow::getRoot);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindowHandle \u003d new HelpWindowHandle(helpWindow.getRoot());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedHelpPage \u003d HelpWindow.class.getResource(USERGUIDE_FILE_PATH);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedHelpPage, helpWindowHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isShowing_helpWindowIsShowing_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::show);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(helpWindow.isShowing());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isShowing_helpWindowIsHiding_returnsFalse() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(helpWindow.isShowing());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus_helpWindowNotFocused_focused() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: This test skip can be removed once this bug is fixed:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // https://github.com/javafxports/openjdk-jfx/issues/50"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        //"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // When there are two stages (stage1 and stage2) shown,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // stage1 is in focus and stage2.requestFocus() is called,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // we expect that stage1.isFocused() will return false while"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // stage2.isFocused() returns true. However, as reported in the bug report,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // both stage1.isFocused() and stage2.isFocused() returns true,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // which fails the test."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assumeFalse(\"Test skipped in headless mode: Window focus behavior is buggy.\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                guiRobot.isHeadlessMode());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::show);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Focus on another stage to remove focus from the helpWindow"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            Stage temporaryStage \u003d new Stage();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            temporaryStage.show();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            temporaryStage.requestFocus();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(helpWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::focus);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(helpWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 2,
      "-": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/PersonCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        Person personWithNoTags \u003d new PersonBuilder().withSkills(new String[0]).build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard personCard \u003d new PersonCard(personWithNoTags, 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(personCard);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardDisplay(personCard, personWithNoTags, 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personWithTags \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        personCard \u003d new PersonCard(personWithTags, 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(personCard);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardDisplay(personCard, personWithTags, 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard personCard \u003d new PersonCard(person, 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // same person, same index -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard copy \u003d new PersonCard(person, 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(personCard.equals(copy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(personCard.equals(personCard));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(personCard.equals(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(personCard.equals(0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person, same index -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Person differentPerson \u003d new PersonBuilder().withName(\"differentName\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(personCard.equals(new PersonCard(differentPerson, 0)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // same person, different index -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(personCard.equals(new PersonCard(person, 1)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code personCard} displays the details of {@code expectedPerson} correctly and matches"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCardDisplay(PersonCard personCard, Person expectedPerson, int expectedId) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle personCardHandle \u003d new PersonCardHandle(personCard.getRoot());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", personCardHandle.getId());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify person details are displayed correctly"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardDisplaysPerson(expectedPerson, personCardHandle);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 71,
      "DMGreenhouse": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/PersonListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonsNoTags;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abwilli"
        },
        "content": "import seedu.address.model.person.Education;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import seedu.address.model.person.Gpa;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abwilli"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final ObservableList\u003cPerson\u003e TYPICAL_PERSONS \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            FXCollections.observableList(getTypicalPersonsNoTags());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final SimpleObjectProperty\u003cPerson\u003e selectedPerson \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanelHandle personListPanelHandle;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        initUi(TYPICAL_PERSONS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_PERSONS.size(); i++) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            personListPanelHandle.navigateToCard(TYPICAL_PERSONS.get(i));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            Person expectedPerson \u003d TYPICAL_PERSONS.get(i);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            PersonCardHandle actualCard \u003d personListPanelHandle.getPersonCardHandle(i);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysPerson(expectedPerson, actualCard);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void selection_modelSelectedPersonChanged_selectionChanges() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        initUi(TYPICAL_PERSONS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Person secondPerson \u003d TYPICAL_PERSONS.get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e selectedPerson.set(secondPerson));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle expectedPerson \u003d personListPanelHandle.getPersonCardHandle(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle selectedPerson \u003d personListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardEquals(expectedPerson, selectedPerson);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifies that creating and deleting large number of persons in {@code PersonListPanel} requires lesser than"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void performanceTest() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cPerson\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }, \"Creation and deletion of person cards exceeded time limit\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a list of persons containing {@code personCount} persons that is used to populate the"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code PersonListPanel}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private ObservableList\u003cPerson\u003e createBackingList(int personCount) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cPerson\u003e backingList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c personCount; i++) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            Name name \u003d new Name(i + \"a\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            Phone phone \u003d new Phone(\"000\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            Email email \u003d new Email(\"a@aa\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "charnixon"
        },
        "content": "            Education education \u003d new Education(\"aaa\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "            Gpa gpa \u003d new Gpa(\"1\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            Address address \u003d new Address(\"a\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "charnixon"
        },
        "content": "            Person person \u003d new Person(name, phone, email, education, gpa, address, Collections.emptySet());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            backingList.add(person);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return backingList;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes {@code personListPanelHandle} with a {@code PersonListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code PersonListPanel}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initUi(ObservableList\u003cPerson\u003e backingList) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonListPanel personListPanel \u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                new PersonListPanel(backingList, selectedPerson, selectedPerson::set);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(personListPanel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelHandle \u003d new PersonListPanelHandle(getChildNode(personListPanel.getRoot(),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                PersonListPanelHandle.PERSON_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 1,
      "abwilli": 2,
      "charnixon": 2,
      "-": 102,
      "DMGreenhouse": 8
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EDUCATION_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GPA_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SKILL_DESC_JAVA;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SKILL_DESC_PYTHON;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abwilli"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SKILL;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "// import org.junit.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "abwilli"
        },
        "content": "import seedu.address.model.tag.SkillsTag;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * TODO: fix system test problem: @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Person toAdd \u003d AMY;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                + EMAIL_DESC_AMY + \"   \" + EDUCATION_DESC_AMY + \"   \" + GPA_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                + SKILL_DESC_PYTHON;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except phone and email"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add to empty address book -\u003e added */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ALICE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + SKILL_DESC_PYTHON + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                + SKILL_DESC_JAVA + EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person, missing tags -\u003e added */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before adding -\u003e added */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(CARL);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person -\u003e rejected */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different email -\u003e rejected */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different address -\u003e rejected */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_SKILL.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing phone -\u003e rejected */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing email -\u003e rejected */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing address -\u003e rejected */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        assertCommandFailure(command, SkillsTag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Person toAdd) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Person)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Person toAdd) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(toAdd);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 9,
      "abwilli": 2,
      "-": 236,
      "DMGreenhouse": 5
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "// import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * TODO: fix system test problem: @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo clearing address book -\u003e original address book restored */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo clearing address book -\u003e cleared */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in person list and clears address book -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before clearing -\u003e entire address book cleared */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear empty address book -\u003e cleared */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 4,
      "-": 99
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "// import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * TODO: fix system test problem: @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the first person in the list, command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_PERSON.getOneBased() + \"       \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Person deletedPerson \u003d removePerson(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the last person in the list -\u003e deleted */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo deleting the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo deleting the last person in the list -\u003e last person deleted again */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        removePerson(modelBeforeDeletingLast, lastPersonIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the middle person in the list -\u003e deleted */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middlePersonIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(middlePersonIndex);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, delete index within bounds of address book and person list -\u003e deleted */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, delete index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------- Performing delete operation while a person card is selected ------------------------ */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the selected person -\u003e person list panel selects the person before the deleted person */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(selectedIndex);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        deletedPerson \u003d removePerson(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                getModel().getAddressBook().getPersonList().size() + 1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the {@code Person} at the specified {@code index} in {@code model}\u0027s address book."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the removed person"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private Person removePerson(Model model, Index index) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Person targetPerson \u003d getPerson(model, index);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(targetPerson);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return targetPerson;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the person at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        Person deletedPerson \u003d removePerson(expectedModel, toDelete);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 4,
      "-": 191
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SKILL_DESC_JAVA;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SKILL_DESC_PYTHON;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SKILL_JAVA;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abwilli"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SKILL;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "// import org.junit.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "abwilli"
        },
        "content": "import seedu.address.model.tag.SkillsTag;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * TODO: fix system test problem: @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \" + SKILL_DESC_JAVA + \" \";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(BOB).withSkills(VALID_SKILL_JAVA).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo editing the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo editing the last person in the list -\u003e last person edited again */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                + ADDRESS_DESC_BOB + SKILL_DESC_PYTHON + SKILL_DESC_JAVA;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, BOB);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different name -\u003e edited */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(getModel().getFilteredPersonList().get(index.getZeroBased()), BOB);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                + ADDRESS_DESC_BOB + SKILL_DESC_PYTHON + SKILL_DESC_JAVA;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(BOB).withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different phone and email"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                + ADDRESS_DESC_BOB + SKILL_DESC_PYTHON + SKILL_DESC_JAVA;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_SKILL.getPrefix();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withSkills().build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * browser url changes"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(index);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                + ADDRESS_DESC_AMY + SKILL_DESC_PYTHON;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // browser\u0027s url is updated to reflect the new person\u0027s name"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, AMY, index);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "                SkillsTag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(PersonUtil.getAddCommand(BOB));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                + ADDRESS_DESC_BOB + SKILL_DESC_PYTHON + SKILL_DESC_JAVA;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                + ADDRESS_DESC_BOB + SKILL_DESC_JAVA;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different address -\u003e rejected */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                + ADDRESS_DESC_AMY + SKILL_DESC_PYTHON + SKILL_DESC_JAVA;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                + ADDRESS_DESC_BOB + SKILL_DESC_PYTHON + SKILL_DESC_JAVA;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different email -\u003e rejected */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "DMGreenhouse"
        },
        "content": "                + ADDRESS_DESC_BOB + SKILL_DESC_PYTHON + SKILL_DESC_JAVA;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedPerson, null);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * updated to values specified {@code editedPerson}.\u003cbr\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 6,
      "abwilli": 2,
      "-": 277,
      "DMGreenhouse": 15
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "// import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abwilli"
        },
        "content": "import seedu.address.model.tag.SkillsTag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * TODO: fix system test problem: @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: repeat previous find command where person list is displaying the persons we are finding"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getModel().getAddressBook().getPersonList().contains(BENSON));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, keyword is substring of name -\u003e 0 persons found */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person not in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find phone number of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find address of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getAddress().value;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find email of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find tags of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "        List\u003cSkillsTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find while a person is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in empty address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"FiNd Meier\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 5,
      "abwilli": 1,
      "-": 191
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "// import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * TODO: fix system test problem: @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().click();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().click();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowNotOpen();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * TODO: fix system test problem: @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 7,
      "-": 104
    }
  },
  {
    "path": "src/test/java/systemtests/SampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "// import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * TODO: fix system test problem: @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBook_dataFileDoesNotExist_loadSampleData() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Person[] expectedList \u003d SampleDataUtil.getSamplePersons();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 4,
      "-": 49
    }
  },
  {
    "path": "src/test/java/systemtests/SelectCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "// import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     * TODO: fix system test problem: @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "barisbatuhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the first card in the person list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the last card in the person list -\u003e selected */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Index personCount \u003d getLastIndex(getModel());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, personCount);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the middle card in the person list -\u003e selected */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, select index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, select index within bounds of address book and person list -\u003e selected */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select from empty address book -\u003e rejected */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing select command with the"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex} of the selected person.\u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_SELECT_PERSON_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        int preExecutionSelectedCardIndex \u003d getPersonListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "barisbatuhan": 5,
      "-": 152
    }
  }
]
