[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nivenang"
        },
        "content": "\u003d TravelBuddy"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "https://travis-ci.org/cs2103-ay1819s2-w11-3/main[image:https://travis-ci.org/cs2103-ay1819s2-w11-3/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "https://ci.appveyor.com/project/chung-ming/main/branch/master[image:https://ci.appveyor.com/api/projects/status/qc6o8alt6uhm8qhp/branch/master?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "https://coveralls.io/github/cs2103-ay1819s2-w11-3/main?branch\u003dmaster[image:https://coveralls.io/repos/github/cs2103-ay1819s2-w11-3/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nivenang"
        },
        "content": "TravelBuddy is a desktop Travel Guide application for travel enthusiasts to record places previously visited."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nivenang"
        },
        "content": "With TravelBuddy, you will be able to have a record of all the places you have visited, describe and rate the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nivenang"
        },
        "content": "places you have been to, and easily find them when you need it using a CLI (Command Line Interface). TravelBuddy stores all your information offline, so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "you can access all your vital travel information even without data connection."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "* The original source of the code was used with permission from the https://github.com/se-edu/[AddressBook-Level4"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "project] created by _SE-EDU_."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 6,
      "nivenang": 5,
      "-": 26
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "  ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "      \"githubId\": \"chung-ming\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "      \"displayName\": \"Arielyte Tsen Chung Ming\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "      \"authorNames\": [\"chung-ming\", \"Tsen Chung Ming\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "      \"githubId\": \"shaungohsc\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "      \"displayName\": \"Goh Shau Cher Shaun\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "      \"authorNames\": [\"shaungohsc\", \"Shaun Goh\", \"Shaun\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "      \"githubId\": \"nivenang\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "      \"displayName\": \"Niven Ang Jia Hao\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "      \"authorNames\": [\"nivenang\", \"Niven Ang Jia Hao\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "      \"githubId\": \"PremBagda\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "      \"displayName\": \"Prem Rajeshkumar Bagdawala\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "      \"authorNames\": [\"PremBagda\", \"Prem Rajeshkumar Bagdawala\", \"Prem Bagdawala\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PremBagda": 25
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "mainClassName \u003d \u0027seedu.travel.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    implementation \u0027com.google.code.gson:gson:2.8.5\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    implementation \u0027com.google.maps:google-maps-services:0.9.3\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    implementation \u0027org.slf4j:slf4j-simple:1.7.25\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    archiveName \u003d \u0027travelBuddy.jar\u0027"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            test.include \u0027seedu/travel/**\u0027"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            test.include \u0027seedu/travel/ui/**\u0027"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            test.exclude \u0027seedu/travel/ui/**\u0027"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        \u0027site-name\u0027: \u0027TravelBuddy\u0027,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/cs2103-ay1819s2-w11-3/main\u0027,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 10,
      "-": 230
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "TravelBuddy was developed by the W11-3 team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003d\u003d\u003d Arielyte Tsen Chung Ming"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "image::chung-ming.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "{empty}[https://github.com/chung-ming[github]] [\u003c\u003cchung-ming#,portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nivenang"
        },
        "content": "Role: Project Advisor +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nivenang"
        },
        "content": "Responsibilities: Integration"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nivenang"
        },
        "content": "\u003d\u003d\u003d Niven Ang Jia Hao"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nivenang"
        },
        "content": "image::nivenang.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "{empty}[http://github.com/nivenang[github]] [\u003c\u003cnivenang#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nivenang"
        },
        "content": "Responsibilities: Testing"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "\u003d\u003d\u003d Prem Rajeshkumar Bagdawala"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "image::prembagda.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "{empty}[https://github.com/PremBagda[github]] [\u003c\u003cPremBagda#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nivenang"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nivenang"
        },
        "content": "Responsibilities: Deliverables, Deadlines, Scheduling, Tracking"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "\u003d\u003d\u003d Goh Shau Cher, Shaun"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "image::shaungohsc.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "{empty}[http://github.com/shaungohsc[github]] [\u003c\u003cshaungohsc#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nivenang"
        },
        "content": "Responsibilities: Code Quality, Documentation"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "shaungohsc": 2,
      "chung-ming": 9,
      "PremBagda": 1,
      "nivenang": 8,
      "-": 27
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/cs2103-ay1819s2-w11-3/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "* *Email us* : You can reach our developers at `arielyte[at]comp.nus.edu.sg, premrb[at]u.nus.edu,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "nivenangjiahao[at]gmail.com and shaun.goh[at]u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 3,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003d TravelBuddy - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ":repoURL: https://github.com/cs2103-ay1819s2-w11-3/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "By: `CS2103T W11-3 Team`      Since: `Feb 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "Welcome to the TravelBuddy developer guide, put together by Chung Ming, Prem, Niven and Shaun."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "In this guide, you will find enough information to get your started on contributing to the TravelBuddy source code."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "This section gives a quick guide to getting started with the TravelBuddy source code on your machine."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ". Run the `seedu.travel.MainApp` and try a few commands"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "This section provides a high-level overview of overall architecture of TravelBuddy,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "including the design and structure of components and their constituent classes."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "image::SDforDeletePlace.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "The `UI` component uses JavaFx UI framework. The *layout* of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "The \u0027UI\u0027 component *controllers* are found in the `src/main/java/seedu/address/ui` folder. Each class corresponds to a specific `.fxml` file."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "The UI consists of a `MainWindow` that is made up of various parts specified below."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "All parts inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "*Brief overview* of each UI Component:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "`MainWindow`: Consists of the main menu with `File` and `Help` dropdowns and the remaining UI parts below."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "* `HelpWindow`: Webview to display UserGuide.html"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "* `CommandBox`: Directly below the main menu, CLI displayed here"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "* `ResultDisplay`: Displays CLI feedback to user, (eg. `Unknown command`, `Invalid command format!`)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "* `StatusBarFooter`: At the bottom of MainWindow, reports the status of the TravelBudy application"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "* `PlaceListPanel`: On the left of BrowserPanel, displays Places as a VBox of PlaceListCards"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "** `PlaceListCard`: Labels for the Display index and Place data fields (CountryCode, Rating etc.) in a VBox the left,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "Labels that display Name and actual Place data (CountryCode, Rating etc) in a VBox on the right."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "* RightParentPanel: Parent panel for both `DisplayListPanel` and `ExtendedPlacePanel`,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "contains helper methods for switching functionality, interacts with model and logic"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "** `DisplayListPanel`: Parent panel for analytics of all Places, the `generate` command displays this panel"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "*** `DisplayCard`: Displays `Chart` data in a bar graph"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "** `ExtendedPlacePanel`: Display an expanded view of all Place data. Photo attachments to be included here as well in future releases (beyond v1.4)."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "* `BrowserPanel`: *_Deprecated._* Opens on clicking the PlaceListCard, on the right of the PlaceListPanel."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "*All CSS code can be found in `DarkTheme.css` and `Extensions.css`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ".  `Logic` uses the `TravelBuddyParser` class to parse the user command."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a place)."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "* stores the place data."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPlace\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `TravelBuddy`, which `Place` can reference. This would allow `Address"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "PremBagda"
        },
        "content": " Book` to only require one `Tag` object per unique `Tag`, instead of each `Place` needing their own `Tag` object. An"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "PremBagda"
        },
        "content": " example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "* can save the TravelBuddy data in json format and read it back."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "Classes used by multiple components are in the `seedu.travel.commons` package."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "Called by the `undo` and `redo` commands to undo and redo changes to TravelBuddy Place entries."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "Undoable commands include `add` `edit` `delete` `deletem` `clear` `generate` and \u0027redo\u0027"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "Redoable commands include `add` `edit` `delete` `deletem` `clear` `generate` and \u0027undo\u0027"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedTravelBuddy`."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "It extends `TravelBuddy` with an undo/redo history, stored internally as an `travelBuddyStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "* `VersionedTravelBuddy#commit()` -- Saves the current TravelBuddy state in its history."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "* `VersionedTravelBuddy#undo()` -- Restores the previous TravelBuddy state from its history."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "* `VersionedTravelBuddy#redo()` -- Restores a previously undone TravelBuddy state from its history."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitTravelBuddy()`, `Model#undoTravelBuddy()` and `Model#redoTravelBuddy()` respectively."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedTravelBuddy` will be initialized with the initial TravelBuddy state, and the `currentStatePointer` pointing to that single TravelBuddy state."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th place in TravelBuddy. The `delete` command calls"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "`Model#commitTravelBuddy()`, causing the modified state of TravelBuddy after the `delete 5` command executes to be saved in the `travelBuddyStateList`, and the `currentStatePointer` is shifted to the newly inserted TravelBuddy state."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new place. The `add` command also calls `Model#commitTravelBuddy()"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "`, causing another modified TravelBuddy state to be saved into the `travelBuddyStateList`."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "If a command fails its execution, it will not call `Model#commitTravelBuddy()`, so the TravelBuddy state will not be saved into the `travelBuddyStateList`."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "Step 4. The user now decides that adding the place was a mistake, and decides to undo that action by executing the"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "`undo` command. The `undo` command will call `Model#undoTravelBuddy()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous TravelBuddy state, and restores the TravelBuddy to that state."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial TravelBuddy state, then there are no previous TravelBuddy states to restore. The `undo` command uses `Model#canUndoTravelBuddy()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoTravelBuddy()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores TravelBuddy to that state."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "If the `currentStatePointer` is at index `travelBuddyStateList.size() - 1`, pointing to the latest TravelBuddy state, then there are no undone TravelBuddy states to restore. The `redo` command uses `Model#canRedoTravelBuddy()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify TravelBuddy, such as `list`, will usually not call `Model#commitTravelBuddy()`, `Model#undoTravelBuddy()` or `Model#redoTravelBuddy()`. Thus, the `travelBuddyStateList` remains unchanged."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitTravelBuddy()`. Since the `currentStatePointer` is not pointing at the end of the `travelBuddyStateList`, all TravelBuddy states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire TravelBuddy."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the place being deleted)."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of TravelBuddy states."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedTravelBuddy`."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "nivenang"
        },
        "content": "// tag::search[]"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "nivenang"
        },
        "content": "\u003d\u003d\u003d Search Feature"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "nivenang"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "nivenang"
        },
        "content": "The following diagram shows how the search feature works:"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "nivenang"
        },
        "content": "image::SearchCommandSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "nivenang"
        },
        "content": "Figure 3.2.1.1 Sequence Diagram for `search` command"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "nivenang"
        },
        "content": "The control flow of the sequence diagram above is as follows:"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "nivenang"
        },
        "content": ". A command with the command word `search` followed by argument(s) is used entered by the user."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "nivenang"
        },
        "content": ". `LogicManager` receives the `execute` command and calls the `parseCommand` method in `TravelBuddyParser`."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "nivenang"
        },
        "content": ". `TravelBuddyParser` parses `search` as the command and a `SearchCommandParser` will be instantiated to further parse the command."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "nivenang"
        },
        "content": ". `SearchCommandParser` receives the fields if at least one field is provided, a NameContainsKeywordPredicate will be instantiated with the fields as the predicate."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "nivenang"
        },
        "content": ". `SearchCommand` will be created and returned to `LogicManager`."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "nivenang"
        },
        "content": ". The `execute` command of `SearchCommand` is then called by `LogicManager`."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "nivenang"
        },
        "content": ". The list is updated in the `Model` by `SearchCommand`."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "nivenang"
        },
        "content": ". A `CommandResult` is instantiated and returned to `LogicManager`."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "nivenang"
        },
        "content": "The search feature comprises of:"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "nivenang"
        },
        "content": "* `Search by Name`"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "nivenang"
        },
        "content": "* `Search by Rating`"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "nivenang"
        },
        "content": "* `Search by Tags`"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "nivenang"
        },
        "content": "* `Search by Country`"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "nivenang"
        },
        "content": "* `Search by Year`"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "nivenang"
        },
        "content": "The various search features are differentiated by the `Parser` which is called using different command words and the `Predicate` to filter arguments."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "nivenang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Search Name Feature"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "nivenang"
        },
        "content": "The command word for search name is `search` and is parsed by `TravelBuddyParser`. The arguments are then passed into `SearchCommandParser`."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "nivenang"
        },
        "content": "The name arguments entered by the user are stored in a list of keywords and passed into `NameContainsKeywordsPredicate`, where the list is converted into a stream and individually matched to the names of each entry in TravelBuddy."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "nivenang"
        },
        "content": "The search name mechanism is facilitated by `SearchCommand`, which extends `Command` with a predicate that specifies the conditions of the name of the place to be chosen from TravelBuddy."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "nivenang"
        },
        "content": "Given below is an example usage scenario and how the search mechanism behaves at each step."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "nivenang"
        },
        "content": "Step 1. The user launches the application and sees the GUI with the user\u0027s list of places."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "nivenang"
        },
        "content": "image::UIsearch.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "nivenang"
        },
        "content": "Step 2. The user executes `search Singapore` command to search for all entries in TravelBuddy with `Singapore` in its name."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "nivenang"
        },
        "content": "The user input will be passed into `LogicManager#execute()`, which in turn uses `TravelBuddyParser#parseCommand()`. Since the argument is `search`, `SearchCommandParser#parse(arguments)` will be called to parse the arguments to be used in `SearchCommand`."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "nivenang"
        },
        "content": "The parsed arguments will be used as a predicate to filter out entries that satisfy the predicate to be displayed."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "nivenang"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "nivenang"
        },
        "content": "The command `search` is in lower-case. Mixed-case or upper-case commands are not recognised by the application."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "nivenang"
        },
        "content": "Step 3. The filtered list is now displayed according to the requirements set by the user input."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "nivenang"
        },
        "content": "image::UIsearchresults.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "nivenang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Search Rating Feature"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "nivenang"
        },
        "content": "The command word for search rating is `searchr` and is parsed by `TravelBuddyParser`. The arguments are then passed into `SearchRatingCommandParser`."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "nivenang"
        },
        "content": "The rating arguments entered by the user are stored in a list of keywords and passed into `RatingContainsKeywordsPredicate`, where the list is converted into a stream and individually matched to the rating of each entry in TravelBuddy."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "nivenang"
        },
        "content": "The search rating mechanism is facilitated by `SearchRatingCommand`, which extends `Command` with a predicate that specifies the conditions of the rating of the place to be chosen from TravelBuddy."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "nivenang"
        },
        "content": "Given below is an example usage scenario and how the search rating mechanism behaves at each step."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "nivenang"
        },
        "content": "Step 1. The user launches the application and sees the GUI with the user\u0027s list of places."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "pimage::UIsearchrating.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "nivenang"
        },
        "content": "Step 2. The user executes `searchr 4` command to search for all entries in TravelBuddy with `4` as its rating."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "nivenang"
        },
        "content": "The user input will be passed into `LogicManager#execute()`, which in turn uses `TravelBuddyParser#parseCommand()`. Since"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "the argument is `searchr`, `SearchRatingCommandParser#parse(arguments)` will be called to parse the arguments to be"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "used in `SearchRatingCommand`."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "nivenang"
        },
        "content": "The parsed arguments will be used as a predicate to filter out entries that satisfy the predicate to be displayed."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "nivenang"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "nivenang"
        },
        "content": "The command `searchr` is in lower-case. Mixed-case or upper-case commands are not recognised by the application."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "nivenang"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "nivenang"
        },
        "content": "The arguments for `searchr` range from 1 to 5. Non-integer values outside the range are not recognised by the application."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "nivenang"
        },
        "content": "Step 3. The filtered list is now displayed according to the requirements set by the user input."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "nivenang"
        },
        "content": "image::UIsearchratingresults.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "nivenang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Search Tags Feature"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "nivenang"
        },
        "content": "The command word for search tags is `searcht` and is parsed by `TravelBuddyParser`. The arguments are then passed into `SearchTagsCommandParser`."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "nivenang"
        },
        "content": "The tags arguments entered by the user are stored in a list of keywords and passed into `TagsContainsKeywordsPredicate`, where the list is converted into a stream and individually matched to the tags of each entry in TravelBuddy."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "nivenang"
        },
        "content": "The search tags mechanism is facilitated by `SearchTagsCommand`, which extends `Command` with a predicate that specifies the conditions of the tags of the place to be chosen from TravelBuddy."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "nivenang"
        },
        "content": "Given below is an example usage scenario and how the search tags mechanism behaves at each step."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "nivenang"
        },
        "content": "Step 1. The user launches the application and sees the GUI with the user\u0027s list of places."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "nivenang"
        },
        "content": "image::UIsearchtags.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "nivenang"
        },
        "content": "Step 2. The user executes `searcht distillery` command to search for all entries in TravelBuddy with `distillery`"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "nivenang"
        },
        "content": "as its tag. The user input will be passed into `LogicManager#execute()`, which in turn uses"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "nivenang"
        },
        "content": "`TravelBuddyParser#parseCommand()`. Since the argument is `searcht`, `SearchTagsCommandParser#parse(arguments)`"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "will be called to parse the arguments to be used in `SearchTagsCommand`. The parsed arguments will be used as a"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "predicate to filter out entries that satisfy the predicate to be displayed."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "nivenang"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "nivenang"
        },
        "content": "The command `searcht` is in lower-case. Mixed-case or upper-case commands are not recognised by the application."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "nivenang"
        },
        "content": "Step 3. The filtered list is now displayed according to the requirements set by the user input."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "nivenang"
        },
        "content": "image::UIsearchtagsresults.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "nivenang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Search Country Feature"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "nivenang"
        },
        "content": "The command word for search country is `searchc` and is parsed by `TravelBuddyParser`. The arguments are then passed into `SearchCountryCommandParser`."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "nivenang"
        },
        "content": "The country code arguments entered by the user are stored in a list of keywords and passed into `CountryCodeContainsKeywordsPredicate`, where the list is converted into a stream and individually matched to the country code of each entry in TravelBuddy."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "nivenang"
        },
        "content": "The search country mechanism is facilitated by `SearchCountryCommand`, which extends `Command` with a predicate that specifies the conditions of the country code of the place to be chosen from TravelBuddy."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "nivenang"
        },
        "content": "Given below is an example usage scenario and how the search country mechanism behaves at each step."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "nivenang"
        },
        "content": "Step 1. The user launches the application and sees the GUI with the user\u0027s list of places."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "nivenang"
        },
        "content": "image::UIsearchcountry.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "nivenang"
        },
        "content": "Step 2. The user executes `searchc SGP JPN` command to search for all entries in TravelBuddy with `SGP` or `JPN`"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "nivenang"
        },
        "content": "as its country. The `searchc` command will call `LogicManager#execute()`, which in turn uses"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "nivenang"
        },
        "content": "`TravelBuddyParser#parseCommand()`. Since the argument is `searchc`, `SearchCountryCommandParser#parse(arguments)`"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "nivenang"
        },
        "content": "will be called to parse the arguments to be used in `SearchCountryCommand`. The parsed arguments will be used as a"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "nivenang"
        },
        "content": "predicate to filter out entries that satisfy the predicate to be displayed."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "nivenang"
        },
        "content": "image::UIsearchcountryresults.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "nivenang"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "nivenang"
        },
        "content": "The command `searchc` is in lower-case. Mixed-case or upper-case commands are not recognised by the application."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "nivenang"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "nivenang"
        },
        "content": "The country code arguments for `searchc` must be valid 3-letter ISO-3166 country codes."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "nivenang"
        },
        "content": "Step 3. The filtered list is now displayed according to the requirements set by the user input."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "nivenang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Search Year Feature"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "nivenang"
        },
        "content": "The command word for search year is `searchyear` and is parsed by `TravelBuddyParser`. The arguments are then passed into `SearchYearCommandParser`."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "nivenang"
        },
        "content": "The year arguments entered by the user are stored in a list of keywords and passed into `YearContainsKeywordsPredicate`, where the list is converted into a stream and individually matched to the year of visit of each entry in TravelBuddy."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "nivenang"
        },
        "content": "The search year mechanism is facilitated by `SearchYearCommand`, which extends `Command` with a predicate that specifies the conditions of the year of visit of the place to be chosen from TravelBuddy."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "nivenang"
        },
        "content": "Given below is an example usage scenario and how the search year mechanism behaves at each step."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "nivenang"
        },
        "content": "Step 1. The user launches the application and sees the GUI with the user\u0027s list of places."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "nivenang"
        },
        "content": "image::UIsearchyear.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "nivenang"
        },
        "content": "Step 2. The user executes `searchyear 2016` command to search for all entries in TravelBuddy with `2016`"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "nivenang"
        },
        "content": "as its year visited. The `searchyear` command will call `LogicManager#execute()`, which in turn uses"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "nivenang"
        },
        "content": "`TravelBuddyParser#parseCommand()`. Since the argument is `searchyear`, `SearchYearCommandParser#parse(arguments)`"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "nivenang"
        },
        "content": "will be called to parse the arguments to be used in `SearchYearCommand`. The parsed arguments will be used as a"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "nivenang"
        },
        "content": "predicate to filter out entries that satisfy the predicate to be displayed."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "nivenang"
        },
        "content": "image::UIsearchyearresults.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "nivenang"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "nivenang"
        },
        "content": "The command `searchyear` is in lower-case. Mixed-case or upper-case commands are not recognised by the application."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "nivenang"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "nivenang"
        },
        "content": "The year arguments range from 1900 to the current year. A single year, multiple years or a range of years can be passed in as arguments."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "nivenang"
        },
        "content": "Step 3. The filtered list is now displayed according to the requirements set by the user input."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "nivenang"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "nivenang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How search executes"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "nivenang"
        },
        "content": "* **Alternative 1 (current choice):** Matches entire keyword."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "nivenang"
        },
        "content": "** Pros: Easy to implement, searching is fast."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "nivenang"
        },
        "content": "** Cons: Unable to search partial keyword"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "nivenang"
        },
        "content": "** Example: `search Singapore` will return `National University of Singapore` but `search Singapor` will not."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "nivenang"
        },
        "content": "* **Alternative 2:** Remove whitespaces and check if the place contains the argument string."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "nivenang"
        },
        "content": "** Pros: Can match partial keywords."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "nivenang"
        },
        "content": "** Cons: Uses more processing power and time during checking."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "nivenang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support search commands"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "nivenang"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the user input keywords and places."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "developers of our project."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "nivenang"
        },
        "content": "** Cons: Inefficient as the entire list needs to be searched through."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "nivenang"
        },
        "content": "* **Alternative 2:** Use `HashMap` to map keywords to each place"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "nivenang"
        },
        "content": "** Pros: Faster searching as HashMap lookup runs in O(1) time."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "nivenang"
        },
        "content": "** Cons: Requires more memory as a separate HashMap needs to be stored."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "nivenang"
        },
        "content": "// end::search[]"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "// tag::countrycode[]"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "\u003d\u003d\u003d Add Feature"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "The `add` command is used to add a place into TravelBuddy. The user can add the following details related to the"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "place:"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "* Name"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "* Country Code"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "* Date Visited"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "* Rating"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "* Address"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "* Description"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "* Tag (Optional)"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "The Country Code adheres to the three-letters ISO-3166 standard. The full list of Country Codes can be found in"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "CountryCodes.adoc"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "Given below is a sequence of steps, illustrating the interaction between various classes when the add command is"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "entered."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "image::AddCommandSequenceDiagram.PNG[width\u003d\"800\"]"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "Figure 10: Add Command Sequence Diagram"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "Step 1: The user enters the command `add n/NUS Computing cc/SGP dv/10/10/2017 r/3 d/My School a/13 Computing Drive,"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "117417 t/faculty`."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "Step 2: The command is processed by the Logic component, which will then call `LogicManager#execute()`."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "Step 3: `TravelBuddyParser#parseCommand()` is invoked, which is also located in the Logic component."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "Step 4: `AddCommandParser#AddCommandParser()` is invoked."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "Step 5: The `AddCommandParser#parse()` is called and receives the command with the arguments given as a string."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "Step 6: The `AddCommandParser` interprets the arguments and constructs an `AddCommand`."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "Step 7: The `AddCommand` with a Place specified by the user is returned."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "Step 8: The `AddCommand#execute()` method is invoked."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "Step 9: The `Model#addPlace()` method is invoked with the argument `toAdd`. The `Model#commitTravelBuddy()` method is"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "PremBagda"
        },
        "content": " also invoked."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "Step 10: The `TravelBuddy#addPlace()` method is invoked by `Model` with the argument `toAdd`."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "Step 11: A result object is returned."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Add Command"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "Given below is an example usage scenario and what the user will see in the GUI."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "Step 1. The user launches the application and sees the GUI with no places."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "image::AddCommandStep1.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "Step 2. The user enters the full add command `add n/NUS Computing cc/SGP dv/10/10/2017 r/3 d/My School a/13 Computing Drive,"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "117417 t/faculty` to add the place to TravelBuddy and presses enter. TravelBuddy will start executing the steps mentioned in Figure 10."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "image::AddCommandStep2.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "The command `add` is in lower-case. Mixed-case or upper-case commands are not recognised by TravelBuddy."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to store Country Codes"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "* **Alternative 1 (current choice):** Use enum specified in java.util.Locales."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "** Pros: Easy to implement and contains all three-letters country codes specified in ISO-3166."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "** Cons: Slightly slow in searching for country code."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "* **Alternative 2:** Create own data structure containing most commonly traveled countries in the world."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "** Pros: Locating country code in data structure would be faster than Alternative 1."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "** Cons: Tedious process of typing out country codes in the data structure."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "// end::countrycode[]"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "// tag::generate[]"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003d\u003d\u003d Generate Feature"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "The `generate` command is used to generate different charts in the application."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "At the GUI, the user enters the `generate` command, without any parameters. The UI takes in the input and passes it"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "on to `LogicManager#execute()` in the Logic. The`TravelBuddyParser#parseCommand()` is then called, which parses the"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "command and redirects to the `GenerateCommand` class."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "The `GenerateCommand#execute()` in Logic calls on Model to do two things:"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".  It stores the different country code found in TravelBuddy as keys, and stores the number of times each country"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "code appears in TravelBuddy as values."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".  A similar approach is done, except country code is now replaced with rating found in TravelBuddy as keys, and the"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "number of times each rating appears as values."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "Once the two sets of data are obtained, a new Chart object is created. The Chart object displays the data to the user."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003d\u003d\u003d\u003d Future Implementation"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "For future implementation, the task is to use JavaFX\u0027s charting library to create a chart that can be displayed"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "to the user, as seen in the figure below."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "image::Ui.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "Furthermore, the `generate` command will have user input to specify if they want to generate either a chart by"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "country or a chart by rating."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "// end::generate[]"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "logging destinations."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "the specified logging level"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "of just its size"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "flexibility in formatting."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "preview the end result of your edits. Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " Chrome`."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "are rendered."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "used as well."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.travel.ui` package."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "e.g. `seedu.travel.commons.StringUtilTest`"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " working). +"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "e.g. `seedu.travel.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "connected together. +"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "e.g. `seedu.travel.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "A project often depends on third-party libraries. For example, TravelBuddy depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "*Value proposition*: manage contacts faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "|`* * *` |user |add a new place |"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "|`* * *` |user |delete a place |remove entries that I no longer need"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "|`* * *` |user |find a place by name |locate details of places without having to go through the entire list"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "|`* *` |user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "seeing them by accident"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "|`*` |user with many places in the TravelBuddy |sort places by name |locate a place easily"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "(For all use cases below, the *System* is the `TravelBuddy` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "\u003d\u003d\u003d Use case: Delete place"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "1.  User requests to list places"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "2.  TravelBuddy shows a list of places"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "3.  User requests to delete a specific place in the list"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "4.  TravelBuddy deletes the place"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "** 3a1. TravelBuddy shows an error message."
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ".  Should be able to hold up to 1000 places without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "\u003d\u003d\u003d Deleting a place"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ". Deleting a place while all places are listed"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ".. Prerequisites: List all places using the `list` command. Multiple places in the list."
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "   Expected: No place is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "shaungohsc": 79,
      "chung-ming": 80,
      "PremBagda": 91,
      "nivenang": 182,
      "-": 591
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003d TravelBuddy - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ":repoURL: https://github.com/cs2103-ay1819s2-w11-3/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "By: `CS2103T W11-3 Team`      Since: `Mar 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "*TravelBuddy* is a desktop journal app for all your travel memories! Add all the places you\u0027ve been,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "attach photos (coming in Version 2.0), keep a diary, create custom tags and tag different places, and search through all of your places!"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nivenang"
        },
        "content": "It\u0027s 2019, and we understand your desire for transparency, so *TravelBuddy* will also"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "provide clear data visualisation and analytics in upcoming versions. *TravelBuddy* also solemnly pledges to not"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "collect or sell your data in any shape or form."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "*TravelBuddy* is also optimized for those who prefer to work with a *Command Line Interface* (CLI) while still having the"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "Here are the steps to get you started with using TravelBuddy:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".  Download the latest `travelBuddy.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your TravelBuddy."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nivenang"
        },
        "content": "Some example commands you can try:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "* *`list`* : lists all places"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "* **`add`**`n/NUS Computing cc/SGP dv/10/10/2018 r/5 d/No Description a/NUS School of Computing, COM1, 13 Computing"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "Drive, 117417` :"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "adds"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": " a place named `NUS Computing` to TravelBuddy."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "* **`delete`**`3` : deletes the 3rd place shown in the current list"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "* *`exit`* : exits the application"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nivenang"
        },
        "content": "Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "Before starting on the application, read through the below sections. They cover the format to be used for all the commands and the syntax that is to be followed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "Command Format"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "* Some commands may have a shortcut, which you can also use to execute the command e.g. for add, its shortcut is `a`,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "so you can either type `add n/NUS Computing` or `a n/NUS Computing`."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, NAME is a parameter which can be used as `add n/NUS Computing`."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/NUS Computing t/faculty` or as `n/NUS Computing`."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME r/RATING`, `r/RATING n/NAME` is also acceptable."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "The help page will be shown in another window, but you can resize and move it"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "around. This can be useful to refer to when using the app."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "\u003d\u003d\u003d Adding a place: `add`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nivenang"
        },
        "content": "The `add` command adds a place to TravelBuddy. +"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "Shortcut: `a` +"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "Format: `add n/NAME cc/COUNTRY_CODE dv/DATE_VISITED r/RATING d/DESCRIPTION a/ADDRESS [t/TAG]...`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nivenang"
        },
        "content": "A place can have any number of tags (including 0)."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nivenang"
        },
        "content": "image::addCommand.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "* `add n/NUS Computing cc/SGP dv/10/10/2018 r/5 d/No description a/NUS School of Computing, COM1, 13 Computing Drive,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "117417`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "* `add n/Raffles Hotel dv/08/07/2010 t/hotel d/This place is lovely cc/SGP a/Raffles Road r/5 t/staycation`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "\u003d\u003d\u003d Listing all places : `list`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nivenang"
        },
        "content": "The `list` command shows a list of all places in TravelBuddy. +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "Shortcut: `l` +"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nivenang"
        },
        "content": "Calling the `list` command will return a list of all the places in TravelBuddy as shown in the image below."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nivenang"
        },
        "content": "image::listCommand.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "\u003d\u003d\u003d Editing a place : `edit`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nivenang"
        },
        "content": "You can use the `edit` command to edit an existing place in TravelBuddy. +"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "Shortcut: `e` +"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "Format: `edit INDEX [n/NAME] [cc/COUNTRY_CODE] [dv/DATE_VISITED] [r/RATING] [d/DESCRIPTION] [a/ADDRESS] [t/TAG]...`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "* Edits the place at the specified `INDEX`. The index refers to the index number shown in the displayed place list. The"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "PremBagda"
        },
        "content": " index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nivenang"
        },
        "content": "* When editing tags, the existing tags of the place will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "* You can remove all the place\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nivenang"
        },
        "content": "The image below shows the list of places before the `edit` command is used."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nivenang"
        },
        "content": "image::editCommandBefore.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nivenang"
        },
        "content": "The following image below shows the edited list of places after the `edit` command is called."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nivenang"
        },
        "content": "image::editCommandAfter.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "* `edit 1 r/3 d/No description` +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "Edits the rating and description address of the 1st place to be `3` and `No description` respectively."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "* `edit 2 n/Raffles Hotel t/` +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "Edits the name of the 2nd place to be `Raffles Hotel` and clears all existing tags."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nivenang"
        },
        "content": "// tag::search[]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nivenang"
        },
        "content": "\u003d\u003d\u003d Searching places by name: `search`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nivenang"
        },
        "content": "The `search` command helps you to search for places whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nivenang"
        },
        "content": "Shortcut: `f` +"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nivenang"
        },
        "content": "Format: `search KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nivenang"
        },
        "content": "* The search is case insensitive. e.g `national` will match `National`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nivenang"
        },
        "content": "* The order of the keywords does not matter. e.g. `University National of Singapore` will match `National University of Singapore`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nivenang"
        },
        "content": "* Only full words will be matched e.g. `Nation` will not match `National`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nivenang"
        },
        "content": "* Places matching at least one keyword will be returned (i.e. `OR` search). e.g. `National Museum` will return `National Museum of Singapore`, `National University Hospital`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nivenang"
        },
        "content": "image::UIsearchresults.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nivenang"
        },
        "content": "* `search National` +"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nivenang"
        },
        "content": "Returns `National Museum of Singapore` and `National University Hospital`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nivenang"
        },
        "content": "* `search National Temple` +"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nivenang"
        },
        "content": "Returns any place having names `National` or `Temple`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nivenang"
        },
        "content": "\u003d\u003d\u003d Searching places by ratings: `searchr`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nivenang"
        },
        "content": "The `searchr` command helps you to search for places whose ratings match the specified rating from 1 to 5. +"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nivenang"
        },
        "content": "Format: `searchr INDEX [MORE_INDICES]`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nivenang"
        },
        "content": "* The search rating is from a range of 1 to 5. e.g `5` will return places with 5 star ratings."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nivenang"
        },
        "content": "* Only the ratings are searched."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nivenang"
        },
        "content": "****"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nivenang"
        },
        "content": "image::UIsearchratingresults.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nivenang"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nivenang"
        },
        "content": "* `searchr 5` +"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nivenang"
        },
        "content": "Returns a list of places with rating of `5`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nivenang"
        },
        "content": "* `searchr 4 5` +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nivenang"
        },
        "content": "Returns a list of places with ratings of `4` or `5`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nivenang"
        },
        "content": "\u003d\u003d\u003d Searching places by tags: `searcht`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nivenang"
        },
        "content": "The `searcht` command helps you to search for places whose tags correspond to any given keywords. +"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nivenang"
        },
        "content": "Format: `searcht KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nivenang"
        },
        "content": "****"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nivenang"
        },
        "content": "* The search is case insensitive. e.g `Temple` will match `temple`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nivenang"
        },
        "content": "* Only the tags are searched."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nivenang"
        },
        "content": "* Only full words will be matched e.g. `temp` will not match `temple`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nivenang"
        },
        "content": "* Places tagged with at least one matching keyword will be returned (i.e. `OR` search). e.g. `temple school` will return places tagged with `temple` or `school`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nivenang"
        },
        "content": "****"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nivenang"
        },
        "content": "image::UIsearchtagsresults.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nivenang"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nivenang"
        },
        "content": "* `searcht temple` +"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nivenang"
        },
        "content": "Returns a list of places tagged with `temple`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nivenang"
        },
        "content": "* `searcht temple school` +"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nivenang"
        },
        "content": "Returns a list of places tagged with `temple` or `school`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nivenang"
        },
        "content": "\u003d\u003d\u003d Searching places by country: `searchc`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nivenang"
        },
        "content": "The `searchc` command helps you to search for places whose country matches the specified ISO-3166 3-letter country code. +"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nivenang"
        },
        "content": "Format: `searchc KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nivenang"
        },
        "content": "****"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nivenang"
        },
        "content": "* The country code keywords for `searchc` must be valid 3-letter ISO-3166 country codes."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nivenang"
        },
        "content": "* The search country is from a list of ISO-3166 country codes. e.g `JPN` will return places located in Japan."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nivenang"
        },
        "content": "* Only the country is searched."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nivenang"
        },
        "content": "****"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nivenang"
        },
        "content": "image::UIsearchcountryresults.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nivenang"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nivenang"
        },
        "content": "* `searchc CHN` +"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nivenang"
        },
        "content": "Returns a list of places located in `China`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nivenang"
        },
        "content": "* `searchc JPN DEU` +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nivenang"
        },
        "content": "Returns a list of places located in either `Japan` or `Germany`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nivenang"
        },
        "content": "\u003d\u003d\u003d Searching places by year of visit: `searchyear`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nivenang"
        },
        "content": "The `searchyear` command helps you to search for places whose year of visit matches the specified year of interest."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nivenang"
        },
        "content": "Format: `searchyear KEYWORD [MORE_KEYWORDS]` OR +"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nivenang"
        },
        "content": "`searchyear KEYWORD-KEYWORD`"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nivenang"
        },
        "content": "****"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nivenang"
        },
        "content": "* The search year is bounded from 1900 to the current year. e.g `2016` will return places visited in the year 2016."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nivenang"
        },
        "content": "* Searches outside the bounds will issue a warning."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nivenang"
        },
        "content": "* The year keywords for `searchyear` can be entered as a range. e.g `2010-2017` will return all the places visited from `2010` to `2017`"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nivenang"
        },
        "content": "* Only the year of visit is searched."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nivenang"
        },
        "content": "****"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nivenang"
        },
        "content": "image::UIsearchyearresults.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nivenang"
        },
        "content": "* `searchyear 2017` +"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nivenang"
        },
        "content": "Returns a list of places visited in the year `2017`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "nivenang"
        },
        "content": "* `searchyear 2016 2018` +"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "nivenang"
        },
        "content": "Returns a list of places visited in the year `2016` or `2018`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "nivenang"
        },
        "content": "* `searchyear 2010-2017` +"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "nivenang"
        },
        "content": "Returns a list of places visited from `2010` to `2017`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "nivenang"
        },
        "content": "// end::search[]"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "\u003d\u003d\u003d Deleting a place : `delete`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "nivenang"
        },
        "content": "The `delete` command deletes the specified place from TravelBuddy. +"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "Shortcut: `d` +"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "* Deletes the place at the specified `INDEX`."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "* The index refers to the index number shown in the currently displayed list, on the left."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "nivenang"
        },
        "content": "The image below shows TravelBuddy before `delete` command is used."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "nivenang"
        },
        "content": "image::deleteCommandBefore.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "nivenang"
        },
        "content": "The following image below shows the result of using the `delete` command on the first place of interest."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "nivenang"
        },
        "content": "image::deleteCommandAfter.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "Deletes the 2nd place in TravelBuddy."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "nivenang"
        },
        "content": "* `search Raffles` +"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "Deletes the 1st place in the results of the `find` command."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "\u003d\u003d\u003d Deleting multiple places : `deletem`"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "nivenang"
        },
        "content": "The `deletem` command deletes multiple places from TravelBuddy\u0027s currently displayed list on the left. +"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "nivenang"
        },
        "content": "Format: `deletem START_INDEX END_INDEX`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "image::deletemExample.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "nivenang"
        },
        "content": "****"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "* Deletes multiple places from a specified range from `START_INDEX` to `END_INDEX`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "* Inclusive of both places specified by `START_INDEX` and `END_INDEX`."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "* The index refers to the index number to the left of each place name, ie. \"4. Jalan Kayu\""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "nivenang"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "nivenang"
        },
        "content": "****"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "nivenang"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "nivenang"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "`deletem 1 4` +"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "Deletes the 1st, 2nd, 3rd and 4th place in the currently displayed list on the left."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "* `search Singapore` +"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "nivenang"
        },
        "content": "`deletem 1 3` +"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "Deletes the 1st, 2nd and 3rd place in the results of the `search Singapore` command."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "\u003d\u003d\u003d Selecting a place : `select`"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "nivenang"
        },
        "content": "The `select` command selects the place identified by the index number used in the currently displayed list on the left,"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "which loads expanded details of the selected place on the right of the displayed list."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "nivenang"
        },
        "content": "Shortcut: `s` +"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "* The index refers to the index number to the left of each place name, ie. \"4. Jalan Kayu\""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "The image below shows the result of using `select 2` command. The place with an index of 2 is highlighted in a blue"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "box and additional information is shown on the right side of the GUI."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "nivenang"
        },
        "content": "image::selectCommand.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "`select 2` +"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "Selects the 2nd place in TravelBuddy."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "nivenang"
        },
        "content": "* `search Raffles` +"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "`select 1` +"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "Selects the 1st place in the results of the `find` command."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "nivenang"
        },
        "content": "\u003d\u003d\u003d Listing previously entered commands : `history`"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "nivenang"
        },
        "content": "The `history` command lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "Shortcut: `h` +"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "nivenang"
        },
        "content": "The image below shows the result of running the `history` command."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "nivenang"
        },
        "content": "image::historyCommand.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "nivenang"
        },
        "content": "The `undo` command restores TravelBuddy to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "Shortcut: `u` +"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "nivenang"
        },
        "content": "Undoable commands: Commands that modify TravelBuddy\u0027s data (`add`, `delete`, `deletem`, `edit` and `clear`)."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "Examples: +"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "nivenang"
        },
        "content": "The `redo` command reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "Shortcut: `r` +"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "nivenang"
        },
        "content": "The `clear` command clears all place entries from TravelBuddy. +"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "Shortcut: `c` +"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "nivenang"
        },
        "content": "The image below shows the results of running a `clear` command, which will remove all places in TravelBuddy."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "nivenang"
        },
        "content": "image::clearCommand.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "nivenang"
        },
        "content": "The `exit` command exits the program. +"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "nivenang"
        },
        "content": "TravelBuddy data is saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "// tag::generateGraphs[]"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "\u003d\u003d\u003d Generating graphs `[coming in v2.0]`"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "nivenang"
        },
        "content": "The `generate` command provides useful data analytics and visualization through graphs and charts, based on your data in TravelBuddy. +"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "Format: `generate`"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "// end::generateGraphs[]"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "// tag::addphoto[]"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "\u003d\u003d\u003d Adding Photos to Places `[coming in v2.0]`"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "nivenang"
        },
        "content": "TravelBuddy helps you save photos by adding photo files to places in TravelBuddy. +"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "nivenang"
        },
        "content": "Format: `add p/`"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "// end::addphoto[]"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "nivenang"
        },
        "content": "\u003d\u003d\u003d Setting Up"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "nivenang"
        },
        "content": "*Q*: Can the application be used even without internet connection? +"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "nivenang"
        },
        "content": "*A*: Yes, the application works without internet connection."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "nivenang"
        },
        "content": "*Q*: How do I import data from another TravelBuddy? +"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "nivenang"
        },
        "content": "*A*: Overwrite the empty data file in your computer with the data file of the other TravelBuddy."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "nivenang"
        },
        "content": "*Q*: Why is my address book empty? +"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "nivenang"
        },
        "content": "*A*: If you are just starting out, TravelBuddy will be empty for you to add places that you have been to."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "nivenang"
        },
        "content": "If you have been using it frequently, please refer to Data and Storage Issues."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "nivenang"
        },
        "content": "\u003d\u003d\u003d Data and Storage Issues"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "nivenang"
        },
        "content": "*Q*: How do I transfer my data to another computer? +"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous TravelBuddy folder."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "nivenang"
        },
        "content": "*Q*: How do I send my address book to another person? +"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "nivenang"
        },
        "content": "*A*: Send the person (via E-mail or messenger applications) your file that contains the data of your TravelBuddy folder."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "nivenang"
        },
        "content": "*Q*: Can I retrieve the data from when I just launched the application? +"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "nivenang"
        },
        "content": "*A*: Repeatedly use the `undo` command until there are no further commands to undo."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "nivenang"
        },
        "content": "*Q*: Why is my address book empty? +"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "nivenang"
        },
        "content": "*A*: If you are just starting out, please refer to Setting Up section. An empty TravelBuddy means that your data has been cleared either by commands or invalid json file."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "nivenang"
        },
        "content": "Please do check the file that contains the data of your TravelBuddy."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "nivenang"
        },
        "content": "\u003d\u003d\u003d Command Issues"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "nivenang"
        },
        "content": "*Q*: How do I view the full address book after searching or selecting an entry? +"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "nivenang"
        },
        "content": "*A*: Use the command `list` to retrieve the full address book."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "nivenang"
        },
        "content": "*Q*: What details do I need for the `add` command? +"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "nivenang"
        },
        "content": "*A*: The following details are required for a valid `add` command:"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "* Name of place (Prefix: `n/`)"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "* Country code of place (Prefix: `cc/`)"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "* Date the place was visited (Prefix: `dv/`)"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "* Rating of place (Prefix: `r/`)"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "* Description of place (Prefix: `d/`)"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "* Address of place (Prefix: `a/`)"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "nivenang"
        },
        "content": "*Q*: Why does the `undo` command not work? +"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "nivenang"
        },
        "content": "*A*: The `undo` command only reverses the commands `add`, `delete`, `edit` and `clear`."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "nivenang"
        },
        "content": "*Q*: Why does the `undo` command reverse a command from multiple commands before? +"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "nivenang"
        },
        "content": "*A*: The `undo` command reverses the last used `add`, `delete`, `edit` or `clear` command."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "\u003d\u003d Shortcuts Cheatsheet"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "nivenang"
        },
        "content": "Below is a summarized list of all the command words that TravelBuddy supports:"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "nivenang"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"20%,\u003c80%\"]"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "nivenang"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "nivenang"
        },
        "content": "|*Add* |`a n/NAME cc/COUNTRY_CODE dv/DATE_VISITED r/RATING d/DESCRIPTION a/ADDRESS [t/TAG]...` +"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "nivenang"
        },
        "content": "e.g. `a n/NUS Computing cc/SGP dv/10/10/2017 r/5 d/No description a/NUS School of Computing, COM1, 13 Computing Drive, 117417 t/school`"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "nivenang"
        },
        "content": "|*Clear* |`c`"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "nivenang"
        },
        "content": "|*Delete* |`d INDEX` +"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "e.g. `d 3`"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "nivenang"
        },
        "content": "|*Delete Multiple* |`deletem START_INDEX END_INDEX` +"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "nivenang"
        },
        "content": "e.g. `deletem 2 5`"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "|*Edit* | `e INDEX [n/NAME] [cc/COUNTRYCODE] [dv/DATE_VISITED] [r/RATING] [d/DESCRIPTION] [a/ADDRESS] [t/TAG]...` +"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "e.g. `e 2 n/Starbucks d/I like the coffee here`"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "nivenang"
        },
        "content": "|*Search* |`search KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "e.g. `s Coffee Bean Tea Leaf`"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "nivenang"
        },
        "content": "|*Search Rating* |`searchr RATING [MORE_RATINGS]` +"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "nivenang"
        },
        "content": "e.g. `searchr 4 5`"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "nivenang"
        },
        "content": "|*Search Tags* |`searcht KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "nivenang"
        },
        "content": "e.g. `searcht school airport`"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "nivenang"
        },
        "content": "|*Search Country* |`searchc KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "nivenang"
        },
        "content": "e.g. `searchc JPN CHN`"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "nivenang"
        },
        "content": "|*Search Year* |`searchyear KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "nivenang"
        },
        "content": "e.g. `searchyear 2011 +"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "nivenang"
        },
        "content": "e.g. `searchyear 2008-2017"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "nivenang"
        },
        "content": "|*List* |`l`"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "nivenang"
        },
        "content": "|*Help* |`help`"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "nivenang"
        },
        "content": "|*Select* |`s INDEX` +"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "e.g. `s 2`"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "nivenang"
        },
        "content": "|*History* |`h`"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "nivenang"
        },
        "content": "|*Undo* |`u`"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "nivenang"
        },
        "content": "|*Redo* |`r`"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "nivenang"
        },
        "content": "|*Generate* |`generate`"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "nivenang"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "shaungohsc": 47,
      "chung-ming": 10,
      "PremBagda": 59,
      "nivenang": 250,
      "-": 179
    }
  },
  {
    "path": "docs/UsingGradle.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using Gradle"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "https://gradle.org/[Gradle] is a build automation tool. It can automate build-related tasks such as"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Running tests"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* Managing library dependencies"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* Analyzing code for style compliance"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "The gradle configuration for this project is defined in the _build script_ link:../build.gradle[`build.gradle`]."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "To learn more about gradle build scripts, refer https://docs.gradle.org/current/userguide/tutorial_using_tasks.html[Build Scripts Basics]."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Gradle Commands"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "To run a Gradle command, open a command window on the project folder and enter the Gradle command. Gradle commands look like this:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* On Windows: `gradlew \u003ctask1\u003e \u003ctask2\u003e ...` e.g. `gradlew clean allTests`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* On Mac/Linux: `./gradlew \u003ctask1\u003e \u003ctask2\u003e...` e.g."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "`./gradlew clean allTests`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "If you do not specify any tasks, Gradlew will run the default tasks `clean` `headless` `allTests` `coverage`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Cleaning the Project"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* *`clean`* +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the files created during the previous build tasks (e.g. files in the `build` folder). e.g. `./gradlew clean`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "*`clean` to force Gradle to execute a task*: +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "When running a Gradle task, Gradle will try to figure out if the task needs running at all. If Gradle determines that the output of the task will be same as the previous time, it will not run the task. For example, it will not build the JAR file again if the relevant source files have not changed since the last time the JAR file was built. If we want to force Gradle to run a task, we can combine that task with `clean`. Once the build files have been `clean` ed, Gradle has no way to determine if the output will be same as before, so it will be forced to execute the task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Creating the JAR file"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* *`shadowJar`* +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Creates the `addressbook.jar` file in the `build/jar` folder, _if the current file is outdated_. +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `./gradlew shadowJar`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "To force Gradle to create the JAR file even if the current one is up-to-date, you can \u0027`clean`\u0027 first. +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `./gradlew clean shadowJar`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "*Why do we create a fat JAR?* If we package only our own class files into the JAR file, it will not work properly unless the user has all the other JAR files (i.e. third party libraries) our classes depend on, which is rather inconvenient. Therefore, we package all dependencies into a single JAR files, creating what is also known as a _fat_ JAR file. To create a fat JAR file, we use the Gradle plugin https://github.com/johnrengelman/shadow[shadow jar]."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Rendering AsciiDoc files"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* **`asciidoctor`** +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Converts AsciiDoc files in `docs` to HTML format. Generated HTML files can be found in `build/docs`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* **`deployOfflineDocs`** +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Updates the offline user guide, and its associated files, used by the Help window in the application. Deployed HTML files and images can be found in `src/main/resources/docs`."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running the application"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* *`run`* +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Builds and runs the application."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* *`runShadow`* +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "Builds the application as a fat JAR, and then runs it."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running code style checks"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleMain`** +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Runs the code style check for the main code base"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleTest`** +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Runs the code style check for the test code base"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "The set of code style rules implemented can be found in `config/checkstyle/checkstyle.xml`. To enable _exceptions_ to code styles, add in the comment `//CODESTYLE.OFF: RuleName` at the start of the section and `//CODESTYLE.ON: RuleName` at the end of the section."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "[[Running-Tests]]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "* **`allTests`** +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Runs all tests."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "* **`guiTests`** +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "Runs all tests in the `seedu.travel.ui` and `systemtests` package"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "* **`nonGuiTests`** +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "Runs all non-GUI tests in the `seedu.travel`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "package"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "* **`headless`** +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Sets the test mode as _headless_. The mode is effective for that Gradle run only so it should be combined with other test tasks."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in headless mode due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some examples:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "* `./gradlew headless allTests` -- Runs all tests in headless mode"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* `./gradlew clean nonGuiTests` -- Cleans the project and runs non-GUI"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "tests"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Updating Dependencies"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to run these Gradle tasks manually as they are called automatically by other relevant Gradle tasks."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* **`compileJava`** +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Checks whether the project has the required dependencies to compile and run the main program, and download any missing dependencies before compiling the classes. +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "See `build.gradle` -\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "`allprojects` -\u003e `dependencies` -\u003e `compile` for the list of dependencies required."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "* **`compileTestJava`** +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "Checks whether the project has the required dependencies to perform testing, and download any missing dependencies before compiling the test classes. +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "See `build.gradle` -\u003e `allprojects` -\u003e `dependencies` -\u003e `testCompile` for the list of dependencies required."
      }
    ],
    "authorContributionMap": {
      "chung-ming": 2,
      "-": 111
    }
  },
  {
    "path": "docs/team/PremBagda.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "\u003d Prem Rajeshkumar Bagdawala - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003d\u003d PROJECT: TravelBuddy"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "TravelBuddy - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "---"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 65,
      "PremBagda": 1
    }
  },
  {
    "path": "docs/team/chung-ming.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003d Arielyte Tsen Chung Ming - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003d\u003d PROJECT: TravelBuddy"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "TravelBuddy - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "---"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 68
    }
  },
  {
    "path": "docs/team/nivenang.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nivenang"
        },
        "content": "\u003d Niven Ang Jia Hao - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003d\u003d PROJECT: TravelBuddy"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nivenang"
        },
        "content": "TravelBuddy is a desktop Travel Guide application for travel enthusiasts to record places previously visited. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nivenang"
        },
        "content": "* *Major enhancement*: added *the ability to perform search by name, rating, tags, country and year* on the places in TravelBuddy"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nivenang"
        },
        "content": "** What it does: allows the user to search TravelBuddy for places whose requested field matches the user input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nivenang"
        },
        "content": "** Justification: TravelBuddy can get long and messy when more places are added. This feature improves TravelBuddy as it allows users to filter through the long place list to obtain what the users want."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nivenang"
        },
        "content": "** Highlights: This feature helps users search for what they need. Multiple keywords can also be included in the search to obtain a wider scope of results."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nivenang"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nivenang"
        },
        "content": "** added Rating class for Place object to track ratings of each place in TravelBuddy."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nivenang"
        },
        "content": "** addded delete multiple feature to delete multiple entries in TravelBuddy with one command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nivenang"
        },
        "content": "* *Code contributed*: https://nus-cs2103-ay1819s2.github.io/cs2103-dashboard/#search\u003dnivenang\u0026sort\u003ddisplayName\u0026since\u003d2019-02-10\u0026until\u003d2019-03-26\u0026timeframe\u003dday\u0026reverse\u003dfalse\u0026repoSort\u003dtrue[RepoSense]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nivenang"
        },
        "content": "*** Helped to streamline issue tracking using milestone labels and assignees on Github."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nivenang"
        },
        "content": "*** Updated tests and wrote additional tests from people in address book to places in TravelBuddy: https://github.com/cs2103-ay1819s2-w11-3/main/pull/50[#50]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nivenang"
        },
        "content": "*** Updated AboutUs with the responsbilities of team members: https://github.com/cs2103-ay1819s2-w11-3/main/pull/12[#12]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nivenang"
        },
        "content": "*** Updated the User Guide with features I added and FAQ section: https://github.com/cs2103-ay1819s2-w11-3/main/pull/53[#53], https://github.com/cs2103-ay1819s2-w11-3/main/pull/63[#63], https://github.com/cs2103-ay1819s2-w11-3/main/pull/77[#77], https://github.com/cs2103-ay1819s2-w11-3/main/pull/85[#85]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nivenang"
        },
        "content": "*** Updated the Developer with features I added: https://github.com/cs2103-ay1819s2-w11-3/main/pull/68[#68], https://github.com/cs2103-ay1819s2-w11-3/main/pull/85[#85]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nivenang"
        },
        "content": "*** Review pull requests (with non-trivial review comments): https://github.com/cs2103-ay1819s2-w11-3/main/pull/84[#84]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nivenang"
        },
        "content": "*** Reported bugs and helped to fix bugs: https://github.com/cs2103-ay1819s2-w11-3/main/pull/82[#82]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nivenang"
        },
        "content": "include::../UserGuide.adoc[tag\u003dsearch]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nivenang"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dsearch]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "---"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 43,
      "nivenang": 19
    }
  },
  {
    "path": "docs/team/shaungohsc.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003d Arielyte Tsen Chung Ming - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003d\u003d PROJECT: TravelBuddy"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "TravelBuddy - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 3,
      "-": 64
    }
  },
  {
    "path": "src/main/java/seedu/travel/AppParameters.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/travel/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import com.google.maps.GeoApiContext;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.Config;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.Version;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.util.StringUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.LogicManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.ReadOnlyTravelBuddy;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.TravelBuddy;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.storage.JsonTravelBuddyStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.storage.Storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.storage.StorageManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.storage.TravelBuddyStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.ui.Ui;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.ui.UiManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static final String GOOGLE_API_KEY \u003d \"AIzaSyBHys5ywgiaHrGJHRd_aksq3DH7BpiogXc\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static final GeoApiContext CONTEXT \u003d new GeoApiContext.Builder().apiKey(GOOGLE_API_KEY).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private static final Version VERSION \u003d new Version(1, 3, 0, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing TravelBuddy ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        TravelBuddyStorage travelBuddyStorage \u003d new JsonTravelBuddyStorage(userPrefs.getTravelBuddyFilePath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        storage \u003d new StorageManager(travelBuddyStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s travel book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * The data from the sample travel book will be used instead if {@code storage}\u0027s travel book is not found,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * or an empty travel book will be used instead if errors occur when reading {@code storage}\u0027s travel book."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Optional\u003cReadOnlyTravelBuddy\u003e travelBuddyOptional;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        ReadOnlyTravelBuddy initialData;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            travelBuddyOptional \u003d storage.readTravelBuddy();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            if (!travelBuddyOptional.isPresent()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample TravelBuddy\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            initialData \u003d travelBuddyOptional.orElseGet(SampleDataUtil::getSampleTravelBuddy);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty TravelBuddy\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            initialData \u003d new TravelBuddy();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty TravelBuddy\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            initialData \u003d new TravelBuddy();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty TravelBuddy\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        logger.info(\"Starting TravelBuddy \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping TravelBuddy ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 48,
      "-": 142
    }
  },
  {
    "path": "src/main/java/seedu/travel/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/travel/commons/core/GuiSettings.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 720;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 1280;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 3,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/travel/commons/core/LogsCenter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private static final String LOG_FILE \u003d \"travelBuddy.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 2,
      "-": 110
    }
  },
  {
    "path": "src/main/java/seedu/travel/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static final String MESSAGE_INVALID_PLACE_DISPLAYED_INDEX \u003d \"The place index provided is invalid\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static final String MESSAGE_PLACES_LISTED_OVERVIEW \u003d \"%1$d places listed!\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 3,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/travel/commons/core/Version.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/travel/commons/core/index/Index.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/travel/commons/exceptions/DataConversionException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/travel/commons/exceptions/IllegalValueException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/travel/commons/util/AppUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/travel/commons/util/CollectionUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/travel/commons/util/ConfigUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/travel/commons/util/FileUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/travel/commons/util/InvalidationListenerManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages a list of {@link InvalidationListener}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class InvalidationListenerManager {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ArrayList\u003cInvalidationListener\u003e listeners \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calls {@link InvalidationListener#invalidated(Observable)} on all added listeners."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Any modifications to the listeners list during the invocation of this method"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * will only take effect on the next invocation of this method."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param observable The {@code Observable} that became invalid."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void callListeners(Observable observable) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // Make a copy of listeners such that any modifications to the listeners list during"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // the invocation of this method will only take effect on the next invocation of this method."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cInvalidationListener\u003e listenersCopy \u003d new ArrayList\u003c\u003e(listeners);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        for (InvalidationListener listener : listenersCopy) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            listener.invalidated(observable);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds {@code listener} to the list of listeners."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the same listener is added more that once, then it will be notified more than once."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(listener);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listeners.add(listener);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code listener} from the list of listeners."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the given listener was not previously added, then this method call is a no-op."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the given listener was added more than once, then only the first occurrence in the list will be removed."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(listener);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        listeners.remove(listener);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 1,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/travel/commons/util/JsonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/travel/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.model.place.CountryCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.model.place.DateVisited;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.model.place.Rating;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Returns true if the {@code tagsList} contains the {@code tag}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *       containsTagIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *       containsTagIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *       containsTagIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * @param tagsList cannot be null"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * @param tag cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static boolean containsTagIgnoreCase(Set\u003cTag\u003e tagsList, String tag) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        requireNonNull(tagsList);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        String preppedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        checkArgument(!preppedTag.isEmpty(), \"Tag parameter cannot be empty\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        checkArgument(preppedTag.split(\"\\\\s+\").length \u003d\u003d 1,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                \"Tag parameter should be a single word\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        Tag[] preppedTagsList \u003d tagsList.toArray(new Tag[0]);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        return Arrays.stream(preppedTagsList).map(t -\u003e t.tagName)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                .anyMatch(preppedTag::equalsIgnoreCase);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Returns true if the {@code ratingsList} contains the {@code rating}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *   A valid rating match from 1 to 5 is required."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *       containsRating(\"1 4\", \"1\") \u003d\u003d true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *       containsRating(\"1 4\", \"4\") \u003d\u003d true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *       containsRating(\"1 4\", \"5\") \u003d\u003d false //not a valid match"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * @param ratingsList cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * @param rating cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static boolean containsRating(String ratingsList, String rating) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        requireNonNull(ratingsList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        requireNonNull(rating);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        String preppedRating \u003d rating.trim();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        checkArgument(!preppedRating.isEmpty(), \"Rating parameter cannot be empty\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        checkArgument(preppedRating.split(\"\\\\s+\").length \u003d\u003d 1,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                \"Rating parameter should be a single value from 1 to 5\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        checkArgument(Rating.isValidRating(preppedRating),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                \"Rating parameter should be a single value from 1 to 5\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        String preppedRatingsList \u003d ratingsList;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        String[] ratingsInPreppedRatingsList \u003d preppedRatingsList.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        return Arrays.stream(ratingsInPreppedRatingsList)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                .anyMatch(preppedRating::equalsIgnoreCase);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Returns true if the {@code countryCodeList} contains the {@code countryCode}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     *   Correct country code is also required."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     *       containsCountryCode(\"SGp usa\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     *       containsCountryCode(\"SGp usa\", \"USA\") \u003d\u003d true"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     *       containsCountryCode(\"SGp usa\", \"sg\") \u003d\u003d false // not a full word match"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     *       containsCountryCode(\"SGp usa\", \"sga\") \u003d\u003d false // not a valid code"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * @param countryCodeList cannot be null"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * @param countryCode cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public static boolean containsCountryCode(String countryCodeList, String countryCode) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        requireNonNull(countryCodeList);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        requireNonNull(countryCode);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        String preppedCountryCode \u003d countryCode.trim();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        checkArgument(!preppedCountryCode.isEmpty(), \"Country Code parameter cannot be empty\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        checkArgument(preppedCountryCode.split(\"\\\\s+\").length \u003d\u003d 1,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                \"Country Code parameter should be a single word\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        checkArgument(CountryCode.isValidCountryCode(preppedCountryCode),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                \"Country codes should only contain three-letter ISO-3166 codes\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        String preppedCountryCodeList \u003d countryCodeList;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        String[] countryCodesInPreppedCountryCodeList \u003d preppedCountryCodeList.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return Arrays.stream(countryCodesInPreppedCountryCodeList)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                .anyMatch(preppedCountryCode::equalsIgnoreCase);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Returns true if the {@code dateList} contains the {@code year}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *   A valid 4-digit year input is required."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *       containsYear(\"2018 2016\", \"2016\") \u003d\u003d true"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *       containsYear(\"2018 2016\", \"2018\") \u003d\u003d true"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *       containsYear(\"2018 2016\", \"201\") \u003d\u003d false // not a 4-digit year"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *       containsYear(\"2017 2016\", \"2018\") \u003d\u003d false // year not found in list"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * @param yearList cannot be null"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * @param year cannot be null, cannot be empty, must be a 4-digit integer"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static boolean containsYear(String yearList, String year) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        requireNonNull(yearList);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        requireNonNull(year);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        String preppedYear \u003d year.trim();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        checkArgument(!preppedYear.isEmpty(), \"Year parameter cannot be empty\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        checkArgument(preppedYear.split(\"\\\\s+\").length \u003d\u003d 1,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                \"Years should only contain a year from 1900 to the current year\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        checkArgument(DateVisited.isValidYear(preppedYear),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                \"Years should only contain a year from 1900 to the current year\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        String preppedYearList \u003d yearList;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        String[] yearsInPreppedYearList \u003d preppedYearList.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        return Arrays.stream(yearsInPreppedYearList)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                .anyMatch(preppedYear::equalsIgnoreCase);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 3,
      "PremBagda": 29,
      "nivenang": 94,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/travel/logic/CommandHistory.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores the history of commands executed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandHistory {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cString\u003e userInputHistory \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cString\u003e unmodifiableUserInputHistory \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(userInputHistory);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandHistory() {}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandHistory(CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory.addAll(commandHistory.userInputHistory);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code userInput} to the list of user input entered."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(String userInput) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory.add(userInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of {@code userInputHistory}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return unmodifiableUserInputHistory;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof CommandHistory)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory other \u003d (CommandHistory) obj;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.equals(other.userInputHistory);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 1,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/travel/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.ReadOnlyTravelBuddy;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Place;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Returns the TravelBuddy."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * @see seedu.travel.model.Model#getTravelBuddy()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    ReadOnlyTravelBuddy getTravelBuddy();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of places */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    ObservableList\u003cPlace\u003e getFilteredPlaceList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of commands entered by the user."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * The list is ordered from the least recent command to the most recent command."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cString\u003e getHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Returns the user prefs\u0027 TravelBuddy file path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    Path getTravelBuddyFilePath();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Selected place in the filtered place list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * null if no place is selected."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * @see seedu.travel.model.Model#selectedPlaceProperty()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    ReadOnlyProperty\u003cPlace\u003e selectedPlaceProperty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Sets the selected place in the filtered place list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * @see seedu.travel.model.Model#setSelectedPlace(Place)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    void setSelectedPlace(Place place);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    ReadOnlyProperty\u003cBoolean\u003e chartDisplayedProperty();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "     * Set when chart needs to be displayed."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    void setChartDisplayed(boolean chartDisplayed);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaungohsc": 7,
      "chung-ming": 14,
      "PremBagda": 7,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/travel/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "import javafx.beans.property.SimpleBooleanProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.parser.TravelBuddyParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.ReadOnlyTravelBuddy;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Place;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    public static final boolean DISPLAY_CHART_INITIALLY \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private final TravelBuddyParser travelBuddyParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private boolean travelBuddyModified;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    private final SimpleBooleanProperty chartDisplayed \u003d new SimpleBooleanProperty(DISPLAY_CHART_INITIALLY);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        travelBuddyParser \u003d new TravelBuddyParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // Set travelBuddyModified to true whenever the models\u0027 travel book is modified."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        model.getTravelBuddy().addListener(observable -\u003e travelBuddyModified \u003d true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        travelBuddyModified \u003d false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            Command command \u003d travelBuddyParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            commandResult \u003d command.execute(model, history);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        if (travelBuddyModified) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            logger.info(\"TravelBuddy modified, saving to file.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                storage.saveTravelBuddy(model.getTravelBuddy());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public ReadOnlyTravelBuddy getTravelBuddy() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        return model.getTravelBuddy();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public ObservableList\u003cPlace\u003e getFilteredPlaceList() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return model.getFilteredPlaceList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return history.getHistory();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public Path getTravelBuddyFilePath() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        return model.getTravelBuddyFilePath();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public ReadOnlyProperty\u003cPlace\u003e selectedPlaceProperty() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return model.selectedPlaceProperty();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void setSelectedPlace(Place place) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        model.setSelectedPlace(place);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    public ReadOnlyProperty\u003cBoolean\u003e chartDisplayedProperty() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        return model.chartDisplayedProperty();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    public void setChartDisplayed(boolean isDisplayed) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        model.setChartDisplayed(isDisplayed);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaungohsc": 13,
      "chung-ming": 26,
      "PremBagda": 6,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/travel/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.parser.CliSyntax.PREFIX_COUNTRY_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.parser.CliSyntax.PREFIX_DATE_VISITED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Place;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " * Adds a place to the travel book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"a\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a place to the travel book. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            + PREFIX_COUNTRY_CODE + \"COUNTRY CODE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            + PREFIX_DATE_VISITED + \"DATE VISITED \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            + PREFIX_RATING + \"RATING \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            + PREFIX_NAME + \"National University of Singapore \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            + PREFIX_COUNTRY_CODE + \"SGP \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            + PREFIX_DATE_VISITED + \"10/10/2017\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            + PREFIX_RATING + \"4 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            + PREFIX_DESCRIPTION"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            + \"The National University of Singapore is an autonomous research university in Singapore. \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            + PREFIX_ADDRESS + \"21 Lower Kent Ridge Road, Singapore 119077 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            + PREFIX_TAG + \"school \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            + PREFIX_TAG + \"studiesHere\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New place added: %1$s\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PLACE \u003d \"This place already exists in the travel book\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private final Place toAdd;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Place}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public AddCommand(Place place) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        requireNonNull(place);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        toAdd \u003d place;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        if (model.hasPlace(toAdd)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PLACE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        model.addPlace(toAdd);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        model.commitTravelBuddy();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 24,
      "PremBagda": 8,
      "nivenang": 7,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/travel/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.TravelBuddy;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " * Clears the travel book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"c\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"TravelBuddy has been cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        model.setTravelBuddy(new TravelBuddy());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        model.commitTravelBuddy();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 9,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/travel/logic/commands/Command.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model, CommandHistory history) throws CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 4,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/travel/logic/commands/CommandResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 1,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/travel/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Place;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " * Deletes a place identified using it\u0027s displayed index from the travel book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"d\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            + \": Deletes the place identified by the index number used in the displayed place list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static final String MESSAGE_DELETE_PLACE_SUCCESS \u003d \"Deleted Place: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        List\u003cPlace\u003e lastShownList \u003d model.getFilteredPlaceList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PLACE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Place placeToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        model.deletePlace(placeToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        model.commitTravelBuddy();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PLACE_SUCCESS, placeToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 13,
      "PremBagda": 4,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/travel/logic/commands/DeleteMultipleCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Place;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nivenang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " * Deletes multiple places ranging from start index to end index in the travel book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nivenang"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nivenang"
        },
        "content": "public class DeleteMultipleCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletem\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            + \": Deletes multiple places identified by the start and end index number in the last place listing.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            + \"Parameters: START_INDEX END_INDEX\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\" + \" 5\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static final String MESSAGE_DELETE_PLACE_SUCCESS \u003d \"Deleted Place: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private Index targetStartIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private Index targetEndIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private StringBuilder deletedPlacesList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public DeleteMultipleCommand(Index startIndex, Index endIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        this.targetStartIndex \u003d startIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        this.targetEndIndex \u003d endIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        this.deletedPlacesList \u003d new StringBuilder();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        List\u003cPlace\u003e lastShownList \u003d model.getFilteredPlaceList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        if (targetStartIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PLACE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        if (targetEndIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            this.targetEndIndex \u003d Index.fromOneBased(lastShownList.size());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        int numOfPlacesToDelete \u003d targetEndIndex.getOneBased() - targetStartIndex.getZeroBased();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        int startIndex \u003d targetStartIndex.getZeroBased();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        for (int i \u003d 0; i \u003c numOfPlacesToDelete; i++) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            Place placeToDelete \u003d lastShownList.get(startIndex);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            model.deletePlace(placeToDelete);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            buildDeletedPlacesList(placeToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        model.commitTravelBuddy();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return new CommandResult(deletedPlacesList.toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private void buildDeletedPlacesList(Place target) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        this.deletedPlacesList.append(MESSAGE_DELETE_PLACE_SUCCESS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        this.deletedPlacesList.append(target);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        this.deletedPlacesList.append(\"\\n\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                || (other instanceof DeleteMultipleCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                \u0026\u0026 targetStartIndex.equals(((DeleteMultipleCommand) other).targetStartIndex)) // state check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                \u0026\u0026 targetEndIndex.equals(((DeleteMultipleCommand) other).targetEndIndex); // state check"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nivenang"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "chung-ming": 12,
      "PremBagda": 13,
      "nivenang": 52
    }
  },
  {
    "path": "src/main/java/seedu/travel/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.parser.CliSyntax.PREFIX_COUNTRY_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import static seedu.travel.logic.parser.CliSyntax.PREFIX_DATE_VISITED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.model.Model.PREDICATE_SHOW_ALL_PLACES;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Address;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.CountryCode;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import seedu.travel.model.place.DateVisited;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Place;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Rating;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.tag.Tag;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " * Edits the details of an existing place in the travel book."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"e\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the place identified \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            + \"by the index number used in the displayed place list. \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            + \"[\" + PREFIX_COUNTRY_CODE + \"COUNTRY_CODE] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            + \"[\" + PREFIX_DATE_VISITED + \"DATE_VISITED] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            + \"[\" + PREFIX_RATING + \"RATING] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            + PREFIX_COUNTRY_CODE + \"SGP \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            + PREFIX_DATE_VISITED + \"23-03-2019 \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            + PREFIX_RATING + \"4 \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            + PREFIX_DESCRIPTION + \"No description\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static final String MESSAGE_EDIT_PLACE_SUCCESS \u003d \"Edited Place: %1$s\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PLACE \u003d \"This place already exists in the travel book.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private final EditPlaceDescriptor editPlaceDescriptor;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * @param index of the place in the filtered place list to edit"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * @param editPlaceDescriptor details to edit the place with"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public EditCommand(Index index, EditPlaceDescriptor editPlaceDescriptor) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        requireNonNull(editPlaceDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        this.editPlaceDescriptor \u003d new EditPlaceDescriptor(editPlaceDescriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        List\u003cPlace\u003e lastShownList \u003d model.getFilteredPlaceList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PLACE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Place placeToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Place editedPlace \u003d createEditedPlace(placeToEdit, editPlaceDescriptor);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        if (!placeToEdit.isSamePlace(editedPlace) \u0026\u0026 model.hasPlace(editedPlace)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PLACE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        model.setPlace(placeToEdit, editedPlace);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        model.updateFilteredPlaceList(PREDICATE_SHOW_ALL_PLACES);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        model.commitTravelBuddy();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PLACE_SUCCESS, editedPlace));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Creates and returns a {@code Place} with the details of {@code placeToEdit}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * edited with {@code editPlaceDescriptor}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private static Place createEditedPlace(Place placeToEdit, EditPlaceDescriptor editPlaceDescriptor) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assert placeToEdit !\u003d null;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Name updatedName \u003d editPlaceDescriptor.getName().orElse(placeToEdit.getName());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        CountryCode updatedCountryCode \u003d editPlaceDescriptor.getCountryCode().orElse(placeToEdit.getCountryCode());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        DateVisited updatedDateVisited \u003d editPlaceDescriptor.getDateVisited().orElse(placeToEdit.getDateVisited());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        Rating updatedRating \u003d editPlaceDescriptor.getRating().orElse(placeToEdit.getRating());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Description updatedDescription \u003d editPlaceDescriptor.getDescription().orElse(placeToEdit.getDescription());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Address updatedAddress \u003d editPlaceDescriptor.getAddress().orElse(placeToEdit.getAddress());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPlaceDescriptor.getTags().orElse(placeToEdit.getTags());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return new Place(updatedName, updatedCountryCode, updatedDateVisited, updatedRating, updatedDescription,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            updatedAddress, updatedTags);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                \u0026\u0026 editPlaceDescriptor.equals(e.editPlaceDescriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Stores the details to edit the place with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * corresponding field value of the place."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public static class EditPlaceDescriptor {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        private CountryCode countryCode;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        private DateVisited dateVisited;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        private Rating rating;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        public EditPlaceDescriptor() {}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        public EditPlaceDescriptor(EditPlaceDescriptor toCopy) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            setCountryCode(toCopy.countryCode);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            setDateVisited(toCopy.dateVisited);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            setRating(toCopy.rating);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, countryCode, dateVisited, rating, description, address, tags);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        public void setCountryCode(CountryCode countryCode) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            this.countryCode \u003d countryCode;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        public Optional\u003cCountryCode\u003e getCountryCode() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            return Optional.ofNullable(countryCode);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        public void setDateVisited(DateVisited dateVisited) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            this.dateVisited \u003d dateVisited;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        public Optional\u003cDateVisited\u003e getDateVisited() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            return Optional.ofNullable(dateVisited);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        public void setRating(Rating rating) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            this.rating \u003d rating;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        public Optional\u003cRating\u003e getRating() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            return Optional.ofNullable(rating);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            if (!(other instanceof EditPlaceDescriptor)) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            EditPlaceDescriptor e \u003d (EditPlaceDescriptor) other;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                    \u0026\u0026 getCountryCode().equals(e.getCountryCode())"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                    \u0026\u0026 getDateVisited().equals(e.getDateVisited())"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                    \u0026\u0026 getRating().equals(e.getRating())"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 40,
      "PremBagda": 61,
      "nivenang": 10,
      "-": 150
    }
  },
  {
    "path": "src/main/java/seedu/travel/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting TravelBuddy as requested ...\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 4,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/travel/logic/commands/GenerateCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " * Generates a chart."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "public class GenerateCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"generate\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"g\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Generates a chart based \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            + \"on Country and Rating.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Chart has been successfully generated!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Unable to generate any charts!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        model.setChartDisplayed(true);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        model.commitTravelBuddy();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaungohsc": 2,
      "chung-ming": 26
    }
  },
  {
    "path": "src/main/java/seedu/travel/logic/commands/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 3,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/travel/logic/commands/HistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"h\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e previousCommands \u003d new ArrayList\u003c\u003e(history.getHistory());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 4,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/travel/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.model.Model.PREDICATE_SHOW_ALL_PLACES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " * Lists all places in the travel book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"l\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all places\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        model.updateFilteredPlaceList(PREDICATE_SHOW_ALL_PLACES);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 7,
      "PremBagda": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/travel/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.model.Model.PREDICATE_SHOW_ALL_PLACES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " * Reverts the {@code model}\u0027s travel book to its previously undone state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"r\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        if (!model.canRedoTravelBuddy()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        model.redoTravelBuddy();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        model.updateFilteredPlaceList(PREDICATE_SHOW_ALL_PLACES);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 10,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/travel/logic/commands/SearchCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " * Finds and lists all places in travel book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nivenang"
        },
        "content": "public class SearchCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"search\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"f\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all places whose names contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" national museum singapore\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public SearchCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        model.updateFilteredPlaceList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                String.format(Messages.MESSAGE_PLACES_LISTED_OVERVIEW, model.getFilteredPlaceList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                || (other instanceof SearchCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                \u0026\u0026 predicate.equals(((SearchCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 8,
      "PremBagda": 2,
      "nivenang": 6,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/travel/logic/commands/SearchCountryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nivenang"
        },
        "content": "package seedu.travel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.model.place.CountryCodeContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nivenang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nivenang"
        },
        "content": " * Finds and lists all places in travel book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nivenang"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nivenang"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nivenang"
        },
        "content": "public class SearchCountryCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"searchc\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all places whose country code contain \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            + \"the specified keywords and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" SGP JPN\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private final CountryCodeContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public SearchCountryCommand(CountryCodeContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        model.updateFilteredPlaceList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                String.format(Messages.MESSAGE_PLACES_LISTED_OVERVIEW, model.getFilteredPlaceList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                || (other instanceof SearchCountryCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                \u0026\u0026 predicate.equals(((SearchCountryCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nivenang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nivenang": 42
    }
  },
  {
    "path": "src/main/java/seedu/travel/logic/commands/SearchRatingCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.RatingContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nivenang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " * Finds and lists all places in travel book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nivenang"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nivenang"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nivenang"
        },
        "content": "public class SearchRatingCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"searchr\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all places whose ratings contain \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            + \"the specified ratings and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            + \"Parameters: RATING [MORE_RATINGS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 4 5\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private final RatingContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public SearchRatingCommand(RatingContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        model.updateFilteredPlaceList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                String.format(Messages.MESSAGE_PLACES_LISTED_OVERVIEW, model.getFilteredPlaceList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                || (other instanceof SearchRatingCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                \u0026\u0026 predicate.equals(((SearchRatingCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nivenang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 7,
      "nivenang": 35
    }
  },
  {
    "path": "src/main/java/seedu/travel/logic/commands/SearchTagsCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nivenang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " * Finds and lists all places in travel book whose tags contain any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nivenang"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nivenang"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nivenang"
        },
        "content": "public class SearchTagsCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"searcht\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all places whose tags contain \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" shoppingMall school\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private final TagContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public SearchTagsCommand(TagContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        model.updateFilteredPlaceList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                String.format(Messages.MESSAGE_PLACES_LISTED_OVERVIEW, model.getFilteredPlaceList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                || (other instanceof SearchTagsCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                \u0026\u0026 predicate.equals(((SearchTagsCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nivenang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 7,
      "nivenang": 35
    }
  },
  {
    "path": "src/main/java/seedu/travel/logic/commands/SearchYearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nivenang"
        },
        "content": "package seedu.travel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.model.place.YearContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nivenang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nivenang"
        },
        "content": " * Finds and lists all places in travel book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nivenang"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nivenang"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nivenang"
        },
        "content": "public class SearchYearCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"searchyear\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all places whose year visited contain \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            + \"the specified year or year range and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            + \"Parameters: KEYWORD-KEYWORD\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 2018 2019\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 2016-2018\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private final YearContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public SearchYearCommand(YearContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        model.updateFilteredPlaceList(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                String.format(Messages.MESSAGE_PLACES_LISTED_OVERVIEW, model.getFilteredPlaceList().size()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                || (other instanceof SearchYearCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                \u0026\u0026 predicate.equals(((SearchYearCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nivenang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nivenang": 44
    }
  },
  {
    "path": "src/main/java/seedu/travel/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Place;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " * Selects a place identified using it\u0027s displayed index from the travel book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            + \": Selects the place identified by the index number used in the displayed place list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static final String MESSAGE_SELECT_PLACE_SUCCESS \u003d \"Selected Place: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        List\u003cPlace\u003e filteredPlaceList \u003d model.getFilteredPlaceList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredPlaceList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PLACE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        model.setSelectedPlace(filteredPlaceList.get(targetIndex.getZeroBased()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        model.setChartDisplayed(false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_PLACE_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaungohsc": 2,
      "chung-ming": 12,
      "PremBagda": 3,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/travel/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.model.Model.PREDICATE_SHOW_ALL_PLACES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " * Reverts the {@code model}\u0027s travel book to its previous state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"u\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        if (!model.canUndoTravelBuddy()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        model.undoTravelBuddy();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        model.updateFilteredPlaceList(PREDICATE_SHOW_ALL_PLACES);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 10,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/travel/logic/commands/exceptions/CommandException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/travel/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.parser.CliSyntax.PREFIX_COUNTRY_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import static seedu.travel.logic.parser.CliSyntax.PREFIX_DATE_VISITED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.CountryCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import seedu.travel.model.place.DateVisited;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Place;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Rating;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_COUNTRY_CODE,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            PREFIX_DATE_VISITED, PREFIX_RATING, PREFIX_DESCRIPTION, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_COUNTRY_CODE, PREFIX_DATE_VISITED, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            PREFIX_RATING, PREFIX_DESCRIPTION)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        CountryCode countryCode \u003d ParserUtil.parseCountryCode(argMultimap.getValue(PREFIX_COUNTRY_CODE).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        DateVisited dateVisited \u003d ParserUtil.parseDateVisited(argMultimap.getValue(PREFIX_DATE_VISITED).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        Rating rating \u003d ParserUtil.parseRating(argMultimap.getValue(PREFIX_RATING).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Place place \u003d new Place(name, countryCode, dateVisited, rating, description, address, tagList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return new AddCommand(place);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 18,
      "PremBagda": 10,
      "nivenang": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/travel/logic/parser/ArgumentMultimap.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/travel/logic/parser/ArgumentTokenizer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/travel/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public static final Prefix PREFIX_COUNTRY_CODE \u003d new Prefix(\"cc/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public static final Prefix PREFIX_DATE_VISITED \u003d new Prefix(\"dv/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final Prefix PREFIX_RATING \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 2,
      "PremBagda": 2,
      "nivenang": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/travel/logic/parser/DeleteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 5,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/travel/logic/parser/DeleteMultipleCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.DeleteMultipleCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nivenang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nivenang"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nivenang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nivenang"
        },
        "content": "public class DeleteMultipleCommandParser implements Parser\u003cDeleteMultipleCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * and returns an DeleteCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public DeleteMultipleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            return parseMultipleIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteMultipleCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private DeleteMultipleCommand parseMultipleIndex(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        String[] trimmedIndex \u003d args.trim().split(\" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        String trimmedStartIndex \u003d trimmedIndex[0];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        String trimmedEndIndex \u003d trimmedIndex[1];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedStartIndex)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                || !StringUtil.isNonZeroUnsignedInteger(trimmedEndIndex)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            throw new ParseException(ParserUtil.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        Index startIndex \u003d Index.fromOneBased(Integer.valueOf(trimmedStartIndex));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        Index endIndex \u003d Index.fromOneBased(Integer.valueOf(trimmedEndIndex));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        return new DeleteMultipleCommand(startIndex, endIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nivenang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 6,
      "nivenang": 41
    }
  },
  {
    "path": "src/main/java/seedu/travel/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.parser.CliSyntax.PREFIX_COUNTRY_CODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import static seedu.travel.logic.parser.CliSyntax.PREFIX_DATE_VISITED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.EditCommand.EditPlaceDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_COUNTRY_CODE,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            PREFIX_DATE_VISITED, PREFIX_RATING, PREFIX_DESCRIPTION, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        EditPlaceDescriptor editPlaceDescriptor \u003d new EditPlaceDescriptor();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            editPlaceDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        if (argMultimap.getValue(PREFIX_COUNTRY_CODE).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            editPlaceDescriptor.setCountryCode(ParserUtil"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                .parseCountryCode(argMultimap.getValue(PREFIX_COUNTRY_CODE).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE_VISITED).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            editPlaceDescriptor.setDateVisited(ParserUtil"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                .parseDateVisited(argMultimap.getValue(PREFIX_DATE_VISITED).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        if (argMultimap.getValue(PREFIX_RATING).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            editPlaceDescriptor.setRating(ParserUtil.parseRating(argMultimap.getValue(PREFIX_RATING).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            editPlaceDescriptor.setDescription(ParserUtil.parseDescription("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                    argMultimap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            editPlaceDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPlaceDescriptor::setTags);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        if (!editPlaceDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return new EditCommand(index, editPlaceDescriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 16,
      "PremBagda": 17,
      "nivenang": 2,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/travel/logic/parser/Parser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/travel/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.CountryCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import seedu.travel.model.place.DateVisited;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Rating;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Parses a {@code String countryCode} into a {@code CountryCode}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * @throws ParseException if the given {@code countryCode} is invalid."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public static CountryCode parseCountryCode(String countryCode) throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        requireNonNull(countryCode);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        String trimmedCountryCode \u003d countryCode.trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        if (!CountryCode.isValidCountryCode(trimmedCountryCode)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            throw new ParseException(CountryCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return new CountryCode(trimmedCountryCode);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Parses a {@code String dateVisited} into a {@code DateVisited}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * @throws ParseException if the given {@code dateVisited} is invalid."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public static DateVisited parseDateVisited(String dateVisited) throws ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        requireNonNull(dateVisited);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        String trimmedDateVisited \u003d dateVisited.trim();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        if (!DateVisited.isCorrectDateFormat(trimmedDateVisited)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            throw new ParseException(DateVisited.MESSAGE_INCORRECT_FORMAT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        if (!DateVisited.isValidDateVisited(trimmedDateVisited)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            throw new ParseException(DateVisited.MESSAGE_FUTURE_DATE_ADDED);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return new DateVisited(trimmedDateVisited);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Parses a {@code String rating} into a {@code Rating}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * @throws ParseException if the given {@code rating} is invalid."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static Rating parseRating(String rating) throws ParseException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        requireNonNull(rating);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        String trimmedRating \u003d rating.trim();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        if (!Rating.isValidRating(trimmedRating)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            throw new ParseException(Rating.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return new Rating(trimmedRating);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Parses a {@code String travel} into an {@code Address}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * @throws ParseException if the given {@code travel} is invalid."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Parses a {@code String description} into an {@code Description}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 20,
      "PremBagda": 32,
      "nivenang": 3,
      "-": 104
    }
  },
  {
    "path": "src/main/java/seedu/travel/logic/parser/Prefix.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/travel/logic/parser/SearchCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nivenang"
        },
        "content": " * Parses input arguments and creates a new SearchCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nivenang"
        },
        "content": "public class SearchCommandParser implements Parser\u003cSearchCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SearchCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * and returns an SearchCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public SearchCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        return new SearchCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 5,
      "nivenang": 7,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/travel/logic/parser/SearchCountryCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nivenang"
        },
        "content": "package seedu.travel.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static seedu.travel.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.logic.commands.SearchCountryCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.model.place.CountryCode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.model.place.CountryCodeContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nivenang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nivenang"
        },
        "content": " * Parses input arguments and creates a new SearchCountryCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nivenang"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nivenang"
        },
        "content": "public class SearchCountryCommandParser implements Parser\u003cSearchCountryCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SearchRatingCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * and returns an SearchRatingCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public SearchCountryCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchCountryCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        String[] countryKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        for (String country : countryKeywords) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            if (!CountryCode.isValidCountryCode(country)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                        String.format(CountryCode.MESSAGE_CONSTRAINTS, SearchCountryCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        return new SearchCountryCommand(new CountryCodeContainsKeywordsPredicate(Arrays.asList(countryKeywords)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nivenang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nivenang": 40
    }
  },
  {
    "path": "src/main/java/seedu/travel/logic/parser/SearchRatingCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.SearchRatingCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.model.place.Rating;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.RatingContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nivenang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nivenang"
        },
        "content": " * Parses input arguments and creates a new SearchRatingCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nivenang"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nivenang"
        },
        "content": "public class SearchRatingCommandParser implements Parser\u003cSearchRatingCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SearchRatingCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * and returns an SearchRatingCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public SearchRatingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchRatingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        String[] ratingKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        for (String rating : ratingKeywords) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            if (!Rating.isValidRating(rating)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                throw new ParseException(String.format(Rating.MESSAGE_CONSTRAINTS, SearchRatingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        return new SearchRatingCommand(new RatingContainsKeywordsPredicate(Arrays.asList(ratingKeywords)));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nivenang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 5,
      "nivenang": 34
    }
  },
  {
    "path": "src/main/java/seedu/travel/logic/parser/SearchTagsCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.SearchTagsCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nivenang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nivenang"
        },
        "content": " * Parses input arguments and creates a new SearchTagsCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nivenang"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nivenang"
        },
        "content": "public class SearchTagsCommandParser implements Parser\u003cSearchTagsCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SearchRatingCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * and returns an SearchRatingCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public SearchTagsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchTagsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        String[] tagsKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        return new SearchTagsCommand(new TagContainsKeywordsPredicate(Arrays.asList(tagsKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nivenang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 5,
      "nivenang": 28
    }
  },
  {
    "path": "src/main/java/seedu/travel/logic/parser/SearchYearCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nivenang"
        },
        "content": "package seedu.travel.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static seedu.travel.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.logic.commands.SearchYearCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.model.place.DateVisited;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.model.place.YearContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nivenang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nivenang"
        },
        "content": " * Parses input arguments and creates a new SearchYearCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nivenang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nivenang"
        },
        "content": "public class SearchYearCommandParser implements Parser\u003cSearchYearCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private static final int YEAR_RANGE_LENGTH \u003d 9;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private static final int YEAR_RANGE_DASH_POSITION \u003d 4;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private static final int YEAR_LOWER_BOUND_INDEX \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private static final int YEAR_UPPER_BOUND_INDEX \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SearchYearCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * and returns an SearchYearCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public SearchYearCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchYearCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        String[] yearKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        if (isYearARange(yearKeywords[YEAR_LOWER_BOUND_INDEX])) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            return parseYearRange(yearKeywords[YEAR_LOWER_BOUND_INDEX]);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        for (String year : yearKeywords) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            if (!DateVisited.isValidYear(year)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                throw new ParseException(String.format(DateVisited.MESSAGE_CONSTRAINTS_SEARCH,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                        SearchYearCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        return new SearchYearCommand(new YearContainsKeywordsPredicate(Arrays.asList(yearKeywords)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Parses the given {@code String} of range of years in the context of the SearchYearCommand"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * and returns an SearchYearCommand object for execution."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private SearchYearCommand parseYearRange(String args) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        String[] yearKeywords \u003d args.split(\"-\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        Integer lowerBoundYear \u003d Integer.parseInt(yearKeywords[YEAR_LOWER_BOUND_INDEX]);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        Integer upperBoundYear \u003d Integer.parseInt(yearKeywords[YEAR_UPPER_BOUND_INDEX]);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        ArrayList\u003cString\u003e yearKeywordsArray \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        for (int index \u003d lowerBoundYear; index \u003c\u003d upperBoundYear; index++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            yearKeywordsArray.add(String.valueOf(index));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        return new SearchYearCommand(new YearContainsKeywordsPredicate(yearKeywordsArray));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Checks if the user input values are a valid range of years"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * @param args user input values"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * @return true if arguments are a valid range of years"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public boolean isYearARange(String args) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        if (args.length() !\u003d YEAR_RANGE_LENGTH) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        if (args.charAt(YEAR_RANGE_DASH_POSITION) !\u003d \u0027-\u0027) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        String[] yearKeywords \u003d args.split(\"-\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        if (!DateVisited.isValidYear(yearKeywords[YEAR_LOWER_BOUND_INDEX])"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                || !DateVisited.isValidYear(yearKeywords[YEAR_UPPER_BOUND_INDEX])) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        Integer lowerBoundYear \u003d Integer.parseInt(yearKeywords[YEAR_LOWER_BOUND_INDEX]);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        Integer upperBoundYear \u003d Integer.parseInt(yearKeywords[YEAR_UPPER_BOUND_INDEX]);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        return (lowerBoundYear \u003c\u003d upperBoundYear);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nivenang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nivenang": 98
    }
  },
  {
    "path": "src/main/java/seedu/travel/logic/parser/SelectCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new SelectCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParser implements Parser\u003cSelectCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SelectCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an SelectCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 5,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/travel/logic/parser/TravelBuddyParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.DeleteMultipleCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.GenerateCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.logic.commands.SearchCountryCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.SearchRatingCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.SearchTagsCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.logic.commands.SearchYearCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "public class TravelBuddyParser {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        case AddCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        case EditCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        case SelectCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        case DeleteCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        case DeleteMultipleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            return new DeleteMultipleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        case ClearCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        case SearchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        case SearchCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            return new SearchCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        case SearchRatingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            return new SearchRatingCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        case SearchTagsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            return new SearchTagsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        case SearchCountryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            return new SearchCountryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        case SearchYearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            return new SearchYearCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        case ListCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        case HistoryCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        case GenerateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        case GenerateCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            return new GenerateCommand();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        case UndoCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        case RedoCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 35,
      "nivenang": 19,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/travel/logic/parser/exceptions/ParseException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/travel/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Place;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    Predicate\u003cPlace\u003e PREDICATE_SHOW_ALL_PLACES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Returns the user prefs\u0027 TravelBuddy file path."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    Path getTravelBuddyFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Sets the user prefs\u0027 TravelBuddy file path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    void setTravelBuddyFilePath(Path travelBuddyFilePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Replaces TravelBuddy data with the data in {@code travelBuddy}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    void setTravelBuddy(ReadOnlyTravelBuddy travelBuddy);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    /** Returns the TravelBuddy */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    ReadOnlyTravelBuddy getTravelBuddy();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Returns true if a place with the same identity as {@code place} exists in the TravelBuddy."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    boolean hasPlace(Place place);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Deletes the given place."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * The place must exist in the TravelBuddy."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    void deletePlace(Place target);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Adds the given place."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * {@code place} must not already exist in the TravelBuddy."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    void addPlace(Place place);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Replaces the given place {@code target} with {@code editedPl ace}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * {@code target} must exist in the TravelBuddy."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * The place identity of {@code editedPlace} must not be the same as another existing place in the TravelBuddy."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    void setPlace(Place target, Place editedPlace);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    /** Returns an unmodifiable view of the filtered place list */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    ObservableList\u003cPlace\u003e getFilteredPlaceList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Updates the filter of the filtered place list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    void updateFilteredPlaceList(Predicate\u003cPlace\u003e predicate);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Returns true if the model has previous TravelBuddy states to restore."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    boolean canUndoTravelBuddy();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Returns true if the model has undone TravelBuddy states to restore."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    boolean canRedoTravelBuddy();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Restores the model\u0027s TravelBuddy to its previous state."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    void undoTravelBuddy();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Restores the model\u0027s TravelBuddy to its previously undone state."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    void redoTravelBuddy();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Saves the current TravelBuddy state for undo/redo."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    void commitTravelBuddy();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Saves the current Chart state."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    void commitChart();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    ReadOnlyProperty\u003cBoolean\u003e chartDisplayedProperty();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "     * Set when chart needs to be displayed."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    void setChartDisplayed(boolean chartDisplayed);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Selected place in the filtered place list."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * null if no place is selected."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    ReadOnlyProperty\u003cPlace\u003e selectedPlaceProperty();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Returns the selected place in the filtered place list."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * null if no place is selected."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    Place getSelectedPlace();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Sets the selected place in the filtered place list."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    void setSelectedPlace(Place place);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaungohsc": 7,
      "chung-ming": 32,
      "PremBagda": 19,
      "-": 84
    }
  },
  {
    "path": "src/main/java/seedu/travel/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "import javafx.beans.property.SimpleBooleanProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Place;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.exceptions.PlaceNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " * Represents the in-memory model of the travel book data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private final VersionedTravelBuddy versionedTravelBuddy;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private final FilteredList\u003cPlace\u003e filteredPlaces;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private final SimpleObjectProperty\u003cPlace\u003e selectedPlace \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    private final SimpleBooleanProperty chartDisplayed \u003d new SimpleBooleanProperty(false);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Initializes a ModelManager with the given travelBuddy and userPrefs."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public ModelManager(ReadOnlyTravelBuddy travelBuddy, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        requireAllNonNull(travelBuddy, userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        logger.fine(\"Initializing with travel book: \" + travelBuddy + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        versionedTravelBuddy \u003d new VersionedTravelBuddy(travelBuddy);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        filteredPlaces \u003d new FilteredList\u003c\u003e(versionedTravelBuddy.getPlaceList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        filteredPlaces.addListener(this::ensureSelectedPlaceIsValid);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        this(new TravelBuddy(), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public Path getTravelBuddyFilePath() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        return userPrefs.getTravelBuddyFilePath();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void setTravelBuddyFilePath(Path travelBuddyFilePath) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        requireNonNull(travelBuddyFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        userPrefs.setTravelBuddyFilePath(travelBuddyFilePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TravelBuddy \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void setTravelBuddy(ReadOnlyTravelBuddy travelBuddy) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        versionedTravelBuddy.resetData(travelBuddy);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public ReadOnlyTravelBuddy getTravelBuddy() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        return versionedTravelBuddy;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public boolean hasPlace(Place place) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        requireNonNull(place);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        return versionedTravelBuddy.hasPlace(place);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void deletePlace(Place target) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        versionedTravelBuddy.removePlace(target);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void addPlace(Place place) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        versionedTravelBuddy.addPlace(place);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        updateFilteredPlaceList(PREDICATE_SHOW_ALL_PLACES);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void setPlace(Place target, Place editedPlace) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        requireAllNonNull(target, editedPlace);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        versionedTravelBuddy.setPlace(target, editedPlace);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Place List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Place} backed by the internal list of"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * {@code versionedTravelBuddy}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public ObservableList\u003cPlace\u003e getFilteredPlaceList() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return filteredPlaces;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void updateFilteredPlaceList(Predicate\u003cPlace\u003e predicate) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        filteredPlaces.setPredicate(predicate);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public boolean canUndoTravelBuddy() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        return versionedTravelBuddy.canUndo();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public boolean canRedoTravelBuddy() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        return versionedTravelBuddy.canRedo();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void undoTravelBuddy() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        versionedTravelBuddy.undo();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void redoTravelBuddy() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        versionedTravelBuddy.redo();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void commitTravelBuddy() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        versionedTravelBuddy.commit();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void commitChart() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        versionedTravelBuddy.commitChart();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    public void setChartDisplayed(boolean chartDisplayed) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        this.chartDisplayed.setValue(chartDisplayed);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    public SimpleBooleanProperty chartDisplayedProperty() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        return chartDisplayed;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Selected place \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public ReadOnlyProperty\u003cPlace\u003e selectedPlaceProperty() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return selectedPlace;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public Place getSelectedPlace() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return selectedPlace.getValue();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void setSelectedPlace(Place place) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        if (place !\u003d null \u0026\u0026 !filteredPlaces.contains(place)) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            throw new PlaceNotFoundException();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        selectedPlace.setValue(place);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Ensures {@code selectedPlace} is a valid place in {@code filteredPlaces}."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private void ensureSelectedPlaceIsValid(ListChangeListener.Change\u003c? extends Place\u003e change) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            if (selectedPlace.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                // null is always a valid selected place, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            boolean wasSelectedPlaceReplaced \u003d change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedPlace.getValue());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            if (wasSelectedPlaceReplaced) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                // Update selectedPlace to its new value."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedPlace.getValue());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                selectedPlace.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            boolean wasSelectedPlaceRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                    .anyMatch(removedPlace -\u003e selectedPlace.getValue().isSamePlace(removedPlace));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            if (wasSelectedPlaceRemoved) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                // Select the place that came before it in the list,"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                // or clear the selection if there is no such place."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                selectedPlace.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        return versionedTravelBuddy.equals(other.versionedTravelBuddy)"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                \u0026\u0026 filteredPlaces.equals(other.filteredPlaces)"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                \u0026\u0026 Objects.equals(selectedPlace.get(), other.selectedPlace.get());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaungohsc": 12,
      "chung-ming": 47,
      "PremBagda": 42,
      "-": 151
    }
  },
  {
    "path": "src/main/java/seedu/travel/model/ReadOnlyTravelBuddy.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Place;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " * Unmodifiable view of an travel book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "public interface ReadOnlyTravelBuddy extends Observable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Returns an unmodifiable view of the places list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * This list will not contain any duplicate places."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    ObservableList\u003cPlace\u003e getPlaceList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 4,
      "PremBagda": 3,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/travel/model/ReadOnlyUserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    Path getTravelBuddyFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/travel/model/TravelBuddy.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.util.InvalidationListenerManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Place;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.UniquePlaceList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " * Wraps all data at the travel-book level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PremBagda"
        },
        "content": " * Duplicates are not allowed (by .isSamePlace comparison)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "public class TravelBuddy implements ReadOnlyTravelBuddy {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private final UniquePlaceList places;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        places \u003d new UniquePlaceList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public TravelBuddy() {}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Creates an TravelBuddy using the Places in the {@code toBeCopied}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public TravelBuddy(ReadOnlyTravelBuddy toBeCopied) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Replaces the contents of the place list with {@code places}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * {@code places} must not contain duplicate places."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void setPlaces(List\u003cPlace\u003e places) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        this.places.setPlaces(places);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Resets the existing data of this {@code TravelBuddy} with {@code newData}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void resetData(ReadOnlyTravelBuddy newData) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        setPlaces(newData.getPlaceList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    //// place-level operations"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Returns true if a place with the same identity as {@code place} exists in the travel book."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public boolean hasPlace(Place place) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        requireNonNull(place);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return places.contains(place);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Adds a place to the travel book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * The place must not already exist in the travel book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void addPlace(Place p) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        places.add(p);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Replaces the given place {@code target} in the list with {@code editedPlace}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * {@code target} must exist in the travel book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * The place identity of {@code editedPlace} must not be the same as another existing place in the travel book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void setPlace(Place target, Place editedPlace) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        requireNonNull(editedPlace);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        places.setPlace(target, editedPlace);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Removes {@code key} from this {@code TravelBuddy}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * {@code key} must exist in the travel book."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void removePlace(Place key) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        places.remove(key);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Notifies listeners that the travel book has been modified."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void indicateModified() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(this);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return places.asUnmodifiableObservableList().size() + \" places\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public ObservableList\u003cPlace\u003e getPlaceList() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return places.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                || (other instanceof TravelBuddy // instanceof handles nulls"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                \u0026\u0026 places.equals(((TravelBuddy) other).places));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return places.hashCode();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 21,
      "PremBagda": 24,
      "-": 98
    }
  },
  {
    "path": "src/main/java/seedu/travel/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private Path travelBuddyFilePath \u003d Paths.get(\"data\" , \"travelBuddy.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        setTravelBuddyFilePath(newUserPrefs.getTravelBuddyFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public Path getTravelBuddyFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        return travelBuddyFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void setTravelBuddyFilePath(Path travelBuddyFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        requireNonNull(travelBuddyFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        this.travelBuddyFilePath \u003d travelBuddyFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                \u0026\u0026 travelBuddyFilePath.equals(o.travelBuddyFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        return Objects.hash(guiSettings, travelBuddyFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + travelBuddyFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 12,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/travel/model/VersionedTravelBuddy.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.chart.Chart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Place;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " * {@code TravelBuddy} that keeps track of its own history."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "public class VersionedTravelBuddy extends TravelBuddy {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private final List\u003cReadOnlyTravelBuddy\u003e travelBuddyStateList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    VersionedTravelBuddy(ReadOnlyTravelBuddy initialState) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        travelBuddyStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        travelBuddyStateList.add(new TravelBuddy(initialState));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Saves a copy of the current {@code TravelBuddy} state at the end of the state list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    void commit() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        travelBuddyStateList.add(new TravelBuddy(this));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        commitChart();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    void commitChart() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        ObservableList\u003cPlace\u003e placeList \u003d travelBuddyStateList.get(travelBuddyStateList.size() - 1).getPlaceList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        new Chart(placeList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        travelBuddyStateList.subList(currentStatePointer + 1, travelBuddyStateList.size()).clear();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Restores the travel book to its previous state."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        resetData(travelBuddyStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Restores the travel book to its previously undone state."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        resetData(travelBuddyStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Returns true if {@code undo()} has travel book states to undo."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    boolean canUndo() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Returns true if {@code redo()} has travel book states to redo."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    boolean canRedo() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        return currentStatePointer \u003c travelBuddyStateList.size() - 1;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        if (!(other instanceof VersionedTravelBuddy)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        VersionedTravelBuddy otherVersionedTravelBuddy \u003d (VersionedTravelBuddy) other;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        return super.equals(otherVersionedTravelBuddy)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                \u0026\u0026 travelBuddyStateList.equals(otherVersionedTravelBuddy.travelBuddyStateList)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedTravelBuddy.currentStatePointer;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            super(\"Current state pointer at start of travelBuddyState list, unable to undo.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            super(\"Current state pointer at end of travelBuddyState list, unable to redo.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaungohsc": 1,
      "chung-ming": 36,
      "-": 83
    }
  },
  {
    "path": "src/main/java/seedu/travel/model/chart/Chart.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.model.chart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import com.google.gson.GsonBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import com.google.gson.stream.JsonReader;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.CountryCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Place;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Rating;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " * Stores chart data into JSON files"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "public class Chart {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static final String FILE_CHART_COUNTRY \u003d \"data/countryChart.json\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static final String FILE_CHART_RATING \u003d \"data/ratingChart.json\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static final String FILE_CHART_YEAR \u003d \"data/yearChart.json\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public Chart(ObservableList\u003cPlace\u003e placeList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Map\u003cCountryCode, Integer\u003e mapCountry \u003d createMapCountry(placeList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        storeJsonCountry(mapCountry);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Map\u003cRating, Double\u003e mapRating \u003d createMapRating(placeList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        storeJsonRating(mapRating);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Map\u003cString, Integer\u003e mapYear \u003d createMapYear(placeList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        storeJsonYear(mapYear);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Returns the year set map"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private Map\u003cString, Integer\u003e createMapYear(ObservableList\u003cPlace\u003e placeList) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        String year;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Map\u003cString, Integer\u003e mapYear \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        for (Place place : placeList) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            year \u003d place.getDateVisited().getYear();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            if (mapYear.containsKey(year)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                mapYear.put(year, mapYear.get(year) + 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                mapYear.put(year, 1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        return mapYear;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Returns the rating set map"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private Map\u003cRating, Double\u003e createMapRating(ObservableList\u003cPlace\u003e placeList) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Rating rating;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Map\u003cRating, Double\u003e mapRating \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        for (Place place : placeList) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            rating \u003d place.getRating();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            if (mapRating.containsKey(rating)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                mapRating.put(rating, mapRating.get(rating) + 1.0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                mapRating.put(rating, 1.0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        return mapRating;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Returns the country set map"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private Map\u003cCountryCode, Integer\u003e createMapCountry(ObservableList\u003cPlace\u003e placeList) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        CountryCode countryCode;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Map\u003cCountryCode, Integer\u003e mapCountry \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        for (Place place : placeList) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            countryCode \u003d place.getCountryCode();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            if (mapCountry.containsKey(countryCode)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                mapCountry.put(countryCode, mapCountry.get(countryCode) + 1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                mapCountry.put(countryCode, 1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        return mapCountry;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Stores country in Json file"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private void storeJsonCountry(Map\u003cCountryCode, Integer\u003e mapCountry) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Gson gson \u003d new GsonBuilder().setPrettyPrinting().create();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            FileWriter fileWriterCountry \u003d new FileWriter(FILE_CHART_COUNTRY);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            gson.toJson(mapCountry, fileWriterCountry);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            fileWriterCountry.flush();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            logger.warning(e.getMessage());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Stores rating in Json file"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private void storeJsonRating(Map\u003cRating, Double\u003e mapRating) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Gson gson \u003d new GsonBuilder().setPrettyPrinting().create();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            FileWriter fileWriterRating \u003d new FileWriter(FILE_CHART_RATING);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            gson.toJson(mapRating, fileWriterRating);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            fileWriterRating.flush();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            logger.warning(e.getMessage());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Stores year in Json file"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private void storeJsonYear(Map\u003cString, Integer\u003e mapYear) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Gson gson \u003d new GsonBuilder().setPrettyPrinting().create();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            FileWriter fileWriterYear \u003d new FileWriter(FILE_CHART_YEAR);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            gson.toJson(mapYear, fileWriterYear);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            fileWriterYear.flush();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            logger.warning(e.getMessage());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Returns the hash map of the country"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public Map\u003cCountryCode, Integer\u003e getMapCountry() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Map\u003cCountryCode, Integer\u003e mapCountry \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            FileReader fileReader \u003d new FileReader(FILE_CHART_COUNTRY);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            JsonReader jsonReader \u003d new JsonReader(fileReader);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            Gson gson \u003d new Gson();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            mapCountry \u003d gson.fromJson(jsonReader, HashMap.class);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            fileReader.close();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            jsonReader.close();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            logger.warning(e.getMessage());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        return mapCountry;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Returns the hash map of the rating"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public Map\u003cRating, Double\u003e getMapRating() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Map\u003cRating, Double\u003e mapRating \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            FileReader fileReader \u003d new FileReader(FILE_CHART_RATING);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            JsonReader jsonReader \u003d new JsonReader(fileReader);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            Gson gson \u003d new Gson();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            mapRating \u003d gson.fromJson(jsonReader, HashMap.class);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            fileReader.close();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            jsonReader.close();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            logger.warning(e.getMessage());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        return mapRating;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Returns the hash map of the year"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public Map\u003cString, Integer\u003e getMapYear() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Map\u003cString, Integer\u003e mapYear \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            FileReader fileReader \u003d new FileReader(FILE_CHART_YEAR);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            JsonReader jsonReader \u003d new JsonReader(fileReader);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            Gson gson \u003d new Gson();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            mapYear \u003d gson.fromJson(jsonReader, HashMap.class);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            fileReader.close();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            jsonReader.close();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            logger.warning(e.getMessage());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        return mapYear;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 189
    }
  },
  {
    "path": "src/main/java/seedu/travel/model/place/Address.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.model.place;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " * Represents a Place\u0027s travel in TravelBuddy."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * The first character of the travel must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * @param address A valid travel."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 5,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/travel/model/place/CountryCode.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.model.place;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " * Represents a Place\u0027s country code in TravelBuddy."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PremBagda"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCountryCode(String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PremBagda"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "public class CountryCode {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Country codes should only contain three-letter ISO-3166 codes\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public final String code;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Constructs a {@code CountryCode}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * @param countryCode A valid country code."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public CountryCode(String countryCode) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        requireNonNull(countryCode);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        checkArgument(isValidCountryCode(countryCode), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        this.code \u003d countryCode.toUpperCase();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Returns true if a given string is a valid country code."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public static boolean isValidCountryCode(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        if (!(test instanceof String)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            throw new java.lang.NullPointerException();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        String[] allCountries \u003d Locale.getISOCountries();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        for (String countryCode : allCountries) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            Locale obj \u003d new Locale(\"\", countryCode);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            if (obj.getISO3Country().equalsIgnoreCase(test)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return code;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            || (other instanceof CountryCode // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            \u0026\u0026 code.equals(((CountryCode) other).code)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return code.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 3,
      "PremBagda": 61,
      "nivenang": 1
    }
  },
  {
    "path": "src/main/java/seedu/travel/model/place/CountryCodeContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.model.place;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PremBagda"
        },
        "content": " * Tests that a {@code Place}\u0027s {@code CountryCode} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PremBagda"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "public class CountryCodeContainsKeywordsPredicate implements Predicate\u003cPlace\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public CountryCodeContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public boolean test(Place place) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            .anyMatch(keyword -\u003e StringUtil.containsCountryCode(place.getCountryCode().code, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            || (other instanceof seedu.travel.model.place.CountryCodeContainsKeywordsPredicate"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            \u0026\u0026 keywords.equals(((seedu.travel.model.place.CountryCodeContainsKeywordsPredicate) other)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                .keywords)); // state check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 4,
      "PremBagda": 30
    }
  },
  {
    "path": "src/main/java/seedu/travel/model/place/DateVisited.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "package seedu.travel.model.place;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import static seedu.travel.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PremBagda"
        },
        "content": " * Represents the date that the place was visited in TravelBuddy."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PremBagda"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDateVisited(String)}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PremBagda"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "public class DateVisited {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_SEARCH \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            \"Years should only contain a year from 1900 to the current year\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public static final String MESSAGE_INCORRECT_FORMAT \u003d \"Date visited must follow the DD/MM/YYYY format\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String MESSAGE_FUTURE_DATE_ADDED \u003d \"Date visited must be a present or past date after 1900\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final Integer YEAR_MINIMUM \u003d 1900;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private final String year;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    * Constructs a {@code DateVisited}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    * @param strDateVisited A valid date visited."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public DateVisited(String strDateVisited) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        requireNonNull(strDateVisited);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        checkArgument(isCorrectDateFormat(strDateVisited), MESSAGE_INCORRECT_FORMAT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        checkArgument(isValidDateVisited(strDateVisited), MESSAGE_FUTURE_DATE_ADDED);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        this.date \u003d strDateVisited;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        this.year \u003d date.substring(date.length() - 4);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Returns the date"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Returns the year"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public String getYear() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        return year;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Returns true if a given string is in the correct date format."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public static boolean isCorrectDateFormat(String strDate) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        if (!(strDate instanceof String)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            throw new java.lang.NullPointerException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        if (strDate.trim().equals(\"\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        SimpleDateFormat simpleDateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        simpleDateFormat.setLenient(false);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Date date;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // Checking if the format is correct."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            date \u003d simpleDateFormat.parse(strDate);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            // format is incorrect."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Returns true if a given string is a present or past date after 1900."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public static boolean isValidDateVisited(String strDate) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        if (!(strDate instanceof String)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            throw new java.lang.NullPointerException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Date todayDate \u003d new Date();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        SimpleDateFormat simpleDateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Date dateVisit;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            dateVisit \u003d simpleDateFormat.parse(strDate);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            // format is incorrect."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        String noPersonBornBeforeThisDate \u003d \"01/01/1900\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Date birthDate;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            birthDate \u003d simpleDateFormat.parse(noPersonBornBeforeThisDate);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            // format is incorrect."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        if (dateVisit.after(todayDate) || dateVisit.before(birthDate)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        if (todayDate.before(birthDate)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Returns true if a given string is a year that is after 1900 and before current year"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static boolean isValidYear(String strDate) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        if (!(strDate instanceof String)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            throw new java.lang.NullPointerException();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        LocalDateTime currentTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        int maxYear \u003d currentTime.getYear();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        Integer queryYear;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // checks if input string is an integer"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            queryYear \u003d Integer.parseInt(strDate);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // checks if input year is within the range of 1900-current year"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        if (queryYear \u003c YEAR_MINIMUM || queryYear \u003e maxYear) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return date.toString();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            || (other instanceof DateVisited // instanceof handles nulls"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            \u0026\u0026 date.equals(((DateVisited) other).date)); // state check"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return date.hashCode();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 18,
      "PremBagda": 105,
      "nivenang": 37
    }
  },
  {
    "path": "src/main/java/seedu/travel/model/place/Description.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.model.place;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " * Represents a Place\u0027s description in the travel book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Description cannot be left empty. \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            + \"Type \u0027No description\u0027 if there is no description.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            + \"Description should be written in one paragraph that starts with either a \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            + \"lowercase or uppercase alphabet character.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            + \"After that, any character except the line break is acceptable. \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[a-zA-Z]+.*\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Constructs an {@code Description}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        value \u003d description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Returns if a given string is a valid description."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                \u0026\u0026 value.equals(((Description) other).value)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 23,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/travel/model/place/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.model.place;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " * Represents a Place\u0027s name in TravelBuddy."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * The first character of the travel must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 9,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/travel/model/place/NameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.model.place;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PremBagda"
        },
        "content": " * Tests that a {@code Place}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cPlace\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public boolean test(Place place) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(place.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 2,
      "PremBagda": 4,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/travel/model/place/Place.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.model.place;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " * Represents a Place in TravelBuddy."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "public class Place {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private final CountryCode countryCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private final DateVisited dateVisited;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private final Rating rating;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public Place(Name name, CountryCode countryCode, DateVisited dateVisited, Rating rating, Description description,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        requireAllNonNull(name, countryCode, dateVisited, rating, description, address, tags);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        this.countryCode \u003d countryCode;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        this.dateVisited \u003d dateVisited;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        this.rating \u003d rating;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public CountryCode getCountryCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return countryCode;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public DateVisited getDateVisited() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return dateVisited;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public Rating getRating() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        return rating;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Returns true if both places of the same name also have the same phone number."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * This defines a weaker notion of equality between two places."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public boolean isSamePlace(Place otherPlace) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        if (otherPlace \u003d\u003d this) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        return otherPlace !\u003d null \u0026\u0026 otherPlace.getName().equals(getName());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Returns true if both places have the same identity and data fields."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * This defines a stronger notion of equality between two places."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        if (!(other instanceof Place)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Place otherPlace \u003d (Place) other;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return otherPlace.getName().equals(getName())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                \u0026\u0026 otherPlace.getCountryCode().equals(getCountryCode())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                \u0026\u0026 otherPlace.getDateVisited().equals(getDateVisited())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                \u0026\u0026 otherPlace.getRating().equals(getRating())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                \u0026\u0026 otherPlace.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                \u0026\u0026 otherPlace.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                \u0026\u0026 otherPlace.getTags().equals(getTags());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return Objects.hash(name, countryCode, dateVisited, rating, description, address, tags);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                .append(\" Country Code: \")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                .append(getCountryCode())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                .append(\" Date Visited: \")"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                .append(getDateVisited())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                .append(\" Rating: \")"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                .append(getRating())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 13,
      "PremBagda": 33,
      "nivenang": 7,
      "-": 84
    }
  },
  {
    "path": "src/main/java/seedu/travel/model/place/Rating.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.model.place;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " * Represents a Place\u0027s rating in TravelBuddy."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nivenang"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidRating(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nivenang"
        },
        "content": "public class Rating {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            \"Ratings should only contain a single number from 1 to 5\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[1-5]\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Constructs a {@code Rating}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * @param rating A valid rating."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public Rating(String rating) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        requireNonNull(rating);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        checkArgument(isValidRating(rating), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        this.value \u003d rating;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Returns true if a given string is a valid rating."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static boolean isValidRating(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                || (other instanceof Rating // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                \u0026\u0026 value.equals(((Rating) other).value)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 10,
      "nivenang": 12,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/travel/model/place/RatingContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.model.place;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nivenang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nivenang"
        },
        "content": " * Tests that a {@code Place}\u0027s {@code Rating} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nivenang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nivenang"
        },
        "content": "public class RatingContainsKeywordsPredicate implements Predicate\u003cPlace\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public RatingContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public boolean test(Place place) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsRating(place.getRating().value, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                || (other instanceof RatingContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                \u0026\u0026 keywords.equals(((RatingContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nivenang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 2,
      "nivenang": 29
    }
  },
  {
    "path": "src/main/java/seedu/travel/model/place/TagContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.model.place;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nivenang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nivenang"
        },
        "content": " * Tests that a {@code Place}\u0027s {@code Tag} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nivenang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nivenang"
        },
        "content": "public class TagContainsKeywordsPredicate implements Predicate\u003cPlace\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public TagContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public boolean test(Place place) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsTagIgnoreCase(place.getTags(), keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                || (other instanceof TagContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                \u0026\u0026 keywords.equals(((TagContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nivenang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 2,
      "nivenang": 29
    }
  },
  {
    "path": "src/main/java/seedu/travel/model/place/UniquePlaceList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.model.place;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.exceptions.DuplicatePlaceException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.exceptions.PlaceNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PremBagda"
        },
        "content": " * A list of places that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PremBagda"
        },
        "content": " * A place is considered unique by comparing using {@code Place#isSamePlace(Place)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PremBagda"
        },
        "content": " * places uses Place#isSamePlace(Place) for equality so as to ensure that the place being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PremBagda"
        },
        "content": " * unique in terms of identity in the UniquePlaceList. However, the removal of a place uses Place#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PremBagda"
        },
        "content": " * as to ensure that the place with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PremBagda"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PremBagda"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PremBagda"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PremBagda"
        },
        "content": " * @see Place#isSamePlace(Place)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PremBagda"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "public class UniquePlaceList implements Iterable\u003cPlace\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private final ObservableList\u003cPlace\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private final ObservableList\u003cPlace\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Returns true if the list contains an equivalent place as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public boolean contains(Place toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePlace);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Adds a place to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * The place must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void add(Place toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            throw new DuplicatePlaceException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Replaces the place {@code target} in the list with {@code editedPlace}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * The place identity of {@code editedPlace} must not be the same as another existing place in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void setPlace(Place target, Place editedPlace) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        requireAllNonNull(target, editedPlace);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            throw new PlaceNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        if (!target.isSamePlace(editedPlace) \u0026\u0026 contains(editedPlace)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            throw new DuplicatePlaceException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        internalList.set(index, editedPlace);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Removes the equivalent place from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * The place must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void remove(Place toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            throw new PlaceNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void setPlaces(UniquePlaceList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Replaces the contents of this list with {@code places}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * {@code places} must not contain duplicate places."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void setPlaces(List\u003cPlace\u003e places) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        requireAllNonNull(places);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        if (!placesAreUnique(places)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            throw new DuplicatePlaceException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        internalList.setAll(places);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public ObservableList\u003cPlace\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public Iterator\u003cPlace\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                || (other instanceof UniquePlaceList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePlaceList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Returns true if {@code places} contains only unique places."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private boolean placesAreUnique(List\u003cPlace\u003e places) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        for (int i \u003d 0; i \u003c places.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            for (int j \u003d i + 1; j \u003c places.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                if (places.get(i).isSamePlace(places.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 4,
      "PremBagda": 133
    }
  },
  {
    "path": "src/main/java/seedu/travel/model/place/YearContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nivenang"
        },
        "content": "package seedu.travel.model.place;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nivenang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nivenang"
        },
        "content": " * Tests that a {@code Place}\u0027s {@code CountryCode} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nivenang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nivenang"
        },
        "content": "public class YearContainsKeywordsPredicate implements Predicate\u003cPlace\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public YearContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public boolean test(Place place) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsYear(place.getDateVisited().getYear(), keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                || (other instanceof seedu.travel.model.place.YearContainsKeywordsPredicate"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                // instanceof handles nulls"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                \u0026\u0026 keywords.equals(((seedu.travel.model.place.YearContainsKeywordsPredicate) other)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                .keywords)); // state check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nivenang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 1,
      "nivenang": 33
    }
  },
  {
    "path": "src/main/java/seedu/travel/model/place/exceptions/DuplicatePlaceException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.model.place.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PremBagda"
        },
        "content": " * Signals that the operation will result in duplicate Places (Places are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PremBagda"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PremBagda"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "public class DuplicatePlaceException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public DuplicatePlaceException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        super(\"Operation would result in duplicate places\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 1,
      "PremBagda": 10
    }
  },
  {
    "path": "src/main/java/seedu/travel/model/place/exceptions/PlaceNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.model.place.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PremBagda"
        },
        "content": " * Signals that the operation is unable to find the specified place."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PremBagda"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "public class PlaceNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 1,
      "PremBagda": 5
    }
  },
  {
    "path": "src/main/java/seedu/travel/model/tag/Tag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " * Represents a Tag in TravelBuddy."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 4,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/travel/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.ReadOnlyTravelBuddy;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.TravelBuddy;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.CountryCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import seedu.travel.model.place.DateVisited;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Place;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Rating;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " * Contains utility methods for populating {@code TravelBuddy} with sample data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public static Place[] getSamplePlaces() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return new Place[] {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            new Place(new Name(\"VivoCity\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                    new CountryCode(\"SGP\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                    new DateVisited(\"10/10/2017\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                    new Rating(\"1\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                    new Description(\"Expansive, modern shopping center hosting a wide range of retailers, \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                            + \"restaurants \u0026 theaters.\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                    new Address(\"1 Harbourfront Walk, Singapore 098585\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                    getTagSet(\"shoppingMall\")),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            new Place(new Name(\"Changi Airport Singapore\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                    new CountryCode(\"SGP\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                    new DateVisited(\"01/01/2019\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                    new Rating(\"5\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                    new Description(\"Passenger \u0026 cargo hub with 4 modern terminals plus buses \u0026 trains to the \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                            + \"city center.\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                    new Address(\"Airport Boulevard\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                    getTagSet(\"airport\", \"shoppingMall\")),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            new Place(new Name(\"Japanese Cemetery Park\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                    new CountryCode(\"SGP\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                    new DateVisited(\"11/09/2017\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                    new Rating(\"3\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                    new Description(\"The Japanese Cemetery Park serves as the burial ground for Japanese soldiers \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                            + \"and civilians who lived in the early 20th century.\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                    new Address(\"22 Chuan Hoe Ave, Singapore 549854\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                    getTagSet(\"cemetery\", \"placeOfInterest\")),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            new Place(new Name(\"Universal Studios Singapore\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                    new CountryCode(\"SGP\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                    new DateVisited(\"23/12/2017\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                    new Rating(\"4\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                    new Description(\"Movie amusement park with sets \u0026 rides on themes from Hollywood to sci-fi, \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                            + \"plus live entertainment.\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                    new Address(\"8 Sentosa Gateway, 0982693\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                    getTagSet(\"amusementPark\", \"recreation\")),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            new Place(new Name(\"National University of Singapore\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                    new CountryCode(\"SGP\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                    new DateVisited(\"10/10/2018\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                    new Rating(\"4\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                    new Description(\"The National University of Singapore is an autonomous research university \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                            + \"in Singapore.\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                    new Address(\"21 Lower Kent Ridge Rd, Singapore 119077\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                    getTagSet(\"school\")),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            new Place(new Name(\"Singapore Zoo\"),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                    new CountryCode(\"SGP\"),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                    new DateVisited(\"09/08/2018\"),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                    new Rating(\"3\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                    new Description(\"Rainforest zoo with tram rides, trails \u0026 viewing platforms to see wildlife \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                            + \"habitats \u0026 exhibits.\"),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                    new Address(\"80 Mandai Lake Rd, Singapore 729826\"),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                    getTagSet(\"zoo\", \"animals\"))"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static ReadOnlyTravelBuddy getSampleTravelBuddy() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        TravelBuddy sampleAb \u003d new TravelBuddy();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        for (Place samplePlace : getSamplePlaces()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            sampleAb.addPlace(samplePlace);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 44,
      "PremBagda": 6,
      "nivenang": 16,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/travel/storage/JsonAdaptedPlace.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.CountryCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import seedu.travel.model.place.DateVisited;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Place;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Rating;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PremBagda"
        },
        "content": " * Jackson-friendly version of {@link Place}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "class JsonAdaptedPlace {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Place\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private final String countryCode;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private final String dateVisited;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private final String rating;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Constructs a {@code JsonAdaptedPlace} with the given place details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public JsonAdaptedPlace(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                            @JsonProperty(\"countryCode\") String countryCode,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                            @JsonProperty(\"dateVisited\") String dateVisited,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                            @JsonProperty(\"rating\") String rating,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                            @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                            @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        this.countryCode \u003d countryCode;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        this.dateVisited \u003d dateVisited;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        this.rating \u003d rating;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Converts a given {@code Place} into this class for Jackson use."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public JsonAdaptedPlace(Place source) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        countryCode \u003d source.getCountryCode().code;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        dateVisited \u003d source.getDateVisited().getDate();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        rating \u003d source.getRating().value;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        description \u003d source.getDescription().value;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Converts this Jackson-friendly adapted place object into the model\u0027s {@code Place} object."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted place."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public Place toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        final List\u003cTag\u003e placeTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            placeTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        if (countryCode \u003d\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                CountryCode.class.getSimpleName()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        if (!CountryCode.isValidCountryCode(countryCode)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            throw new IllegalValueException(CountryCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        final CountryCode modelCountryCode \u003d new CountryCode(countryCode);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        if (dateVisited \u003d\u003d null) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                DateVisited.class.getSimpleName()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        if (!DateVisited.isCorrectDateFormat(dateVisited)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            throw new IllegalValueException(DateVisited.MESSAGE_INCORRECT_FORMAT);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        if (!DateVisited.isValidDateVisited(dateVisited)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            throw new IllegalValueException(DateVisited.MESSAGE_FUTURE_DATE_ADDED);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        final DateVisited modelDateVisited \u003d new DateVisited(dateVisited);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        if (rating \u003d\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Rating.class.getSimpleName()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        if (!Rating.isValidRating(rating)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            throw new IllegalValueException(Rating.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        final Rating modelPhone \u003d new Rating(rating);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(placeTags);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return new Place(modelName, modelCountryCode, modelDateVisited, modelPhone, modelDescription, modelAddress,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            modelTags);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 23,
      "PremBagda": 43,
      "nivenang": 8,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/travel/storage/JsonAdaptedTag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 3,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/travel/storage/JsonSerializableTravelBuddy.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.ReadOnlyTravelBuddy;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.TravelBuddy;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Place;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " * An Immutable TravelBuddy that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "@JsonRootName(value \u003d \"travelBuddy\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "class JsonSerializableTravelBuddy {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PLACE \u003d \"Places list contains duplicate place(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private final List\u003cJsonAdaptedPlace\u003e places \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Constructs a {@code JsonSerializableTravelBuddy} with the given places."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public JsonSerializableTravelBuddy(@JsonProperty(\"places\") List\u003cJsonAdaptedPlace\u003e places) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        this.places.addAll(places);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Converts a given {@code ReadOnlyTravelBuddy} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableTravelBuddy}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public JsonSerializableTravelBuddy(ReadOnlyTravelBuddy source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        places.addAll(source.getPlaceList().stream().map(JsonAdaptedPlace::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Converts this travel book into the model\u0027s {@code TravelBuddy} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public TravelBuddy toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        TravelBuddy travelBuddy \u003d new TravelBuddy();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        for (JsonAdaptedPlace jsonAdaptedPlace : places) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            Place place \u003d jsonAdaptedPlace.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            if (travelBuddy.hasPlace(place)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PLACE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            travelBuddy.addPlace(place);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        return travelBuddy;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 60
    }
  },
  {
    "path": "src/main/java/seedu/travel/storage/JsonTravelBuddyStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.ReadOnlyTravelBuddy;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " * A class to access TravelBuddy data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "public class JsonTravelBuddyStorage implements TravelBuddyStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonTravelBuddyStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private final Path backupFilePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public JsonTravelBuddyStorage(Path filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        this.backupFilePath \u003d Paths.get(filePath.toString() + \".backup\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public Path getTravelBuddyFilePath() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public Optional\u003cReadOnlyTravelBuddy\u003e readTravelBuddy() throws DataConversionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        return readTravelBuddy(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Similar to {@link #readTravelBuddy()}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public Optional\u003cReadOnlyTravelBuddy\u003e readTravelBuddy(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Optional\u003cJsonSerializableTravelBuddy\u003e jsonTravelBuddy \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                filePath, JsonSerializableTravelBuddy.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        if (!jsonTravelBuddy.isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            return Optional.of(jsonTravelBuddy.get().toModelType());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void saveTravelBuddy(ReadOnlyTravelBuddy travelBuddy) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        saveTravelBuddy(travelBuddy, filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Similar to {@link #saveTravelBuddy(ReadOnlyTravelBuddy)}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void saveTravelBuddy(ReadOnlyTravelBuddy travelBuddy, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        requireNonNull(travelBuddy);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableTravelBuddy(travelBuddy), filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void backupTravelBuddy(ReadOnlyTravelBuddy travelBuddy) throws IOException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        saveTravelBuddy(travelBuddy, backupFilePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 36,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/travel/storage/JsonUserPrefsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/travel/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.ReadOnlyTravelBuddy;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "public interface Storage extends TravelBuddyStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    Path getTravelBuddyFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    Optional\u003cReadOnlyTravelBuddy\u003e readTravelBuddy() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    void saveTravelBuddy(ReadOnlyTravelBuddy travelBuddy) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 32
    }
  },
  {
    "path": "src/main/java/seedu/travel/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.ReadOnlyTravelBuddy;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " * Manages storage of TravelBuddy data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private TravelBuddyStorage travelBuddyStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public StorageManager(TravelBuddyStorage travelBuddyStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        this.travelBuddyStorage \u003d travelBuddyStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TravelBuddy methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public Path getTravelBuddyFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        return travelBuddyStorage.getTravelBuddyFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public Optional\u003cReadOnlyTravelBuddy\u003e readTravelBuddy() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        return readTravelBuddy(travelBuddyStorage.getTravelBuddyFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public Optional\u003cReadOnlyTravelBuddy\u003e readTravelBuddy(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        return travelBuddyStorage.readTravelBuddy(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void saveTravelBuddy(ReadOnlyTravelBuddy travelBuddy) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        saveTravelBuddy(travelBuddy, travelBuddyStorage.getTravelBuddyFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void saveTravelBuddy(ReadOnlyTravelBuddy travelBuddy, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        travelBuddyStorage.saveTravelBuddy(travelBuddy, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void backupTravelBuddy(ReadOnlyTravelBuddy travelBuddy) throws IOException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        travelBuddyStorage.backupTravelBuddy(travelBuddy);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 24,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/travel/storage/TravelBuddyStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.ReadOnlyTravelBuddy;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.TravelBuddy;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " * Represents a storage for {@link TravelBuddy}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "public interface TravelBuddyStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    Path getTravelBuddyFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Returns TravelBuddy data as a {@link ReadOnlyTravelBuddy}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    Optional\u003cReadOnlyTravelBuddy\u003e readTravelBuddy() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * @see #getTravelBuddyFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    Optional\u003cReadOnlyTravelBuddy\u003e readTravelBuddy(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Saves the given {@link ReadOnlyTravelBuddy} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * @param travelBuddy cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    void saveTravelBuddy(ReadOnlyTravelBuddy travelBuddy) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * @see #saveTravelBuddy(ReadOnlyTravelBuddy)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    void saveTravelBuddy(ReadOnlyTravelBuddy travelBuddy, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    void backupTravelBuddy(ReadOnlyTravelBuddy travelBuddy) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 47
    }
  },
  {
    "path": "src/main/java/seedu/travel/storage/UserPrefsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " * Represents a storage for {@link seedu.travel.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Saves the given {@link seedu.travel.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/travel/ui/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Place;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final URL DEFAULT_PAGE \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(MainApp.class.getResource(FXML_FILE_FOLDER + \"default.html\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SEARCH_PAGE_URL \u003d \"https://se-education.org/dummy-search-page/?name\u003d\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public BrowserPanel(ObservableValue\u003cPlace\u003e selectedPlace) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // Load place page when selected place changes."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        selectedPlace.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                loadDefaultPage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            loadPlacePage(newValue);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        //loadPage(DUMMY_PAGE_URL);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Redirects to the loadsMapPage() with a specified travel."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private void loadPlacePage(Place place) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        loadPage(SEARCH_PAGE_URL + place.getName().fullName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private void loadPage(String url) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().load(url));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(DEFAULT_PAGE.toExternalForm());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 9,
      "PremBagda": 6,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/travel/ui/CommandBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e history;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor, List\u003cString\u003e history) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.history \u003d history;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d new ListElementPointer(history);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToPreviousInput();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToNextInput();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot},"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasPrevious()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.previous());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot},"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a next input in {@code historySnapshot}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasNext()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.next());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * positions the caret to the end of the {@code text}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void replaceText(String text) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d new ListElementPointer(history);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "         * @see seedu.travel.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 5,
      "-": 149
    }
  },
  {
    "path": "src/main/java/seedu/travel/ui/CountryChartUi.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import com.google.gson.stream.JsonReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import javafx.scene.chart.BarChart;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import javafx.scene.chart.CategoryAxis;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.CountryCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " * Generates the UI portion of the chart."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "public class CountryChartUi extends Application {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    // final static String austria \u003d \"Austria\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    // final static String brazil \u003d \"Brazil\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    // final static String france \u003d \"France\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    // final static String italy \u003d \"Italy\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    // final static String usa \u003d \"USA\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        stage.setTitle(\"Number of Places Visited for Each Country\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        final CategoryAxis xAxis \u003d new CategoryAxis();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        final NumberAxis yAxis \u003d new NumberAxis();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        final BarChart\u003cString, Number\u003e barChart \u003d new BarChart\u003c\u003e(xAxis, yAxis);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        barChart.setTitle(\"Number of Places Visited for Each Country\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        xAxis.setLabel(\"Country\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        yAxis.setLabel(\"Number of Places\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Map\u003cCountryCode, Integer\u003e responsesCountry \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            FileReader fileReaderCountry \u003d new FileReader(\"data/countryChart.json\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            JsonReader jsonReaderCountry \u003d new JsonReader(fileReaderCountry);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            Gson gson \u003d new Gson();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            responsesCountry \u003d gson.fromJson(jsonReaderCountry, HashMap.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            fileReaderCountry.close();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            jsonReaderCountry.close();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            logger.warning(e.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        XYChart.Series seriesCountry \u003d new XYChart.Series();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        seriesCountry.setName(\"Country\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Object[] countries \u003d responsesCountry.keySet().toArray();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        for (int i \u003d 0; i \u003c responsesCountry.size(); i++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            String country \u003d (String) countries[i];"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            seriesCountry.getData().add(new XYChart.Data(country, responsesCountry.get(country)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            logger.info(country + \", \" + responsesCountry.get(country) + \"\\n\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Scene scene \u003d new Scene(barChart);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        barChart.getData().add(seriesCountry);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 74,
      "PremBagda": 3
    }
  },
  {
    "path": "src/main/java/seedu/travel/ui/DisplayCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import javafx.scene.chart.BarChart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import javafx.scene.chart.LineChart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.chart.Chart;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.CountryCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Rating;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " * An UI component that displays information of a {@code Place}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "public class DisplayCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private static final String FXML \u003d \"DisplayListCard.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public final Chart chart;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private VBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private BarChart countryBarChart;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private PieChart ratingPieChart;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private LineChart yearLineChart;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public DisplayCard(Chart chart) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        this.chart \u003d chart;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Map\u003cCountryCode, Integer\u003e mapCountry \u003d chart.getMapCountry();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        createBarChart(mapCountry);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Map\u003cRating, Double\u003e mapRating \u003d chart.getMapRating();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        createPieChart(mapRating);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Map\u003cString, Integer\u003e mapYear \u003d chart.getMapYear();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        createLineChart(mapYear);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Creates a bar chart"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private void createBarChart(Map\u003cCountryCode, Integer\u003e mapCountry) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        XYChart.Series series \u003d new XYChart.Series();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Object[] countries \u003d mapCountry.keySet().toArray();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        for (int i \u003d 0; i \u003c mapCountry.size(); i++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            String countryName \u003d (String) countries[i];"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            series.getData().add(new XYChart.Data(countryName, mapCountry.get(countryName)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        countryBarChart.setTitle(\"Number of Places Visited for Each Country\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        countryBarChart.getYAxis().setLabel(\"Number of Places\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        countryBarChart.getXAxis().setLabel(\"Country\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        countryBarChart.setLegendVisible(false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        countryBarChart.getData().add(series);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        countryBarChart.setStyle(\"-fx-padding: 45 10 45 10;\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Creates a pie chart"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private void createPieChart(Map\u003cRating, Double\u003e mapRating) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        ObservableList\u003cPieChart.Data\u003e pieChartData \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Object[] ratings \u003d mapRating.keySet().toArray();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        for (int i \u003d 0; i \u003c mapRating.size(); i++) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            String ratingName \u003d (String) ratings[i];"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            pieChartData.add(new PieChart.Data(ratingName + \" Stars\", mapRating.get(ratingName)));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        ratingPieChart.setTitle(\"Number of Places Visited for Each Rating Category\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        ratingPieChart.setData(pieChartData);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        ratingPieChart.setStyle(\"-fx-padding: 45 0 45 0;\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Creates a line chart"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private void createLineChart(Map\u003cString, Integer\u003e mapYear) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        XYChart.Series series \u003d new XYChart.Series();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Object[] years \u003d mapYear.keySet().toArray();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        for (int i \u003d 0; i \u003c mapYear.size(); i++) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            String year \u003d (String) years[i];"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            series.getData().add(new XYChart.Data(year, mapYear.get(year)));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        yearLineChart.setTitle(\"Number of Places Visited for Each Year\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        yearLineChart.getYAxis().setLabel(\"Number of Places\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        yearLineChart.getXAxis().setLabel(\"Year\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        yearLineChart.setLegendVisible(false);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        yearLineChart.getData().add(series);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        yearLineChart.setStyle(\"-fx-padding: 45 10 45 10;\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        if (!(other instanceof DisplayCard)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        DisplayCard card \u003d (DisplayCard) other;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        return chart.equals(card.chart);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 129
    }
  },
  {
    "path": "src/main/java/seedu/travel/ui/DisplayListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import javafx.scene.input.MouseEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.chart.Chart;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Place;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " * Panel containing the list of places."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "public class DisplayListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private static final String FXML \u003d \"DisplayListPanel.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(DisplayListPanel.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private ListView\u003cChart\u003e displayListView;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    public DisplayListPanel(ObservableList\u003cPlace\u003e placeList, Consumer\u003cPlace\u003e onSelectedDisplayChange) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        ObservableList\u003cChart\u003e charts \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        charts.add(new Chart(placeList));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        displayListView.setItems(charts);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        displayListView.setCellFactory(listView -\u003e new DisplayListViewCell());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        System.out.println(\"generate outer\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        placeList.addListener(new ListChangeListener\u003cPlace\u003e() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            public void onChanged(Change\u003c? extends Place\u003e c) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                ObservableList\u003cChart\u003e charts \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                charts.add(new Chart(placeList));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                displayListView.setItems(charts);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                displayListView.setCellFactory(listView -\u003e new DisplayListViewCell());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                System.out.println(\"generate inner 1\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        });"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        charts.addListener(new ListChangeListener\u003cChart\u003e() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            public void onChanged(Change\u003c? extends Chart\u003e c) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                ObservableList\u003cChart\u003e charts \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                charts.add(new Chart(placeList));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                displayListView.setItems(charts);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                displayListView.setCellFactory(listView -\u003e new DisplayListViewCell());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                System.out.println(\"generate inner 2\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        placeList.addListener(new ListChangeListener\u003cPlace\u003e() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            public void onChanged(Change\u003c? extends Place\u003e c) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "                ObservableList\u003cChart\u003e charts \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "                charts.add(new Chart(placeList));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "                // adds only one dummy Place to the list"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "                displayListView.setItems(charts);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "                displayListView.setCellFactory(listView -\u003e new DisplayListViewCell());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        });"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // disables selection in list view"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        displayListView.addEventFilter(MouseEvent.ANY, new EventHandler\u003cMouseEvent\u003e() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            public void handle(MouseEvent mouseEvent) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                mouseEvent.consume();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        });"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Place} using a {@code DisplayCard}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    class DisplayListViewCell extends ListCell\u003cChart\u003e {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        protected void updateItem(Chart chart, boolean empty) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            super.updateItem(chart, empty);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            if (empty || chart \u003d\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                setGraphic(new DisplayCard(chart).getRoot());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaungohsc": 14,
      "chung-ming": 83
    }
  },
  {
    "path": "src/main/java/seedu/travel/ui/ExpandedPlacePanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "package seedu.travel.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "import seedu.travel.model.place.Place;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": " * An UI component that displays information of a {@code Place}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "public class ExpandedPlacePanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    private static final String FXML \u003d \"ExpandedPlacePanel.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    private static final String[] TAG_COLOR_STYLES \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        { \"teal\", \"red\", \"yellow\", \"blue\", \"orange\", \"brown\", \"green\", \"salmon\", \"black\", \"grey\" };"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    public final Place place;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    private Label countryCode;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    private Label dateVisited;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    private Label rating;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    public ExpandedPlacePanel(Place place) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        this.place \u003d place;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        id.setText(\"\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        name.setText(place.getName().fullName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        countryCode.setText(place.getCountryCode().code);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        dateVisited.setText(place.getDateVisited().getDate());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        rating.setText(place.getRating().value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        address.setText(place.getAddress().value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        description.setText(place.getDescription().value);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        initTags(place);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    public ExpandedPlacePanel() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        this.place \u003d null;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        id.setText(\"\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        name.setText(\"Nothing selected\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        countryCode.setText(\"SGP\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        dateVisited.setText(\"01/01/1970\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        rating.setText(\"1\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        address.setText(\"Nothing selected\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        description.setText(\"Nothing selected\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "     * Returns the color style for {@code tagName}\u0027s label."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    private String getTagColorStyleFor(String tagName) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        // Hash code of the tag name to generate a random color, so that the color remain consistent"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        // between different runs of the program while still making it random enough between tags."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        return TAG_COLOR_STYLES[Math.abs(tagName.hashCode()) % TAG_COLOR_STYLES.length];"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "     * Creates the tag labels for {@code place}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    private void initTags(Place place) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        place.getTags().forEach(tag -\u003e {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            Label tagLabel \u003d new Label(tag.tagName);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            tagLabel.getStyleClass().add(getTagColorStyleFor(tag.tagName));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            tags.getChildren().add(tagLabel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        });"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        if (!(other instanceof ExpandedPlacePanel)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        ExpandedPlacePanel card \u003d (ExpandedPlacePanel) other;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "                \u0026\u0026 place.equals(card.place);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaungohsc": 110
    }
  },
  {
    "path": "src/main/java/seedu/travel/ui/HelpWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USERGUIDE_FILE_PATH \u003d \"/docs/HelpWindow.html\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String userGuideUrl \u003d getClass().getResource(USERGUIDE_FILE_PATH).toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        browser.getEngine().load(userGuideUrl);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 2,
      "-": 83
    }
  },
  {
    "path": "src/main/java/seedu/travel/ui/ListElementPointer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Has a cursor that points to an element in the list, and is able to iterate through the list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * This is different from {@code ListIterator}, which has a cursor that points in between elements."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * The {@code ListIterator}\u0027s behaviour: when making alternating calls of {@code next()} and"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code previous()}, the same element is returned on both calls."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * In contrast, {@code ListElementPointer}\u0027s behaviour: when making alternating calls of"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code next()} and {@code previous()}, the next and previous elements are returned respectively."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListElementPointer {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e list;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs {@code ListElementPointer} which is backed by a defensive copy of {@code list}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * The cursor points to the last element in {@code list}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer(List\u003cString\u003e list) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e(list);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d this.list.size() - 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code element} to the end of the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(String element) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(element);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #next()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasNext() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        int nextIndex \u003d index + 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(nextIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #previous()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPrevious() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        int previousIndex \u003d index - 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(previousIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #current()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasCurrent() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isWithinBounds(int index) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return index \u003e\u003d 0 \u0026\u0026 index \u003c list.size();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the next element in the list and advances the cursor position."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if there is no more next element in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String next() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasNext()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(++index);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the previous element in the list and moves the cursor position backwards."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if there is no more previous element in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public String previous() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasPrevious()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(--index);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current element in the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if the list is empty."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public String current() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasCurrent()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof ListElementPointer)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer iterator \u003d (ListElementPointer) other;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.equals(iterator.list) \u0026\u0026 index \u003d\u003d iterator.index;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 1,
      "-": 110
    }
  },
  {
    "path": "src/main/java/seedu/travel/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    //private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    private RightParentPanel rightParentPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private PlaceListPanel placeListPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    //@FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    //private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    private StackPane rightParentPanelPlaceholder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private StackPane placeListPanelPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // browserPanel \u003d new BrowserPanel(logic.selectedPlaceProperty());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // browserPlaceholder.getChildren().add(browserPanel.getRoot());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        rightParentPanel \u003d new RightParentPanel(logic.getFilteredPlaceList(), logic.selectedPlaceProperty(),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "                logic::setSelectedPlace, logic.chartDisplayedProperty());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        rightParentPanelPlaceholder.getChildren().add(rightParentPanel.getRoot());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        placeListPanel \u003d new PlaceListPanel(logic.getFilteredPlaceList(), logic.selectedPlaceProperty(),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                logic::setSelectedPlace);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        placeListPanelPlaceholder.getChildren().add(placeListPanel.getRoot());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getTravelBuddyFilePath(), logic.getTravelBuddy());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand, logic.getHistory());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public PlaceListPanel getPlaceListPanel() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return placeListPanel;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * @see seedu.travel.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaungohsc": 6,
      "chung-ming": 15,
      "PremBagda": 7,
      "-": 181
    }
  },
  {
    "path": "src/main/java/seedu/travel/ui/PlaceCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Place;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PremBagda"
        },
        "content": " * An UI component that displays information of a {@code Place}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "public class PlaceCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private static final String FXML \u003d \"PlaceListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private static final String[] TAG_COLOR_STYLES \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        { \"teal\", \"red\", \"yellow\", \"blue\", \"orange\", \"brown\", \"green\", \"salmon\", \"black\", \"grey\" };"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public final Place place;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private Label countryCode;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private Label dateVisited;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private Label rating;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public PlaceCard(Place place, int displayedIndex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        this.place \u003d place;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        name.setText(place.getName().fullName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        countryCode.setText(place.getCountryCode().code);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        dateVisited.setText(place.getDateVisited().getDate());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        rating.setText(place.getRating().value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        address.setText(place.getAddress().value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        description.setText(place.getDescription().value);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        initTags(place);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Returns the color style for {@code tagName}\u0027s label."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private String getTagColorStyleFor(String tagName) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // Hash code of the tag name to generate a random color, so that the color remain consistent"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // between different runs of the program while still making it random enough between tags."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return TAG_COLOR_STYLES[Math.abs(tagName.hashCode()) % TAG_COLOR_STYLES.length];"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Creates the tag labels for {@code place}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private void initTags(Place place) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        place.getTags().forEach(tag -\u003e {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            Label tagLabel \u003d new Label(tag.tagName);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            tagLabel.getStyleClass().add(getTagColorStyleFor(tag.tagName));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            tags.getChildren().add(tagLabel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        });"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        if (!(other instanceof PlaceCard)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        PlaceCard card \u003d (PlaceCard) other;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                \u0026\u0026 place.equals(card.place);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 6,
      "PremBagda": 39,
      "nivenang": 2,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/travel/ui/PlaceListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "import javafx.scene.input.MouseEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Place;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PremBagda"
        },
        "content": " * Panel containing the list of places."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PremBagda"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "public class PlaceListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private static final String FXML \u003d \"PlaceListPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PlaceListPanel.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private ListView\u003cPlace\u003e placeListView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public PlaceListPanel(ObservableList\u003cPlace\u003e placeList, ObservableValue\u003cPlace\u003e selectedPlace,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                          Consumer\u003cPlace\u003e onSelectedPlaceChange) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        placeListView.setItems(placeList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        placeListView.setCellFactory(listView -\u003e new PlaceListViewCell());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        placeListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            logger.fine(\"Selection in place list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            onSelectedPlaceChange.accept(newValue);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        });"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        selectedPlace.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            logger.fine(\"Selected place changed to: \" + newValue);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected place,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            if (Objects.equals(placeListView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                placeListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                int index \u003d placeListView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                placeListView.scrollTo(index);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                placeListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        });"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        // disables selection in list view"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        placeListView.addEventFilter(MouseEvent.ANY, new EventHandler\u003cMouseEvent\u003e() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            public void handle(MouseEvent mouseEvent) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "                mouseEvent.consume();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        });"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Place} using a {@code PlaceCard}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    class PlaceListViewCell extends ListCell\u003cPlace\u003e {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        protected void updateItem(Place place, boolean empty) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            super.updateItem(place, empty);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            if (empty || place \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                setGraphic(new PlaceCard(place, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaungohsc": 10,
      "chung-ming": 3,
      "PremBagda": 68
    }
  },
  {
    "path": "src/main/java/seedu/travel/ui/RatingChartUi.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import com.google.gson.stream.JsonReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import javafx.scene.chart.BarChart;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import javafx.scene.chart.CategoryAxis;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.CountryCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " * Generates the UI portion of the chart."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "public class RatingChartUi extends Application {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    // final static String austria \u003d \"Austria\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    // final static String brazil \u003d \"Brazil\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    // final static String france \u003d \"France\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    // final static String italy \u003d \"Italy\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    // final static String usa \u003d \"USA\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        stage.setTitle(\"Number of Places Visited for Each Rating Category\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        final CategoryAxis xAxis \u003d new CategoryAxis();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        final NumberAxis yAxis \u003d new NumberAxis();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        final BarChart\u003cString, Number\u003e barChart \u003d new BarChart\u003c\u003e(xAxis, yAxis);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        barChart.setTitle(\"Number of Places Visited for Each Rating Category\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        xAxis.setLabel(\"Rating\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        yAxis.setLabel(\"Number of Places\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Map\u003cCountryCode, Integer\u003e responses \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            FileReader frCountry \u003d new FileReader(\"data/ratingChart.json\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            JsonReader jsonReader \u003d new JsonReader(frCountry);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            Gson gson \u003d new Gson();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            responses \u003d gson.fromJson(jsonReader, HashMap.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            frCountry.close();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            jsonReader.close();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            logger.warning(e.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        XYChart.Series seriesRating \u003d new XYChart.Series();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        seriesRating.setName(\"Rating\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Object[] ratings \u003d responses.keySet().toArray();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        for (int i \u003d 0; i \u003c responses.size(); i++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            String rating \u003d (String) ratings[i];"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            seriesRating.getData().add(new XYChart.Data(rating, responses.get(rating)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            logger.info(rating + \", \" + responses.get(rating) + \"\\n\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Scene scene \u003d new Scene(barChart);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        barChart.getData().add(seriesRating);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 72,
      "PremBagda": 5
    }
  },
  {
    "path": "src/main/java/seedu/travel/ui/ResultDisplay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/travel/ui/RightParentPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "package seedu.travel.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "import seedu.travel.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "import seedu.travel.model.place.Place;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": " * Panel containing the list of places."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "public class RightParentPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    private static final String FXML \u003d \"RightParentPanel.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(RightParentPanel.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    private ListView\u003cPlace\u003e placeListView; // not in use"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    private VBox parentPanelPlaceholder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    private DisplayListPanel displayListPanel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    public RightParentPanel(ObservableList\u003cPlace\u003e placeList, ObservableValue\u003cPlace\u003e selectedPlace,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "                            Consumer\u003cPlace\u003e onSelectedPlaceChange, ReadOnlyProperty\u003cBoolean\u003e chartDisplayed) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        displayListPanel \u003d new DisplayListPanel(placeList, onSelectedPlaceChange);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        parentPanelPlaceholder.getChildren().setAll(displayListPanel.getRoot());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        chartDisplayed.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            // display the chart"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            logger.info(\"old Value\" + oldValue + \"New value \" + newValue);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            if (newValue) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "                // pass through"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "                logger.info(\"SimpleBooleanValue Changed \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "                displayListPanel \u003d new DisplayListPanel(placeList, onSelectedPlaceChange);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "                parentPanelPlaceholder.getChildren().removeAll();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "                parentPanelPlaceholder.getChildren().setAll(displayListPanel.getRoot());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "                if (selectedPlace.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "                    ExpandedPlacePanel empty \u003d new ExpandedPlacePanel();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "                    parentPanelPlaceholder.getChildren().removeAll();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "                    parentPanelPlaceholder.getChildren().setAll(empty.getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "                ExpandedPlacePanel updated \u003d new ExpandedPlacePanel(selectedPlace.getValue());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "                parentPanelPlaceholder.getChildren().removeAll();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "                parentPanelPlaceholder.getChildren().setAll(updated.getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        });"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        selectedPlace.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            if (selectedPlace.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "                ExpandedPlacePanel empty \u003d new ExpandedPlacePanel();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "                parentPanelPlaceholder.getChildren().removeAll();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "                parentPanelPlaceholder.getChildren().setAll(empty.getRoot());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "                ExpandedPlacePanel updated \u003d new ExpandedPlacePanel(selectedPlace.getValue());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "                parentPanelPlaceholder.getChildren().removeAll();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "                parentPanelPlaceholder.getChildren().setAll(updated.getRoot());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        );"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Place} using a {@code PlaceCard}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    class PlaceListViewCell extends ListCell\u003cPlace\u003e {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        protected void updateItem(Place place, boolean empty) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            super.updateItem(place, empty);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            if (empty || place \u003d\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "                setGraphic(new PlaceCard(place, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaungohsc": 95
    }
  },
  {
    "path": "src/main/java/seedu/travel/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.ReadOnlyTravelBuddy;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: change clock to an instance variable."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * We leave it as a static variable because manual dependency injection"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label syncStatus;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public StatusBarFooter(Path saveLocation, ReadOnlyTravelBuddy travelBuddy) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        travelBuddy.addListener(observable -\u003e updateSyncStatus());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatus.setText(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates \"last updated\" status to the current time."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private void updateSyncStatus() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatus.setText(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 4,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/travel/ui/Ui.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/travel/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/TravelBuddy-icon.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private static final String FILE_CSS \u003d \"view/LightTheme.css\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(FILE_CSS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaungohsc": 1,
      "chung-ming": 8,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/travel/ui/UiPart.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/java/seedu/travel/ui/YearChartUi.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import com.google.gson.stream.JsonReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import javafx.scene.chart.BarChart;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import javafx.scene.chart.CategoryAxis;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.CountryCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " * Generates the UI portion of the chart."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "public class YearChartUi extends Application {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    // final static String austria \u003d \"Austria\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    // final static String brazil \u003d \"Brazil\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    // final static String france \u003d \"France\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    // final static String italy \u003d \"Italy\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    // final static String usa \u003d \"USA\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        stage.setTitle(\"Number of Places Visited for Each Year\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        final CategoryAxis xAxis \u003d new CategoryAxis();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        final NumberAxis yAxis \u003d new NumberAxis();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        final BarChart\u003cString, Number\u003e barChart \u003d new BarChart\u003c\u003e(xAxis, yAxis);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        barChart.setTitle(\"Number of Places Visited for Each Year\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        xAxis.setLabel(\"Year\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        yAxis.setLabel(\"Number of Places\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Map\u003cCountryCode, Integer\u003e responses \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            FileReader frCountry \u003d new FileReader(\"data/yearChart.json\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            JsonReader jsonReader \u003d new JsonReader(frCountry);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            Gson gson \u003d new Gson();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            responses \u003d gson.fromJson(jsonReader, HashMap.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            frCountry.close();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            jsonReader.close();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            logger.warning(e.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        XYChart.Series seriesYear \u003d new XYChart.Series();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        seriesYear.setName(\"Rating\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Object[] years \u003d responses.keySet().toArray();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        for (int i \u003d 0; i \u003c responses.size(); i++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            String year \u003d (String) years[i];"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            seriesYear.getData().add(new XYChart.Data(year, responses.get(year)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            logger.info(year + \", \" + responses.get(year) + \"\\n\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Scene scene \u003d new Scene(barChart);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        barChart.getData().add(seriesYear);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 72,
      "PremBagda": 5
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ".label-field-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\" !important;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    -fx-text-fill: white !important;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    -fx-opacity: 1 !important;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    -fx-text-fill: #efefef;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    -fx-opacity: 0.8;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "#filterField, #placeListPanel, #placeWebpage {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "#tags .teal {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "}"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "#tags .red {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    -fx-background-color: red;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "}"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "#tags .yellow {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    -fx-background-color: yellow;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "}"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "#tags .blue {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    -fx-background-color: blue;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "}"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "#tags .orange {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    -fx-background-color: orange;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "}"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "#tags .brown {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    -fx-background-color: brown;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "}"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "#tags .green {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    -fx-background-color: green;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "}"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "#tags .salmon {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    -fx-background-color: salmon;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "}"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "#tags .black {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "}"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "#tags .grey {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    -fx-background-color: grey;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaungohsc": 9,
      "PremBagda": 51,
      "-": 347
    }
  },
  {
    "path": "src/main/resources/view/DisplayListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003c?import javafx.scene.chart.BarChart?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003c?import javafx.scene.chart.CategoryAxis?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003c?import javafx.scene.chart.LineChart?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003c?import javafx.scene.chart.NumberAxis?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003c?import javafx.scene.chart.PieChart?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003cVBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8.0.172-ea\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "      \u003cBarChart fx:id\u003d\"countryBarChart\" id\u003d\"chartBar\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        \u003cxAxis\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "          \u003cCategoryAxis side\u003d\"BOTTOM\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        \u003c/xAxis\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        \u003cyAxis\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "          \u003cNumberAxis side\u003d\"LEFT\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        \u003c/yAxis\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "      \u003c/BarChart\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "      \u003cPieChart fx:id\u003d\"ratingPieChart\" id\u003d\"chartPie\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "      \u003cLineChart fx:id\u003d\"yearLineChart\" id\u003d\"chartLine\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        \u003cxAxis\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "          \u003cCategoryAxis side\u003d\"BOTTOM\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        \u003c/xAxis\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        \u003cyAxis\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "          \u003cNumberAxis side\u003d\"LEFT\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        \u003c/yAxis\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "      \u003c/LineChart\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 30
    }
  },
  {
    "path": "src/main/resources/view/DisplayListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    \u003cListView fx:id\u003d\"displayListView\" prefHeight\u003d\"450.0\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 8
    }
  },
  {
    "path": "src/main/resources/view/ExpandedPlacePanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "\u003c?import java.lang.String?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" minWidth\u003d\"360.0\" prefHeight\u003d\"350.0\" prefWidth\u003d\"550.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"500.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" minWidth\u003d\"162\" prefWidth\u003d\"162.0\" GridPane.rowIndex\u003d\"4\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            \u003cLabel text\u003d\"Description\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "                  \u003cInsets bottom\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "               \u003cstyleClass\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "                  \u003cString fx:value\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "                  \u003cString fx:value\u003d\"label-field-header\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "               \u003c/styleClass\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "  \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "  \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\" textFill\u003d\"WHITE\" GridPane.rowIndex\u003d\"3\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "      \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "      \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "  \u003c/Label\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "      \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" prefHeight\u003d\"105.0\" prefWidth\u003d\"242.0\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"4\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "                  \u003cInsets bottom\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "      \u003cLabel fx:id\u003d\"countryCode\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$countryCode\"\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "          \u003cInsets bottom\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "   \u003cLabel text\u003d\"Date Visited\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "           \u003cInsets bottom\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003cstyleClass\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "           \u003cString fx:value\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "           \u003cString fx:value\u003d\"label-field-header\" /\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003c/styleClass\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "     \u003cLabel fx:id\u003d\"dateVisited\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$dateVisited\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "       \u003cpadding\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003cInsets bottom\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "       \u003c/padding\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "     \u003c/Label\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "   \u003cLabel text\u003d\"Rating\" GridPane.rowIndex\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            \u003cInsets bottom\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003cstyleClass\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            \u003cString fx:value\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            \u003cString fx:value\u003d\"label-field-header\" /\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003c/styleClass\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "      \u003cLabel fx:id\u003d\"rating\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$rating\" GridPane.rowIndex\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            \u003cInsets bottom\u003d\"1.0\" left\u003d\"70.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "   \u003cLabel text\u003d\"Address\" GridPane.rowIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            \u003cInsets bottom\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003cstyleClass\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            \u003cString fx:value\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            \u003cString fx:value\u003d\"label-field-header\" /\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003c/styleClass\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            \u003cInsets bottom\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "   \u003cFlowPane fx:id\u003d\"tags\" maxHeight\u003d\"-Infinity\" prefHeight\u003d\"19.0\" prefWidth\u003d\"211.0\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            \u003cInsets bottom\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "      \u003c/FlowPane\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003cRowConstraints maxHeight\u003d\"99.99998779296875\" minHeight\u003d\"27.999993896484376\" prefHeight\u003d\"34.00001831054688\" /\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003cRowConstraints maxHeight\u003d\"99.99998779296875\" minHeight\u003d\"27.999993896484376\" prefHeight\u003d\"34.00001831054688\" /\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003cRowConstraints maxHeight\u003d\"99.99998779296875\" minHeight\u003d\"27.999993896484376\" prefHeight\u003d\"34.00001831054688\" /\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003cRowConstraints maxHeight\u003d\"99.99998779296875\" minHeight\u003d\"27.999993896484376\" prefHeight\u003d\"34.00001831054688\" /\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003cRowConstraints maxHeight\u003d\"350.0\" minHeight\u003d\"10.0\" prefHeight\u003d\"350.0\" /\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "shaungohsc": 129
    }
  },
  {
    "path": "src/main/resources/view/Extensions.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-text-fill: #f55e61 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-background: #ffffff;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "iframe {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    position: fixed;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    border: none;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    top: 0; right: 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    bottom: 0; left: 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    width: 100%;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    height: 100%;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 11,
      "-": 18
    }
  },
  {
    "path": "src/main/resources/view/LightTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    background-color: #ffffff; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-focus-color: #273c42;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".label-field-header {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\" !important;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-opacity: 1 !important;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            transparent"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            transparent"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            transparent;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-background-color: derive(#ffffff, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-border-color: transparent #f55e61 transparent transparent;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-background-color: derive(#ffffff, 20%);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-background-color: derive(#ffffff, 20%);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-background-color: #fafafa;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-background-color: #f2f2f2;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-background-color: #f55e61;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-background-color: derive(#ffffff, 20%);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-background-color: derive(#ffffff, 20%);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-border-color: derive(#ffffff, 10%);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-background-color: #f55e61;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-font-family: \"Segoe UI Semilight\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-text-fill: #1e2d31;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-font-family: \"Segoe UI Semilight\";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-text-fill: #f55e61;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".chartBar {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-padding: 20 20 20 20;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".chartPie {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-padding: 20 20 20 20;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".chartLine {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-padding: 20 20 20 20;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".data0.chart-bar {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-bar-fill: #f9d900;;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".data1.chart-bar {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-bar-fill: #a9e200;;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".data2.chart-bar {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-bar-fill: #22bad9;;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".data3.chart-bar {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-bar-fill: #0181e2;;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".data4.chart-bar {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-bar-fill: #2f357f;;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".data5.chart-bar {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-bar-fill: #860061;;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".data6.chart-bar {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-bar-fill: #c62b00;;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".data7.chart-bar {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-bar-fill: #ff5700;;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".default-color0.chart-pie {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-pie-color: #ff5700;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".default-color1.chart-pie {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-pie-color: #c62b00;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".default-color2.chart-pie {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-pie-color: #860061;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".default-color3.chart-pie {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-pie-color: #2f357f;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".default-color4.chart-pie {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-pie-color: #0181e2;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".default-color5.chart-pie {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-pie-color: #22bad9;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".default-color6.chart-pie {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-pie-color: #a9e200;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".default-color7.chart-pie {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-pie-color: #f9d900;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "/*"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-background-color: #f55e61;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-border-style: solid;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-background-color: #f55e61;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".dialog-pane *.header-panel {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".dialog-pane *.header-panel *.label {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-background-color: #f55e61;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-background-insets: 2;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-border-color: #ffffff #ffffff #f55e61 #ffffff ;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-font-family: \"Segoe UI Semilight\";"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-text-fill: #f55e61;"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "#filterField, #placeListPanel, #placeWebpage {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "#tags .teal {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "#tags .red {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-background-color: red;"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "#tags .yellow {"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-background-color: yellow;"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "#tags .blue {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-background-color: blue;"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "#tags .orange {"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-background-color: orange;"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "#tags .brown {"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-background-color: brown;"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "#tags .green {"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-background-color: green;"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "#tags .salmon {"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-background-color: salmon;"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "#tags .black {"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "#tags .grey {"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    -fx-background-color: grey;"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 484
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         title\u003d\"TravelBuddy\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    \u003cImage url\u003d\"@/images/TravelBuddy-icon.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        \u003cURL value\u003d\"@LightTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "          \u003cVBox fx:id\u003d\"placeList\" minWidth\u003d\"360\" prefWidth\u003d\"360\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "              \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            \u003cStackPane fx:id\u003d\"placeListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "          \u003cVBox fx:id\u003d\"rightParentPanel\" prefWidth\u003d\"360\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "              \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            \u003cStackPane fx:id\u003d\"rightParentPanelPlaceholder\"/\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "          \u003c!--\u003cStackPane fx:id\u003d\"browserPlaceholder\" prefWidth\u003d\"340\" \u003e--\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            \u003c!--\u003cpadding\u003e--\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "              \u003c!--\u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e--\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            \u003c!--\u003c/padding\u003e--\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "          \u003c!--\u003c/StackPane\u003e--\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "shaungohsc": 4,
      "chung-ming": 14,
      "PremBagda": 1,
      "-": 57
    }
  },
  {
    "path": "src/main/resources/view/PlaceListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "\u003c?import java.lang.String?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "  \u003cGridPane prefHeight\u003d\"157.0\" prefWidth\u003d\"313.0\" HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"145.5999755859375\" minWidth\u003d\"10.0\" prefWidth\u003d\"86.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "         \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"252.0\" minWidth\u003d\"10.0\" prefWidth\u003d\"250.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "  \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" left\u003d\"15.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "  \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\" textFill\u003d\"WHITE\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "      \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "      \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "  \u003c/Label\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "      \u003cLabel text\u003d\"Tags\" GridPane.rowIndex\u003d\"6\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            \u003cInsets bottom\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "         \u003cstyleClass\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            \u003cString fx:value\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            \u003cString fx:value\u003d\"label-field-header\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003c/styleClass\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "   \u003cFlowPane fx:id\u003d\"tags\" maxHeight\u003d\"-Infinity\" prefHeight\u003d\"19.0\" prefWidth\u003d\"211.0\" prefWrapLength\u003d\"252.0\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"6\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            \u003cInsets bottom\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "      \u003c/FlowPane\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "      \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            \u003cInsets bottom\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "   \u003cLabel text\u003d\"Description\" GridPane.rowIndex\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            \u003cInsets bottom\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003cstyleClass\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            \u003cString fx:value\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            \u003cString fx:value\u003d\"label-field-header\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003c/styleClass\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "   \u003cLabel text\u003d\"Country\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            \u003cInsets bottom\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003cstyleClass\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            \u003cString fx:value\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            \u003cString fx:value\u003d\"label-field-header\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003c/styleClass\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "      \u003cLabel fx:id\u003d\"countryCode\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$countryCode\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "          \u003cInsets bottom\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "   \u003cLabel text\u003d\"Address\" GridPane.rowIndex\u003d\"4\"\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            \u003cInsets bottom\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003cstyleClass\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            \u003cString fx:value\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            \u003cString fx:value\u003d\"label-field-header\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003c/styleClass\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "   \u003cLabel text\u003d\"Rating\" GridPane.rowIndex\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            \u003cInsets bottom\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003cstyleClass\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            \u003cString fx:value\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            \u003cString fx:value\u003d\"label-field-header\" /\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003c/styleClass\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "      \u003cLabel fx:id\u003d\"rating\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$rating\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            \u003cInsets bottom\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "     \u003cLabel fx:id\u003d\"dateVisited\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$dateVisited\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "       \u003cpadding\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003cInsets bottom\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "       \u003c/padding\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "     \u003c/Label\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"4\"\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            \u003cInsets bottom\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "   \u003cLabel text\u003d\"Date\" GridPane.rowIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "           \u003cInsets bottom\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003cstyleClass\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "           \u003cString fx:value\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "           \u003cString fx:value\u003d\"label-field-header\" /\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003c/styleClass\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003cRowConstraints maxHeight\u003d\"33.99998779296875\" minHeight\u003d\"25.200000000000003\" prefHeight\u003d\"33.99998779296875\" /\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003cRowConstraints maxHeight\u003d\"29.200000000000003\" minHeight\u003d\"20.400012207031253\" prefHeight\u003d\"20.400012207031253\" /\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "shaungohsc": 104,
      "PremBagda": 13,
      "-": 17
    }
  },
  {
    "path": "src/main/resources/view/PlaceListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "  \u003cListView fx:id\u003d\"placeListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "PremBagda": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/RightParentPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "      \u003cVBox fx:id\u003d\"parentPanelPlaceholder\" prefWidth\u003d\"360.0\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "shaungohsc": 9
    }
  },
  {
    "path": "src/main/resources/view/default.html",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!DOCTYPE html\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chtml\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chead\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    \u003clink rel\u003d\"stylesheet\" href\u003d\"LightTheme.css.css\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    \u003clink rel\u003d\"stylesheet\" href\u003d\"Extensions.css\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/head\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbody class\u003d\"background\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003c!--\u003ciframe height\u003d\"100%\" width\u003d\"100%\"--\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        \u003c!--src\u003d\"https://www.google.com/maps/embed/v1/search?q\u003dNUS%20School%20of%20Computing%2C%20Singapore\u0026key\u003dAIzaSyBHys5ywgiaHrGJHRd_aksq3DH7BpiogXc\"--\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        \u003c!--allowfullscreen\u003e--\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003c!--\u003c/iframe\u003e--\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/body\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/html\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003c!--\u003c!DOCTYPE html\u003e--\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003c!--\u003chtml\u003e--\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003c!--\u003chead\u003e--\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    \u003c!--\u003cstyle\u003e--\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        \u003c!--/* Always set the map height explicitly to define the size of the div--\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "         \u003c!--* element that contains the map. */--\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        \u003c!--#map {--\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            \u003c!--height: 100%;--\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        \u003c!--}--\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        \u003c!--/* Optional: Makes the sample page fill the window. */--\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        \u003c!--html, body {--\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            \u003c!--height: 100%;--\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            \u003c!--margin: 0;--\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            \u003c!--padding: 0;--\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        \u003c!--}--\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    \u003c!--\u003c/style\u003e--\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003c!--\u003c/head\u003e--\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003c!--\u003cbody\u003e--\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003c!--\u003cdiv id\u003d\"map\"\u003e\u003c/div\u003e--\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003c!--\u003cscript\u003e--\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    \u003c!--var map;--\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    \u003c!--function initMap() {--\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        \u003c!--map \u003d new google.maps.Map(document.getElementById(\u0027map\u0027), {--\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            \u003c!--zoom: 2,--\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            \u003c!--center: new google.maps.LatLng(2.8,-187.3),--\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            \u003c!--mapTypeId: \u0027terrain\u0027--\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        \u003c!--});--\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        \u003c!--// Create a \u003cscript\u003e tag and set the USGS URL as the source.--\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        \u003c!--var script \u003d document.createElement(\u0027script\u0027);--\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        \u003c!--// This example uses a local copy of the GeoJSON stored at--\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        \u003c!--// http://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/2.5_week.geojsonp--\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        \u003c!--script.src \u003d \u0027https://developers.google.com/maps/documentation/javascript/examples/json/earthquake_GeoJSONP.js\u0027;--\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        \u003c!--document.getElementsByTagName(\u0027head\u0027)[0].appendChild(script);--\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    \u003c!--}--\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    \u003c!--// Loop through the results array and place a marker for each--\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    \u003c!--// set of coordinates.--\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    \u003c!--window.eqfeed_callback \u003d function(results) {--\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        \u003c!--for (var i \u003d 0; i \u003c results.features.length; i++) {--\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            \u003c!--var coords \u003d results.features[i].geometry.coordinates;--\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            \u003c!--var latLng \u003d new google.maps.LatLng(coords[1],coords[0]);--\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            \u003c!--var marker \u003d new google.maps.Marker({--\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                \u003c!--position: latLng,--\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                \u003c!--map: map--\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            \u003c!--});--\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        \u003c!--}--\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    \u003c!--}--\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003c!--\u003c/script\u003e--\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003c!--\u003cscript async defer--\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        \u003c!--src\u003d\"https://maps.googleapis.com/maps/api/js?key\u003dAIzaSyBHys5ywgiaHrGJHRd_aksq3DH7BpiogXc\u0026callback\u003dinitMap\"\u003e--\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003c!--\u003c/script\u003e--\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003c!--\u003c/body\u003e--\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003c!--\u003c/html\u003e--\u003e"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 61,
      "-": 8
    }
  },
  {
    "path": "src/test/data/JsonSerializableTravelBuddyTest/duplicatePlaceTravelBuddy.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "  \"places\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    \"name\": \"National University of Singapore\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    \"countryCode\" : \"SGP\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    \"dateVisited\" : \"10/10/2016\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    \"rating\": \"4\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    \"description\": \"The National University of Singapore is an autonomous research university in Singapore.\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    \"address\": \"21 Lower Kent Ridge Rd, Singapore 119077\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    \"tagged\": [ \"school\" ]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    \"name\": \"National University of Singapore\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    \"countryCode\" : \"SGP\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    \"dateVisited\" : \"10/10/2016\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    \"rating\": \"4\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    \"description\": \"The National University of Singapore is an autonomous research university in Singapore.\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PremBagda": 5,
      "nivenang": 8,
      "-": 5
    }
  },
  {
    "path": "src/test/data/JsonSerializableTravelBuddyTest/invalidPlaceTravelBuddy.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "  \"places\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    \"name\": \"National Museum of Singapore\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    \"countryCode\" : \"SGP\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    \"dateVisited\" : \"10/10/2016\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    \"rating\": \"2\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    \"description\": \"#Invalid description\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 1,
      "PremBagda": 3,
      "nivenang": 2,
      "-": 4
    }
  },
  {
    "path": "src/test/data/JsonSerializableTravelBuddyTest/typicalPlacesTravelBuddy.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "  \"_comment\": \"AddressBook save file which contains the same Place values as in TypicalPlaces#getTypicalAddressBook()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "  \"places\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    \"name\" : \"VivoCity\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    \"countryCode\" : \"SGP\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    \"dateVisited\" : \"10/10/2016\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    \"rating\": \"1\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    \"description\" : \"Expansive, modern shopping center hosting a wide range of retailers, restaurants \u0026 theaters.\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    \"address\" : \"1 Harbourfront Walk, Singapore 098585\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    \"tagged\" : [ \"shoppingMall\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    \"name\" : \"Changi Airport Singapore\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    \"countryCode\" : \"SGP\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    \"dateVisited\" : \"01/04/2017\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    \"rating\" : \"5\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    \"description\" : \"Passenger \u0026 cargo hub with 4 modern terminals plus buses \u0026 trains to the city center.\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    \"address\" : \"Airport Boulevard\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    \"tagged\" : [ \"airport\", \"shoppingMall\" ]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    \"name\" : \"Universal Studios Singapore\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    \"countryCode\" : \"SGP\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    \"dateVisited\" : \"08/04/2016\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    \"rating\" : \"4\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    \"description\" : \"Movie amusement centre with sets \u0026 rides on themes from Hollywood to sci-fi, plus live entertainment.\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    \"address\" : \"8 Sentosa Gateway, 0982693\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    \"tagged\" : [ \"amusementPark\", \"recreation\" ]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    \"name\" : \"Yanaka Cemetery Park\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    \"countryCode\" : \"JPN\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    \"dateVisited\" : \"02/05/2016\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    \"rating\": \"3\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    \"description\" : \"Hilly, cherry tree–planted cemetery with graves of renowned artists \u0026 actors \u0026 a 5-story pagoda.\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    \"address\" : \"7-chōme-5-24 Yanaka, Taito City, Tōkyō-to 110-0001, Japan\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    \"tagged\" : [ \"cemetery\", \"placeOfInterest\" ]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    \"name\" : \"National University of Singapore\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    \"countryCode\" : \"SGP\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    \"dateVisited\" : \"05/05/2018\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    \"rating\" : \"4\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    \"description\" : \"The National University of Singapore is an autonomous research university in Singapore.\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    \"address\" : \"21 Lower Kent Ridge Rd, Singapore 119077\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    \"tagged\" : [ \"school\" ]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    \"name\" : \"Singapore Zoo\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    \"countryCode\" : \"SGP\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    \"dateVisited\" : \"08/05/2018\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    \"rating\" : \"3\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    \"description\" : \"Rainforest zoo with tram rides, trails \u0026 viewing platforms to see wildlife habitats \u0026 exhibits.\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    \"address\" : \"80 Mandai Lake Rd, Singapore 729826\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    \"tagged\" : [ \"zoo\", \"animals\" ]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nivenang"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    \"name\" : \"Buddha Tooth Relic Temple\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    \"countryCode\" : \"SGP\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    \"dateVisited\" : \"02/10/2017\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    \"rating\" : \"4\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    \"description\" : \"Tang dynasty–style temple housing religious relics, with ornate rooms \u0026 a tranquil rooftop garden.\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    \"address\" : \"288 South Bridge Rd, Singapore 058840\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    \"tagged\" : [ \"temple\", \"heritageSite\" ]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PremBagda": 15,
      "nivenang": 37,
      "-": 8
    }
  },
  {
    "path": "src/test/data/JsonTravelBuddyStorageTest/invalidAndValidPlaceTravelBuddy.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "  \"places\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    \"name\": \"Valid Place\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    \"countryCode\" : \"SGP\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    \"dateVisited\" : \"10/10/2015\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    \"rating\": \"4\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    \"description\": \"No description\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    \"name\": \"Place With Invalid Rating Field\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    \"countryCode\" : \"SGP\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    \"dateVisited\" : \"10/10/2015\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    \"rating\": \"9\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    \"description\": \"No description\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 2,
      "PremBagda": 6,
      "nivenang": 3,
      "-": 6
    }
  },
  {
    "path": "src/test/data/JsonTravelBuddyStorageTest/invalidPlaceTravelBuddy.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "  \"places\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    \"name\": \"Place with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    \"countryCode\" : \"SGP\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    \"dateVisited\" : \"10/10/2015\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    \"rating\": \"3\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    \"description\": \"No description\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 1,
      "PremBagda": 4,
      "nivenang": 1,
      "-": 4
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "  \"addressBookFilePath\" : \"travelBuddy.json\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 1,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "  \"addressBookFilePath\" : \"travelBuddy.json\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/AlertDialogHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.DialogPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.ui.UiManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A handle for the {@code AlertDialog} of the UI."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class AlertDialogHandle extends StageHandle {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final DialogPane dialogPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public AlertDialogHandle(Stage stage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogPane \u003d getChildNode(\"#\" + UiManager.ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the header in the {@code AlertDialog}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getHeaderText() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return dialogPane.getHeaderText();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the content in the {@code AlertDialog}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getContentText() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return dialogPane.getContentText();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private final PlaceListPanelHandle placeListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    //private final BrowserPanelHandle browserPanel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        placeListPanel \u003d new PlaceListPanelHandle(getChildNode(PlaceListPanelHandle.PLACE_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        //browserPanel \u003d new BrowserPanelHandle(getChildNode(BrowserPanelHandle.BROWSER_ID));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public PlaceListPanelHandle getPlaceListPanel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return placeListPanel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    //public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    //return browserPanel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 6,
      "PremBagda": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PlaceCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Place;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PremBagda"
        },
        "content": " * Provides a handle to a place card in the place list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "public class PlaceCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private static final String COUNTRY_CODE_FIELD_ID \u003d \"#countryCode\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private static final String RATING_FIELD_ID \u003d \"#rating\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private static final String DESCRIPTION_FIELD_ID \u003d \"#description\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private final Label countryCodeLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label addressLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private final Label ratingLabel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private final Label descriptionLabel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public PlaceCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        countryCodeLabel \u003d getChildNode(COUNTRY_CODE_FIELD_ID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        ratingLabel \u003d getChildNode(RATING_FIELD_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        descriptionLabel \u003d getChildNode(DESCRIPTION_FIELD_ID);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public String getCountryCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return countryCodeLabel.getText();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressLabel.getText();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public String getRating() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        return ratingLabel.getText();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        return descriptionLabel.getText();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public List\u003cString\u003e getTagStyleClasses(String tag) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            .filter(label -\u003e label.getText().equals(tag))"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            .map(Label::getStyleClass)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            .findFirst()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            .orElseThrow(() -\u003e new IllegalArgumentException(\"No such tag.\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Returns true if this handle contains {@code place}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public boolean equals(Place place) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return getName().equals(place.getName().fullName)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                \u0026\u0026 getAddress().equals(place.getAddress().value)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                \u0026\u0026 getCountryCode().equals(place.getCountryCode().code)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                \u0026\u0026 getRating().equals(place.getRating().value)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                \u0026\u0026 getDescription().equals(place.getDescription().value)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(place.getTags().stream()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                        .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                        .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 8,
      "PremBagda": 25,
      "nivenang": 6,
      "-": 65
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PlaceListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Place;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PremBagda"
        },
        "content": " * Provides a handle for {@code PlaceListPanel} containing the list of {@code PlaceCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "public class PlaceListPanelHandle extends NodeHandle\u003cListView\u003cPlace\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static final String PLACE_LIST_VIEW_ID \u003d \"#placeListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private Optional\u003cPlace\u003e lastRememberedSelectedPlaceCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public PlaceListPanelHandle(ListView\u003cPlace\u003e placeListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        super(placeListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Returns a handle to the selected {@code PlaceCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public PlaceCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        List\u003cPlace\u003e selectedPlaceList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        if (selectedPlaceList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            throw new AssertionError(\"Place list size expected 1.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                .map(PlaceCardHandle::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedPlaceList.get(0)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        List\u003cPlace\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Navigates the listview to display {@code place}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void navigateToCard(Place place) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        if (!getRootNode().getItems().contains(place)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            throw new IllegalArgumentException(\"Place does not exist.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            getRootNode().scrollTo(place);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Selects the {@code PlaceCard} at {@code index} in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Returns the place card handle of a place associated with the {@code index} in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public PlaceCardHandle getPlaceCardHandle(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                .map(PlaceCardHandle::new)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                .filter(handle -\u003e handle.equals(getPlace(index)))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private Place getPlace(int index) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Remembers the selected {@code PlaceCard} in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void rememberSelectedPlaceCard() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        List\u003cPlace\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            lastRememberedSelectedPlaceCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            lastRememberedSelectedPlaceCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Returns true if the selected {@code PlaceCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * {@code rememberSelectedPlaceCard()} call."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public boolean isSelectedPlaceCardChanged() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        List\u003cPlace\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            return lastRememberedSelectedPlaceCard.isPresent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            return !lastRememberedSelectedPlaceCard.isPresent()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                    || !lastRememberedSelectedPlaceCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 2,
      "PremBagda": 36,
      "-": 121
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/StageHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides access to a stage in a JavaFx application for GUI testing purposes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class StageHandle {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Stage stage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public StageHandle(Stage stage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.stage \u003d requireNonNull(stage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes {@code stage}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(stage::close);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(stage.isShowing());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on this {@code stage}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String windowTitle \u003d stage.getTitle();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Focusing on\" + windowTitle);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(stage::requestFocus);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Finishing focus on\" + windowTitle);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if currently focusing on this stage."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isFocused() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return stage.isFocused();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code stage}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector for the node to retrieve."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(String query) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(stage.getScene().getRoot()).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 1,
      "-": 62
    }
  },
  {
    "path": "src/test/java/seedu/travel/AppParametersTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/travel/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.ReadOnlyTravelBuddy;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.TravelBuddy;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.storage.JsonTravelBuddyStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.testutil.TestUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.json\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 1280.0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 720.0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    protected Supplier\u003cReadOnlyTravelBuddy\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyTravelBuddy\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            JsonTravelBuddyStorage jsonTravelBuddyStorage \u003d new JsonTravelBuddyStorage(saveFileLocation);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                jsonTravelBuddyStorage.saveTravelBuddy(initialDataSupplier.get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(DEFAULT_WIDTH, DEFAULT_HEIGHT, (int) x, (int) y));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        userPrefs.setTravelBuddyFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Returns a defensive copy of the travel book data stored inside the storage file."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public TravelBuddy readStorageTravelBuddy() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            return new TravelBuddy(storage.readTravelBuddy().get());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            throw new AssertionError(\"Data is not in the TravelBuddy format.\", dce);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        return storage.getTravelBuddyFilePath();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Model copy \u003d new ModelManager((model.getTravelBuddy()), new UserPrefs());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredPlaceList());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 27,
      "PremBagda": 1,
      "-": 83
    }
  },
  {
    "path": "src/test/java/seedu/travel/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 1,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/travel/commons/core/VersionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Version.fromString(\"This is not a version string\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                                              int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 1,
      "-": 138
    }
  },
  {
    "path": "src/test/java/seedu/travel/commons/core/index/IndexTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateOneBasedFailure(0);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateZeroBasedFailure(-1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code Index#fromZeroBased(int)} with {@code invalidZeroBasedIndex}, confirms that an"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateZeroBasedFailure(int invalidZeroBasedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidZeroBasedIndex, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code Index#fromOneBased(int)} with {@code invalidOneBasedIndex}, confirms that an"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateOneBasedFailure(int invalidOneBasedIndex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidOneBasedIndex, false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes either {@code Index#fromZeroBased(int)} (if it is zero based), or {@code Index#fromOneBased(int)}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * (if it is one based), and confirms that an {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateFailure(int invalidIndex, boolean isZeroBased) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            if (isZeroBased) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromZeroBased(invalidIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromOneBased(invalidIndex);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected IndexOutOfBoundsException was not thrown.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behaviour"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        final Index fifthPlaceIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertTrue(fifthPlaceIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertTrue(fifthPlaceIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertTrue(fifthPlaceIndex.equals(fifthPlaceIndex));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertFalse(fifthPlaceIndex.equals(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertFalse(fifthPlaceIndex.equals(5.0f));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertFalse(fifthPlaceIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 1,
      "PremBagda": 7,
      "-": 84
    }
  },
  {
    "path": "src/test/java/seedu/travel/commons/util/AppUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/TravelBuddy-icon.png\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.getImage(null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(errorMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false, errorMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaungohsc": 1,
      "chung-ming": 1,
      "-": 45
    }
  },
  {
    "path": "src/test/java/seedu/travel/commons/util/CollectionUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            requireAllNonNull(objects);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NullPointerException was not thrown.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behavior"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            requireAllNonNull(collection);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NullPointerException was not thrown.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behavior"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 2,
      "-": 115
    }
  },
  {
    "path": "src/test/java/seedu/travel/commons/util/ConfigUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.Config;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        read(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        read(\"NotJsonFormatConfig.json\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        save(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() throws IOException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        save(new Config(), null);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 3,
      "-": 126
    }
  },
  {
    "path": "src/test/java/seedu/travel/commons/util/FileUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 2,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/travel/commons/util/InvalidationListenerManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class InvalidationListenerManagerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final SimpleObjectProperty\u003cObject\u003e dummyObservable \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private int counter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener_sameListenerOnce_listenerAdded() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(observable -\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(dummyObservable, observable);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(dummyObservable);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, counter);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener_sameListenerTwice_listenerAddedTwice() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter++;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(dummyObservable);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(2, counter);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener_listenersBeingCalled_listenerNotCalled() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener1 \u003d observable -\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener2 \u003d observable -\u003e invalidationListenerManager.addListener(listener1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(dummyObservable);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener_singleListenerAdded_listenerRemoved() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter++;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(dummyObservable);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, counter);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener_sameListenerAddedTwice_firstListenerRemoved() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter++;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(dummyObservable);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, counter);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener_listenersBeingCalled_listenerStillCalled() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener1 \u003d observable -\u003e counter++;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener2 \u003d observable -\u003e invalidationListenerManager.removeListener(listener1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener2);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(dummyObservable);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, counter);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/travel/commons/util/JsonUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/travel/commons/util/StringUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.CoreMatchers.containsString;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.MatcherAssert.assertThat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isUnsignedPositiveInteger --------------------------------------"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isUnsignedPositiveInteger() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, \"typical sentence\", null, Optional.empty());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExceptionThrown(Class\u003c? extends Throwable\u003e exceptionClass, String sentence, String word,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cString\u003e errorMessage) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(exceptionClass);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        errorMessage.ifPresent(message -\u003e thrown.expectMessage(message));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        StringUtil.containsWordIgnoreCase(sentence, word);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"  \","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                Optional.of(\"Word parameter cannot be empty\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"aaa BBB\","
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                Optional.of(\"Word parameter should be a single word\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, null, \"abc\", Optional.empty());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    //---------------- Tests for containsTagIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Invalid equivalence partitions for tag: null, empty, multiple tags"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Invalid equivalence partitions for tagsList: null"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void containsTagIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertExceptionForTagsThrown(NullPointerException.class,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                Set.of(new Tag(\"school\"), new Tag(\"temple\")), null, Optional.empty());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private void assertExceptionForTagsThrown(Class\u003c? extends Throwable\u003e exceptionClass, Set\u003cTag\u003e tagsList, String tag,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                                              Optional\u003cString\u003e errorMessage) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        thrown.expect(exceptionClass);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        errorMessage.ifPresent(message -\u003e thrown.expectMessage(message));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        StringUtil.containsTagIgnoreCase(tagsList, tag);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void containsTagIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertExceptionForTagsThrown(IllegalArgumentException.class,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                Set.of(new Tag(\"school\"), new Tag(\"temple\")),"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                \"  \", Optional.of(\"Tag parameter cannot be empty\"));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void containsTagIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertExceptionForTagsThrown(IllegalArgumentException.class,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                Set.of(new Tag(\"school\"), new Tag(\"temple\")), \"aaa BBB\","
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                Optional.of(\"Tag parameter should be a single word\"));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void containsTagIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertExceptionForTagsThrown(NullPointerException.class, null, \"abc\", Optional.empty());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Valid equivalence partitions for tag:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *   - any tag"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Valid equivalence partitions for tagsList:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *   - one tag"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *   - multiple tags"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void containsTagIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // Empty tagsList"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(StringUtil.containsTagIgnoreCase(Set.of(), \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // Matches a partial tag only"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(StringUtil.containsTagIgnoreCase(Set.of(new Tag(\"school\"), new Tag(\"temple\"),"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                new Tag(\"zoo\")), \"temp\")); // tagsList tag bigger than query tag"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(StringUtil.containsTagIgnoreCase(Set.of(new Tag(\"school\"), new Tag(\"temple\"),"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                new Tag(\"zoo\")), \"temples\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(StringUtil.containsTagIgnoreCase(Set.of(new Tag(\"school\"), new Tag(\"temple\"),"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                new Tag(\"zoo\")), \"School\")); // First word (boundary case)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(StringUtil.containsTagIgnoreCase(Set.of(new Tag(\"school\"), new Tag(\"temple\"),"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                new Tag(\"zoo\")), \"ZoO\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(StringUtil.containsTagIgnoreCase(Set.of(new Tag(\"school\")),"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                \"sChoOl\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(StringUtil.containsTagIgnoreCase(Set.of(new Tag(\"school\"), new Tag(\"temple\"),"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                new Tag(\"zoo\")), \"   scHoOL   \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    //---------------- Tests for containsRating --------------------------------------"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Invalid equivalence partitions for rating: null, empty, multiple ratings, characters outside range of 1 to 5"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Invalid equivalence partitions for ratingsList: null"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void containsRating_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertExceptionForRatingThrown(NullPointerException.class, \"4 5\", null, Optional.empty());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private void assertExceptionForRatingThrown(Class\u003c? extends Throwable\u003e exceptionClass, String ratingsList,"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                                                String rating, Optional\u003cString\u003e errorMessage) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        thrown.expect(exceptionClass);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        errorMessage.ifPresent(message -\u003e thrown.expectMessage(message));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        StringUtil.containsRating(ratingsList, rating);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void containsRating_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertExceptionForRatingThrown(IllegalArgumentException.class, \"4 5\", \"  \","
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                Optional.of(\"Rating parameter cannot be empty\"));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void containsRating_multipleRatings_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertExceptionForRatingThrown(IllegalArgumentException.class, \"4 5\", \"2 5\","
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                Optional.of(\"Rating parameter should be a single value from 1 to 5\"));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void containsRating_charOutsideRange_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertExceptionForRatingThrown(IllegalArgumentException.class, \"4 5\", \"7\","
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                Optional.of(\"Rating parameter should be a single value from 1 to 5\"));"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void containsRating_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertExceptionForRatingThrown(NullPointerException.class, null, \"2\", Optional.empty());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Valid equivalence partitions for rating:"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *   - any value between 1 to 5 inclusive"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *   - value from 1 to 5 inclusive with leading/trailing spaces"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Valid equivalence partitions for ratingsList:"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *   - one rating"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *   - multiple ratings"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *   - ratingsList with extra spaces"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *   - matches first rating in ratingsList"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *   - last rating in ratingsList"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *   - middle rating in ratingsList"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *   - matches multiple ratings"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *   - query rating not found in ratingsList"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void containsRating_validInputs_correctResult() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // Empty ratingsList"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(StringUtil.containsRating(\"\", \"4\")); // Boundary case"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(StringUtil.containsRating(\"    \", \"5\"));"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // Query rating not in ratingsList"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(StringUtil.containsRating(\"3 4 5\", \"2\"));"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(StringUtil.containsRating(\"1 2 3\", \"5\"));"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // Matches rating in the ratingsList"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(StringUtil.containsRating(\"1 2 3\", \"1\")); // First rating (boundary case)"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(StringUtil.containsRating(\"2 3 4\", \"4\")); // Last rating (boundary case)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(StringUtil.containsRating(\"  1   3   4  \", \"1\")); // ratingsList has extra spaces"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(StringUtil.containsRating(\"2\", \"2\")); // One rating in ratingsList (boundary case)"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(StringUtil.containsRating(\"1 4 5\", \"  5  \")); // Leading/trailing spaces in rating"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // Matches multiple ratings in ratingsList"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(StringUtil.containsRating(\"1 2 3  2\", \"2\"));"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    //---------------- Tests for containsCountryCode --------------------------------------"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Invalid equivalence partitions for countryCode: null, empty, multiple countryCode,"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * keywords longer or shorter than 3 characters"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Invalid equivalence partitions for countryCodeList: null"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * 3 character words that do not correspond to ISO-3166 country codes"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void containsCountryCode_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertExceptionForCountryCodeThrown(NullPointerException.class, \"SGP JPN\", null, Optional.empty());"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private void assertExceptionForCountryCodeThrown(Class\u003c? extends Throwable\u003e exceptionClass, String countryCodeList,"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                                                String countryCode, Optional\u003cString\u003e errorMessage) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        thrown.expect(exceptionClass);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        errorMessage.ifPresent(message -\u003e thrown.expectMessage(message));"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        StringUtil.containsCountryCode(countryCodeList, countryCode);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void containsCountryCode_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertExceptionForCountryCodeThrown(IllegalArgumentException.class, \"SGP JPN\", \"  \","
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                Optional.of(\"Country Code parameter cannot be empty\"));"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void containsCountryCode_multipleCountryCode_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertExceptionForCountryCodeThrown(IllegalArgumentException.class, \"SGP JPN CHN\","
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                \"SGP JPN\", Optional.of(\"Country Code parameter should be a single word\"));"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void containsCountryCode_countryCodeLongerThanThreeLetter_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertExceptionForCountryCodeThrown(IllegalArgumentException.class, \"SGP JPN USA\","
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                \"SGXX\", Optional.of(\"Country codes should only contain three-letter ISO-3166 codes\"));"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void containsCountryCode_countryCodeShorterThanThreeLetter_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertExceptionForCountryCodeThrown(IllegalArgumentException.class, \"SGP JPN USA\","
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                \"SG\", Optional.of(\"Country codes should only contain three-letter ISO-3166 codes\"));"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void containsCountryCodeIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertExceptionForCountryCodeThrown(NullPointerException.class, null,"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                \"SGP\", Optional.empty());"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Valid equivalence partitions for countryCode:"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *   - any 3 letter keyword that matches ISO-3166 country code"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *   - 3 letter keyword that matches ISO-3166 country code with leading/trailing spaces"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Valid equivalence partitions for countryCodeList:"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *   - one countryCode"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *   - multiple countryCode"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *   - countryCodeList with extra spaces"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *   - matches first countryCode in countryCodeList"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *   - last countryCode in countryCodeList"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *   - middle countryCode in countryCodeList"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *   - matches multiple countryCode"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *   - query rating not found in countryCodeList"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void containsCountryCode_validInputs_correctResult() {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // Empty countryCodeList"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(StringUtil.containsCountryCode(\"\", \"SGP\")); // Boundary case"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(StringUtil.containsCountryCode(\"    \", \"JPN\"));"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // Query countryCode not in countryCodeList"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(StringUtil.containsCountryCode(\"SGP JPN USA\", \"KOR\"));"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(StringUtil.containsCountryCode(\"DEU CHN IND\", \"SGP\"));"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // Matches countryCode in the countryCodeList"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(StringUtil.containsCountryCode(\"DEU JPN CHN\", \"DEU\")); // First rating (boundary case)"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(StringUtil.containsCountryCode(\"CHN SGP USA\", \"USA\")); // Last rating (boundary case)"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(StringUtil.containsCountryCode(\"  FRA   CHN   ITA  \", \"FRA\")); // countryCodeList has extra spaces"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(StringUtil.containsCountryCode(\"SGP\", \"SGP\")); // One countryCode in countryCodeList (boundary case)"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(StringUtil.containsCountryCode(\"SGP DEU IND\", \"  IND  \")); // Leading/trailing spaces in countryCode"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // Matches multiple countryCode in countryCodeList"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(StringUtil.containsCountryCode(\"DEU JPN USA  JPN\", \"JPN\"));"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    //---------------- Tests for containsYear --------------------------------------"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Invalid equivalence partitions for year: null, empty, multiple years, years outside the range of 1900-current"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Invalid equivalence partitions for yearList: null"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void containsYear_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertExceptionForYearThrown(NullPointerException.class, \"2018 2019\", null, Optional.empty());"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private void assertExceptionForYearThrown(Class\u003c? extends Throwable\u003e exceptionClass, String yearList,"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                                                String year, Optional\u003cString\u003e errorMessage) {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        thrown.expect(exceptionClass);"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        errorMessage.ifPresent(message -\u003e thrown.expectMessage(message));"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        StringUtil.containsYear(yearList, year);"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void containsYear_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertExceptionForYearThrown(IllegalArgumentException.class, \"2017 2019\", \"  \","
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                Optional.of(\"Year parameter cannot be empty\"));"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void containsYear_multipleYears_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertExceptionForYearThrown(IllegalArgumentException.class, \"2018 2019\", \"2018 2017\","
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                Optional.of(\"Years should only contain a year from 1900 to the current year\"));"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void containsYear_charOutsideRange_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertExceptionForYearThrown(IllegalArgumentException.class, \"2018 2019\", \"1805\","
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                Optional.of(\"Years should only contain a year from 1900 to the current year\"));"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void containsYear_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertExceptionForYearThrown(NullPointerException.class, null, \"2018\", Optional.empty());"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Valid equivalence partitions for year:"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *   - any year value between 1900 - current year"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *   - any year value between 1900 - current year with leading/trailing spaces"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Valid equivalence partitions for yearList:"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *   - one year"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *   - multiple years"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *   - yearList with extra spaces"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *   - matches first year in yearList"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *   - last year in yearList"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *   - middle year in yearList"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *   - matches multiple years"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *   - query year not found in yearList"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void containsYear_validInputs_correctResult() {"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // Empty yearList"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(StringUtil.containsYear(\"\", \"2018\")); // Boundary case"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(StringUtil.containsYear(\"    \", \"2019\"));"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // Query year not in yearList"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(StringUtil.containsYear(\"2017 2018 2019\", \"2016\"));"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(StringUtil.containsYear(\"2015 2017 2018\", \"2019\"));"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // Matches year in the yearList"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(StringUtil.containsYear(\"2016 2018 2019\", \"2016\")); // First rating (boundary case)"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(StringUtil.containsYear(\"2016 2018 2019\", \"2019\")); // Last rating (boundary case)"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(StringUtil.containsYear(\"  2013   2017   2018  \", \"2013\")); // ratingsList has extra spaces"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(StringUtil.containsYear(\"2018\", \"2018\")); // One rating in ratingsList (boundary case)"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(StringUtil.containsYear(\"2011 2012 2019\", \"  2019  \")); // Leading/trailing spaces in rating"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // Matches multiple years in yearList"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(StringUtil.containsYear(\"2011 2014 2017  2014\", \"2014\"));"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThat(StringUtil.getDetails(new FileNotFoundException(\"file not found\")),"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "                   containsString(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "        StringUtil.getDetails(null);"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 2,
      "nivenang": 359,
      "-": 157
    }
  },
  {
    "path": "src/test/java/seedu/travel/logic/CommandHistoryTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandHistoryTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory history;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_withCommandHistory_copiesCommandHistory() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandHistoryWithA, new CommandHistory(commandHistoryWithA));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        final String validCommand \u003d \"clear\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        final String invalidCommand \u003d \"adds Bob\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(validCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(invalidCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validCommand, invalidCommand), history.getHistory());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory anotherCommandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        anotherCommandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithB \u003d new CommandHistory();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithB.add(\"b\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandHistoryWithA.equals(commandHistoryWithA));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandHistoryWithA.equals(anotherCommandHistoryWithA));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(5.0f));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(commandHistoryWithB));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory anotherCommandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        anotherCommandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithB \u003d new CommandHistory();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithB.add(\"b\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandHistoryWithA.hashCode(), anotherCommandHistoryWithA.hashCode());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns different hashcode"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandHistoryWithA.hashCode(), commandHistoryWithB.hashCode());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 1,
      "-": 78
    }
  },
  {
    "path": "src/test/java/seedu/travel/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.commons.core.Messages.MESSAGE_INVALID_PLACE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.ADDRESS_DESC_AMK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.COUNTRY_CODE_DESC_AMK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.DATE_VISITED_DESC_AMK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.DESCRIPTION_AMK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.NAME_DESC_AMK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.RATING_DESC_AMK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.AMK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.Model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.ModelManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.ReadOnlyTravelBuddy;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.UserPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Place;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.storage.JsonTravelBuddyStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.storage.StorageManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.testutil.PlaceBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        JsonTravelBuddyStorage travelBuddyStorage \u003d new JsonTravelBuddyStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        StorageManager storage \u003d new StorageManager(travelBuddyStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PLACE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // Setup LogicManager with JsonTravelBuddyIoExceptionThrowingStub"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        JsonTravelBuddyStorage travelBuddyStorage \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                new JsonTravelBuddyIoExceptionThrowingStub(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        StorageManager storage \u003d new StorageManager(travelBuddyStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        String addCommand \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            AddCommand.COMMAND_WORD + NAME_DESC_AMK + COUNTRY_CODE_DESC_AMK + DATE_VISITED_DESC_AMK + RATING_DESC_AMK"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + DESCRIPTION_AMK + ADDRESS_DESC_AMK;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        Place expectedPlace \u003d new PlaceBuilder(AMK).withTags().build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        expectedModel.addPlace(expectedPlace);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        expectedModel.commitTravelBuddy();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(CommandException.class, addCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(addCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void getFilteredPlaceList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        logic.getFilteredPlaceList().remove(0);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTravelBuddy(), new UserPrefs());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     *      - {@code expectedModel}\u0027s travel book was saved to the storage file."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private static class JsonTravelBuddyIoExceptionThrowingStub extends JsonTravelBuddyStorage {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        private JsonTravelBuddyIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        public void saveTravelBuddy(ReadOnlyTravelBuddy travelBuddy, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 37,
      "PremBagda": 7,
      "nivenang": 1,
      "-": 147
    }
  },
  {
    "path": "src/test/java/seedu/travel/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.getTypicalTravelBuddy;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Place;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.testutil.PlaceBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        model \u003d new ModelManager(getTypicalTravelBuddy(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void execute_newPlace_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Place validPlace \u003d new PlaceBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTravelBuddy(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        expectedModel.addPlace(validPlace);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        expectedModel.commitTravelBuddy();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPlace), model, commandHistory,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPlace), expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void execute_duplicatePlace_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Place placeInList \u003d model.getTravelBuddy().getPlaceList().get(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertCommandFailure(new AddCommand(placeInList), model, commandHistory,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_PLACE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 15,
      "PremBagda": 7,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/travel/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.ReadOnlyTravelBuddy;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.TravelBuddy;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Place;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.testutil.PlaceBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void constructor_nullPlace_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void execute_placeAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        ModelStubAcceptingPlaceAdded modelStub \u003d new ModelStubAcceptingPlaceAdded();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Place validPlace \u003d new PlaceBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPlace).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPlace), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertEquals(Arrays.asList(validPlace), modelStub.placesAdded);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void execute_duplicatePlace_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Place validPlace \u003d new PlaceBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPlace);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPlace(validPlace);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PLACE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Place alice \u003d new PlaceBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Place bob \u003d new PlaceBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // different place -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        public void setChartDisplayed(boolean chartDisplayed) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        public ReadOnlyProperty\u003cBoolean\u003e chartDisplayedProperty() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        public Path getTravelBuddyFilePath() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        public void setTravelBuddyFilePath(Path travelBuddyFilePath) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        public void addPlace(Place place) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        public void setTravelBuddy(ReadOnlyTravelBuddy newData) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        public ReadOnlyTravelBuddy getTravelBuddy() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        public boolean hasPlace(Place place) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        public void deletePlace(Place target) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        public void setPlace(Place target, Place editedPlace) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        public ObservableList\u003cPlace\u003e getFilteredPlaceList() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        public void updateFilteredPlaceList(Predicate\u003cPlace\u003e predicate) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        public boolean canUndoTravelBuddy() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        public boolean canRedoTravelBuddy() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        public void undoTravelBuddy() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        public void redoTravelBuddy() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        public void commitTravelBuddy() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        public void commitChart() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        public ReadOnlyProperty\u003cPlace\u003e selectedPlaceProperty() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        public Place getSelectedPlace() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        public void setSelectedPlace(Place place) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * A Model stub that contains a single place."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private class ModelStubWithPlace extends ModelStub {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        private final Place place;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        ModelStubWithPlace(Place place) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            requireNonNull(place);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            this.place \u003d place;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        public boolean hasPlace(Place place) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            requireNonNull(place);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            return this.place.isSamePlace(place);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * A Model stub that always accept the place being added."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private class ModelStubAcceptingPlaceAdded extends ModelStub {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        final ArrayList\u003cPlace\u003e placesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        public boolean hasPlace(Place place) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            requireNonNull(place);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            return placesAdded.stream().anyMatch(place::isSamePlace);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        public void addPlace(Place place) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            requireNonNull(place);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            placesAdded.add(place);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        public void commitTravelBuddy() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        public ReadOnlyTravelBuddy getTravelBuddy() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            return new TravelBuddy();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaungohsc": 10,
      "chung-ming": 25,
      "PremBagda": 41,
      "-": 193
    }
  },
  {
    "path": "src/test/java/seedu/travel/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.getTypicalTravelBuddy;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.TravelBuddy;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void execute_emptyTravelBuddy_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        expectedModel.commitTravelBuddy();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void execute_nonEmptyTravelBuddy_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalTravelBuddy(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalTravelBuddy(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        expectedModel.setTravelBuddy(new TravelBuddy());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        expectedModel.commitTravelBuddy();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 37
    }
  },
  {
    "path": "src/test/java/seedu/travel/logic/commands/CommandResultTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 1,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/travel/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.parser.CliSyntax.PREFIX_COUNTRY_CODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import static seedu.travel.logic.parser.CliSyntax.PREFIX_DATE_VISITED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.TravelBuddy;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Place;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.testutil.EditPlaceDescriptorBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String VALID_NAME_AMK \u003d \"Ang Mo Kio MRT\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String VALID_NAME_BEDOK \u003d \"Bedok MRT\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String VALID_NAME_CLEMENTI \u003d \"Clementi MRT\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String VALID_NAME_DG \u003d \"Dhoby Ghaut MRT\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public static final String VALID_COUNTRY_CODE_AMK \u003d \"SGP\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public static final String VALID_COUNTRY_CODE_BEDOK \u003d \"SGP\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public static final String VALID_COUNTRY_CODE_CLEMENTI \u003d \"SGP\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public static final String VALID_COUNTRY_CODE_DG \u003d \"SGP\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public static final String VALID_COUNTRY_CODE_AMERICA \u003d \"USA\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public static final String VALID_DATE_VISITED_AMK \u003d \"09/01/2016\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public static final String VALID_DATE_VISITED_BEDOK \u003d \"06/01/2017\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public static final String VALID_DATE_VISITED_CLEMENTI \u003d \"07/01/2018\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public static final String VALID_DATE_VISITED_DG \u003d \"04/01/2018\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public static final String VALID_DATE_VISITED_AMERICA \u003d \"02/02/2018\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String VALID_RATING_AMK \u003d \"5\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String VALID_RATING_BEDOK \u003d \"3\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String VALID_RATING_CLEMENTI \u003d \"4\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String VALID_RATING_DG \u003d \"2\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String VALID_DESCRIPTION_AMK \u003d \"An MRT Station in Ang Mo Kio\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String VALID_DESCRIPTION_BEDOK \u003d \"An MRT Station in Bedok\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String VALID_DESCRIPTION_CLEMENTI \u003d \"An MRT Station in Clementi\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String VALID_DESCRIPTION_DG \u003d \"An MRT Station in Dhoby Ghaut\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String VALID_ADDRESS_AMK \u003d \"2450 Ang Mo Kio Ave 8, Singapore 569811\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String VALID_ADDRESS_BEDOK \u003d \"315 New Upper Changi Road, Singapore 467347\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String VALID_ADDRESS_CLEMENTI \u003d \"3150 Commonwealth Avenue West, Singapore 129580\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String VALID_ADDRESS_DG \u003d \"11 Orchard Road, Singapore 238826\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String VALID_TAG_MRT \u003d \"mrt\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String VALID_TAG_EWL \u003d \"eastWestLine\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String NAME_DESC_AMK \u003d \" \" + PREFIX_NAME + VALID_NAME_AMK;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String NAME_DESC_BEDOK \u003d \" \" + PREFIX_NAME + VALID_NAME_BEDOK;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String NAME_DESC_CLEMENTI \u003d \" \" + PREFIX_NAME + VALID_NAME_CLEMENTI;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String NAME_DESC_DG \u003d \" \" + PREFIX_NAME + VALID_NAME_DG;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public static final String COUNTRY_CODE_DESC_AMK \u003d \" \" + PREFIX_COUNTRY_CODE + VALID_COUNTRY_CODE_AMK;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public static final String COUNTRY_CODE_DESC_BEDOK \u003d \" \" + PREFIX_COUNTRY_CODE + VALID_COUNTRY_CODE_BEDOK;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public static final String COUNTRY_CODE_DESC_CLEMENTI \u003d \" \" + PREFIX_COUNTRY_CODE + VALID_COUNTRY_CODE_CLEMENTI;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public static final String COUNTRY_CODE_DESC_DG \u003d \" \" + PREFIX_COUNTRY_CODE + VALID_COUNTRY_CODE_DG;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String COUNTRY_CODE_DESC_AMERICA \u003d \" \" + PREFIX_COUNTRY_CODE + VALID_COUNTRY_CODE_AMERICA;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public static final String DATE_VISITED_DESC_AMK \u003d \" \" + PREFIX_DATE_VISITED + VALID_DATE_VISITED_AMK;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public static final String DATE_VISITED_DESC_BEDOK \u003d \" \" + PREFIX_DATE_VISITED + VALID_DATE_VISITED_BEDOK;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public static final String DATE_VISITED_DESC_CLEMENTI \u003d \" \" + PREFIX_DATE_VISITED + VALID_DATE_VISITED_CLEMENTI;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public static final String DATE_VISITED_DESC_DG \u003d \" \" + PREFIX_DATE_VISITED + VALID_DATE_VISITED_DG;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String RATING_DESC_AMK \u003d \" \" + PREFIX_RATING + VALID_RATING_AMK;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String RATING_DESC_BEDOK \u003d \" \" + PREFIX_RATING + VALID_RATING_BEDOK;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String RATING_DESC_CLEMENTI \u003d \" \" + PREFIX_RATING + VALID_RATING_CLEMENTI;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String RATING_DESC_DG \u003d \" \" + PREFIX_RATING + VALID_RATING_DG;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String DESCRIPTION_AMK \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_AMK;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String DESCRIPTION_BEDOK \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_BEDOK;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String DESCRIPTION_CLEMENTI \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_CLEMENTI;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String DESCRIPTION_DG \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_DG;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String ADDRESS_DESC_AMK \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMK;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String ADDRESS_DESC_BEDOK \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BEDOK;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String ADDRESS_DESC_CLEMENTI \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_CLEMENTI;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String ADDRESS_DESC_DG \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_DG;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String TAG_DESC_MRT \u003d \" \" + PREFIX_TAG + VALID_TAG_MRT;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String TAG_DESC_EWL \u003d \" \" + PREFIX_TAG + VALID_TAG_EWL;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public static final String INVALID_COUNTRY_CODE_DESC \u003d \" \" + PREFIX_COUNTRY_CODE + \"S1P\"; // \u00271\u0027 not allowed in"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    // Country Code"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public static final String INVALID_FORMAT_DATE_VISITED_DESC \u003d \" \" + PREFIX_DATE_VISITED + \"20*12/1992\"; // \u0027*\u0027 not"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    // allowed in Date Visited"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public static final String INVALID_FUTURE_DATE_VISITED_DESC \u003d \" \" + PREFIX_DATE_VISITED + \"20/12/2091\"; // Future"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    // date is not allowed in Date Visited"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String INVALID_RATING_DESC \u003d \" \" + PREFIX_RATING + \"4a\"; // \u0027a\u0027 not allowed in ratings"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static final String INVALID_DESCRIPTION \u003d \" \" + PREFIX_DESCRIPTION + \".I love this place\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    // must begin with alphabet"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final EditCommand.EditPlaceDescriptor DESC_AMK;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final EditCommand.EditPlaceDescriptor DESC_BEDOK;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        DESC_AMK \u003d new EditPlaceDescriptorBuilder().withName(VALID_NAME_AMK)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                .withCountryCode(VALID_COUNTRY_CODE_AMK)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                .withDateVisited(VALID_DATE_VISITED_AMK)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                .withRating(VALID_RATING_AMK).withDescription(VALID_DESCRIPTION_AMK).withAddress(VALID_ADDRESS_AMK)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                .withTags(VALID_TAG_MRT).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        DESC_BEDOK \u003d new EditPlaceDescriptorBuilder().withName(VALID_NAME_BEDOK)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                .withCountryCode(VALID_COUNTRY_CODE_BEDOK)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                .withDateVisited(VALID_DATE_VISITED_BEDOK)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                .withRating(VALID_RATING_BEDOK).withDescription(VALID_DESCRIPTION_BEDOK)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                .withAddress(VALID_ADDRESS_BEDOK).withTags(VALID_TAG_MRT, VALID_TAG_EWL).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult expectedCommandResult, Model expectedModel) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandHistory, CommandResult, Model)}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, actualCommandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * - the travel book, filtered place list and selected place in {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        TravelBuddy expectedTravelBuddy \u003d new TravelBuddy(actualModel.getTravelBuddy());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        List\u003cPlace\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPlaceList());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Place expectedSelectedPlace \u003d actualModel.getSelectedPlace();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            assertEquals(expectedTravelBuddy, actualModel.getTravelBuddy());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPlaceList());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            assertEquals(expectedSelectedPlace, actualModel.getSelectedPlace());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the place at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * {@code model}\u0027s travel book."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public static void showPlaceAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPlaceList().size());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Place place \u003d model.getFilteredPlaceList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        final String[] splitName \u003d place.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        model.updateFilteredPlaceList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertEquals(1, model.getFilteredPlaceList().size());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Deletes the first place in {@code model}\u0027s filtered list from {@code model}\u0027s travel book."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public static void deleteFirstPlace(Model model) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Place firstPlace \u003d model.getFilteredPlaceList().get(0);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        model.deletePlace(firstPlace);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        model.commitTravelBuddy();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 23,
      "PremBagda": 43,
      "nivenang": 46,
      "-": 89
    }
  },
  {
    "path": "src/test/java/seedu/travel/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.showPlaceAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalIndexes.INDEX_FIRST_PLACE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalIndexes.INDEX_SECOND_PLACE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.getTypicalTravelBuddy;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Place;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTravelBuddy(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Place placeToDelete \u003d model.getFilteredPlaceList().get(INDEX_FIRST_PLACE.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PLACE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PLACE_SUCCESS, placeToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getTravelBuddy(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        expectedModel.deletePlace(placeToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        expectedModel.commitTravelBuddy();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPlaceList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PLACE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        showPlaceAtIndex(model, INDEX_FIRST_PLACE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Place placeToDelete \u003d model.getFilteredPlaceList().get(INDEX_FIRST_PLACE.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PLACE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PLACE_SUCCESS, placeToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTravelBuddy(), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        expectedModel.deletePlace(placeToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        expectedModel.commitTravelBuddy();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        showNoPlace(expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        showPlaceAtIndex(model, INDEX_FIRST_PLACE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PLACE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of travel book list"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTravelBuddy().getPlaceList().size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PLACE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Place placeToDelete \u003d model.getFilteredPlaceList().get(INDEX_FIRST_PLACE.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PLACE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTravelBuddy(), new UserPrefs());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        expectedModel.deletePlace(placeToDelete);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        expectedModel.commitTravelBuddy();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // delete -\u003e first place deleted"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // undo -\u003e reverts TravelBuddy back to previous state and filtered place list to show all places"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        expectedModel.undoTravelBuddy();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // redo -\u003e same first place deleted again"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        expectedModel.redoTravelBuddy();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPlaceList().size() + 1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // execution failed -\u003e travel book state not added into model"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PLACE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // single travel book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * 1. Deletes a {@code Place} from a filtered list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted place in the"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the place object regardless of indexing."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePlaceDeleted() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PLACE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTravelBuddy(), new UserPrefs());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        showPlaceAtIndex(model, INDEX_SECOND_PLACE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Place placeToDelete \u003d model.getFilteredPlaceList().get(INDEX_FIRST_PLACE.getZeroBased());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        expectedModel.deletePlace(placeToDelete);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        expectedModel.commitTravelBuddy();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // delete -\u003e deletes second place in unfiltered place list / first place in filtered place list"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // undo -\u003e reverts TravelBuddy back to previous state and filtered place list to show all places"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        expectedModel.undoTravelBuddy();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertNotEquals(placeToDelete, model.getFilteredPlaceList().get(INDEX_FIRST_PLACE.getZeroBased()));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // redo -\u003e deletes same second place in unfiltered place list"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        expectedModel.redoTravelBuddy();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PLACE);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PLACE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PLACE);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // different place -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private void showNoPlace(Model model) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        model.updateFilteredPlaceList(p -\u003e false);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertTrue(model.getFilteredPlaceList().isEmpty());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 54,
      "PremBagda": 19,
      "-": 104
    }
  },
  {
    "path": "src/test/java/seedu/travel/logic/commands/DeleteMultipleCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.showPlaceAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalIndexes.INDEX_FIFTH_PLACE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalIndexes.INDEX_FIRST_PLACE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalIndexes.INDEX_FOURTH_PLACE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalIndexes.INDEX_SECOND_PLACE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalIndexes.INDEX_THIRD_PLACE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.getTypicalTravelBuddy;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Place;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nivenang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nivenang"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nivenang"
        },
        "content": " * {@code DeleteMultipleCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nivenang"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nivenang"
        },
        "content": "public class DeleteMultipleCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTravelBuddy(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        DeleteMultipleCommand deleteMultipleCommand \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                new DeleteMultipleCommand(INDEX_FIRST_PLACE, INDEX_FOURTH_PLACE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        StringBuilder expectedMessage \u003d new StringBuilder();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Place placeToDeleteFirst \u003d model.getFilteredPlaceList().get(INDEX_FIRST_PLACE.getZeroBased());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Place placeToDeleteSecond \u003d model.getFilteredPlaceList().get(INDEX_SECOND_PLACE.getZeroBased());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Place placeToDeleteThird \u003d model.getFilteredPlaceList().get(INDEX_THIRD_PLACE.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Place placeToDeleteFourth \u003d model.getFilteredPlaceList().get(INDEX_FOURTH_PLACE.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        expectedMessage \u003d buildExpectedMessage(expectedMessage, placeToDeleteFirst);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        expectedMessage \u003d buildExpectedMessage(expectedMessage, placeToDeleteSecond);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        expectedMessage \u003d buildExpectedMessage(expectedMessage, placeToDeleteThird);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        expectedMessage \u003d buildExpectedMessage(expectedMessage, placeToDeleteFourth);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getTravelBuddy(), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        expectedModel.deletePlace(placeToDeleteFirst);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        expectedModel.deletePlace(placeToDeleteSecond);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        expectedModel.deletePlace(placeToDeleteThird);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        expectedModel.deletePlace(placeToDeleteFourth);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        expectedModel.commitTravelBuddy();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(deleteMultipleCommand, model, commandHistory, expectedMessage.toString(), expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Index outOfBoundStartIndex \u003d Index.fromOneBased(model.getFilteredPlaceList().size() + 1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Index outOfBoundEndIndex \u003d Index.fromOneBased(model.getFilteredPlaceList().size() + 3);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        DeleteMultipleCommand deleteMultipleCommand \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                new DeleteMultipleCommand(outOfBoundStartIndex, outOfBoundEndIndex);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandFailure(deleteMultipleCommand, model, commandHistory,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                Messages.MESSAGE_INVALID_PLACE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        showPlaceAtIndex(model, INDEX_FIRST_PLACE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Place placeToDelete \u003d model.getFilteredPlaceList().get(INDEX_FIRST_PLACE.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        DeleteMultipleCommand deleteMultipleCommand \u003d new DeleteMultipleCommand(INDEX_FIRST_PLACE, INDEX_FIFTH_PLACE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        StringBuilder buildExpectedMessage \u003d new StringBuilder();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        buildExpectedMessage.append(DeleteMultipleCommand.MESSAGE_DELETE_PLACE_SUCCESS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        buildExpectedMessage.append(placeToDelete);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        buildExpectedMessage.append(\"\\n\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        String expectedMessage \u003d buildExpectedMessage.toString();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTravelBuddy(), new UserPrefs());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        expectedModel.deletePlace(placeToDelete);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        expectedModel.commitTravelBuddy();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        showNoPlace(expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(deleteMultipleCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        showPlaceAtIndex(model, INDEX_FIRST_PLACE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Index outOfBoundStartIndex \u003d INDEX_SECOND_PLACE;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Index outOfBoundEndIndex \u003d INDEX_FIFTH_PLACE;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of travel book list"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertTrue(outOfBoundStartIndex.getZeroBased() \u003c model.getTravelBuddy().getPlaceList().size());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertTrue(outOfBoundEndIndex.getZeroBased() \u003c model.getTravelBuddy().getPlaceList().size());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        DeleteMultipleCommand deleteMultipleCommand \u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                new DeleteMultipleCommand(outOfBoundStartIndex, outOfBoundEndIndex);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandFailure(deleteMultipleCommand, model, commandHistory,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                Messages.MESSAGE_INVALID_PLACE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Place placeToDeleteFirst \u003d model.getFilteredPlaceList().get(INDEX_FIRST_PLACE.getZeroBased());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Place placeToDeleteSecond \u003d model.getFilteredPlaceList().get(INDEX_SECOND_PLACE.getZeroBased());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Place placeToDeleteThird \u003d model.getFilteredPlaceList().get(INDEX_THIRD_PLACE.getZeroBased());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        DeleteMultipleCommand deleteMultipleCommand \u003d new DeleteMultipleCommand(INDEX_FIRST_PLACE, INDEX_THIRD_PLACE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTravelBuddy(), new UserPrefs());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        expectedModel.deletePlace(placeToDeleteFirst);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        expectedModel.deletePlace(placeToDeleteSecond);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        expectedModel.deletePlace(placeToDeleteThird);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        expectedModel.commitTravelBuddy();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // deletem -\u003e first 3 places deleted"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        deleteMultipleCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // undo -\u003e reverts travelBuddy back to previous state and filtered place list to show all places"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        expectedModel.undoTravelBuddy();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // redo -\u003e same first 3 places deleted again"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        expectedModel.redoTravelBuddy();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Index outOfBoundStartIndex \u003d Index.fromOneBased(model.getFilteredPlaceList().size() + 1);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Index outOfBoundEndIndex \u003d Index.fromOneBased(model.getFilteredPlaceList().size() + 3);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        DeleteMultipleCommand deleteMultipleCommand \u003d"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                new DeleteMultipleCommand(outOfBoundStartIndex, outOfBoundEndIndex);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // execution failed -\u003e travel book state not added into model"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandFailure(deleteMultipleCommand, model, commandHistory,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                Messages.MESSAGE_INVALID_PLACE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // single travel book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * 1. Deletes a {@code Place} from a filtered list."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted place in the"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the place object regardless of indexing."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePlaceDeleted() throws Exception {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        DeleteMultipleCommand deleteMultipleCommand \u003d new DeleteMultipleCommand(INDEX_FIRST_PLACE, INDEX_THIRD_PLACE);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTravelBuddy(), new UserPrefs());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        showPlaceAtIndex(model, INDEX_SECOND_PLACE);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Place placeToDelete \u003d model.getFilteredPlaceList().get(INDEX_FIRST_PLACE.getZeroBased());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        expectedModel.deletePlace(placeToDelete);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        expectedModel.commitTravelBuddy();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // delete -\u003e deletes second place in unfiltered place list / first place in filtered place list"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        deleteMultipleCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // undo -\u003e reverts travelBuddy back to previous state and filtered place list to show all places"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        expectedModel.undoTravelBuddy();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertNotEquals(placeToDelete, model.getFilteredPlaceList().get(INDEX_FIRST_PLACE.getZeroBased()));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // redo -\u003e deletes same second place in unfiltered place list"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        expectedModel.redoTravelBuddy();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        DeleteMultipleCommand deleteFirstCommand \u003d new DeleteMultipleCommand(INDEX_FIRST_PLACE, INDEX_FIFTH_PLACE);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        DeleteMultipleCommand deleteSecondCommand \u003d new DeleteMultipleCommand(INDEX_SECOND_PLACE, INDEX_FOURTH_PLACE);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        DeleteMultipleCommand deleteFirstCommandCopy \u003d"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                new DeleteMultipleCommand(INDEX_FIRST_PLACE, INDEX_FIFTH_PLACE);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // different place -\u003e returns false"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private void showNoPlace(Model model) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        model.updateFilteredPlaceList(p -\u003e false);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertTrue(model.getFilteredPlaceList().isEmpty());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Builds the expected message used for testing purposes"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private StringBuilder buildExpectedMessage(StringBuilder expectedMessage, Place placeToDelete) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        expectedMessage.append(DeleteMultipleCommand.MESSAGE_DELETE_PLACE_SUCCESS);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        expectedMessage.append(placeToDelete);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        expectedMessage.append(\"\\n\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        return expectedMessage;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nivenang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 64,
      "PremBagda": 33,
      "nivenang": 125
    }
  },
  {
    "path": "src/test/java/seedu/travel/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.DESC_AMK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.DESC_BEDOK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_NAME_BEDOK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_RATING_BEDOK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_TAG_EWL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.showPlaceAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalIndexes.INDEX_FIRST_PLACE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalIndexes.INDEX_SECOND_PLACE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.getTypicalTravelBuddy;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.EditCommand.EditPlaceDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.TravelBuddy;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Place;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.testutil.EditPlaceDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.testutil.PlaceBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTravelBuddy(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Place editedPlace \u003d new PlaceBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        EditPlaceDescriptor descriptor \u003d new EditPlaceDescriptorBuilder(editedPlace).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PLACE, descriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PLACE_SUCCESS, editedPlace);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TravelBuddy(model.getTravelBuddy()), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        expectedModel.setPlace(model.getFilteredPlaceList().get(0), editedPlace);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        expectedModel.commitTravelBuddy();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Index indexLastPlace \u003d Index.fromOneBased(model.getFilteredPlaceList().size());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Place lastPlace \u003d model.getFilteredPlaceList().get(indexLastPlace.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        PlaceBuilder placeInList \u003d new PlaceBuilder(lastPlace);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        Place editedPlace \u003d placeInList.withName(VALID_NAME_BEDOK).withRating(VALID_RATING_BEDOK)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                .withTags(VALID_TAG_EWL).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        EditPlaceDescriptor descriptor \u003d new EditPlaceDescriptorBuilder().withName(VALID_NAME_BEDOK)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                .withRating(VALID_RATING_BEDOK).withTags(VALID_TAG_EWL).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPlace, descriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PLACE_SUCCESS, editedPlace);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TravelBuddy(model.getTravelBuddy()), new UserPrefs());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        expectedModel.setPlace(lastPlace, editedPlace);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        expectedModel.commitTravelBuddy();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PLACE, new EditPlaceDescriptor());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Place editedPlace \u003d model.getFilteredPlaceList().get(INDEX_FIRST_PLACE.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PLACE_SUCCESS, editedPlace);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TravelBuddy(model.getTravelBuddy()), new UserPrefs());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        expectedModel.commitTravelBuddy();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        showPlaceAtIndex(model, INDEX_FIRST_PLACE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Place placeInFilteredList \u003d model.getFilteredPlaceList().get(INDEX_FIRST_PLACE.getZeroBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        Place editedPlace \u003d new PlaceBuilder(placeInFilteredList).withName(VALID_NAME_BEDOK).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PLACE,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                new EditPlaceDescriptorBuilder().withName(VALID_NAME_BEDOK).build());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PLACE_SUCCESS, editedPlace);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TravelBuddy(model.getTravelBuddy()), new UserPrefs());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        expectedModel.setPlace(model.getFilteredPlaceList().get(0), editedPlace);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        expectedModel.commitTravelBuddy();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void execute_duplicatePlaceUnfilteredList_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Place firstPlace \u003d model.getFilteredPlaceList().get(INDEX_FIRST_PLACE.getZeroBased());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        EditPlaceDescriptor descriptor \u003d new EditPlaceDescriptorBuilder(firstPlace).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PLACE, descriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PLACE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void execute_duplicatePlaceFilteredList_failure() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        showPlaceAtIndex(model, INDEX_FIRST_PLACE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // edit place in filtered list into a duplicate in travel book"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Place placeInList \u003d model.getTravelBuddy().getPlaceList().get(INDEX_SECOND_PLACE.getZeroBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PLACE,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                new EditPlaceDescriptorBuilder(placeInList).build());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PLACE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void execute_invalidPlaceIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPlaceList().size() + 1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        EditPlaceDescriptor descriptor \u003d new EditPlaceDescriptorBuilder().withName(VALID_NAME_BEDOK).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PLACE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * but smaller than size of travel book"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void execute_invalidPlaceIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        showPlaceAtIndex(model, INDEX_FIRST_PLACE);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PLACE;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of travel book list"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTravelBuddy().getPlaceList().size());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                new EditPlaceDescriptorBuilder().withName(VALID_NAME_BEDOK).build());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PLACE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Place editedPlace \u003d new PlaceBuilder().build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Place placeToEdit \u003d model.getFilteredPlaceList().get(INDEX_FIRST_PLACE.getZeroBased());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        EditPlaceDescriptor descriptor \u003d new EditPlaceDescriptorBuilder(editedPlace).build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PLACE, descriptor);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TravelBuddy(model.getTravelBuddy()), new UserPrefs());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        expectedModel.setPlace(placeToEdit, editedPlace);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        expectedModel.commitTravelBuddy();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // edit -\u003e first place edited"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // undo -\u003e reverts travelBuddy back to previous state and filtered place list to show all places"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        expectedModel.undoTravelBuddy();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // redo -\u003e same first place edited again"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        expectedModel.redoTravelBuddy();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPlaceList().size() + 1);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        EditPlaceDescriptor descriptor \u003d new EditPlaceDescriptorBuilder().withName(VALID_NAME_BEDOK).build();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // execution failed -\u003e travel book state not added into model"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PLACE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // single travel book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * 1. Edits a {@code Place} from a filtered list."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited place in the"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the place object regardless of indexing."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePlaceEdited() throws Exception {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Place editedPlace \u003d new PlaceBuilder().build();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        EditPlaceDescriptor descriptor \u003d new EditPlaceDescriptorBuilder(editedPlace).build();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PLACE, descriptor);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TravelBuddy(model.getTravelBuddy()), new UserPrefs());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        showPlaceAtIndex(model, INDEX_SECOND_PLACE);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Place placeToEdit \u003d model.getFilteredPlaceList().get(INDEX_FIRST_PLACE.getZeroBased());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        expectedModel.setPlace(placeToEdit, editedPlace);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        expectedModel.commitTravelBuddy();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // edit -\u003e edits second place in unfiltered place list / first place in filtered place list"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // undo -\u003e reverts TravelBuddy back to previous state and filtered place list to show all places"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        expectedModel.undoTravelBuddy();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertNotEquals(model.getFilteredPlaceList().get(INDEX_FIRST_PLACE.getZeroBased()), placeToEdit);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // redo -\u003e edits same second place in unfiltered place list"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        expectedModel.redoTravelBuddy();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PLACE, DESC_AMK);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        EditPlaceDescriptor copyDescriptor \u003d new EditPlaceDescriptor(DESC_AMK);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PLACE, copyDescriptor);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PLACE, DESC_AMK)));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PLACE, DESC_BEDOK)));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 80,
      "PremBagda": 31,
      "nivenang": 10,
      "-": 127
    }
  },
  {
    "path": "src/test/java/seedu/travel/logic/commands/EditPlaceDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.DESC_AMK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.DESC_BEDOK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_ADDRESS_BEDOK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_COUNTRY_CODE_BEDOK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BEDOK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_NAME_BEDOK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_RATING_BEDOK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_TAG_EWL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.EditCommand.EditPlaceDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.testutil.EditPlaceDescriptorBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "public class EditPlaceDescriptorTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        EditPlaceDescriptor descriptorWithSameValues \u003d new EditPlaceDescriptor(DESC_AMK);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(DESC_AMK.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(DESC_AMK.equals(DESC_AMK));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(DESC_AMK.equals(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(DESC_AMK.equals(5));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(DESC_AMK.equals(DESC_BEDOK));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        EditPlaceDescriptor editedAmy \u003d new EditPlaceDescriptorBuilder(DESC_AMK).withName(VALID_NAME_BEDOK).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(DESC_AMK.equals(editedAmy));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // different country code -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        editedAmy \u003d new EditPlaceDescriptorBuilder(DESC_AMK).withName(VALID_COUNTRY_CODE_BEDOK).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertFalse(DESC_AMK.equals(editedAmy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // different rating -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        editedAmy \u003d new EditPlaceDescriptorBuilder(DESC_AMK).withRating(VALID_RATING_BEDOK).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(DESC_AMK.equals(editedAmy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        editedAmy \u003d new EditPlaceDescriptorBuilder(DESC_AMK).withDescription(VALID_DESCRIPTION_BEDOK).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(DESC_AMK.equals(editedAmy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // different travel -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        editedAmy \u003d new EditPlaceDescriptorBuilder(DESC_AMK).withAddress(VALID_ADDRESS_BEDOK).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(DESC_AMK.equals(editedAmy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        editedAmy \u003d new EditPlaceDescriptorBuilder(DESC_AMK).withTags(VALID_TAG_EWL).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(DESC_AMK.equals(editedAmy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 13,
      "PremBagda": 5,
      "nivenang": 17,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/travel/logic/commands/ExitCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 6,
      "-": 16
    }
  },
  {
    "path": "src/test/java/seedu/travel/logic/commands/GenerateCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.getTypicalTravelBuddy;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.ModelManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.UserPrefs;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "public class GenerateCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTravelBuddy(), new UserPrefs());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 13
    }
  },
  {
    "path": "src/test/java/seedu/travel/logic/commands/HelpCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 6,
      "-": 16
    }
  },
  {
    "path": "src/test/java/seedu/travel/logic/commands/HistoryCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history, HistoryCommand.MESSAGE_NO_HISTORY, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String command1 \u003d \"clear\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(HistoryCommand.MESSAGE_SUCCESS, command1), expectedModel);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        String command2 \u003d \"randomCommand\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        String command3 \u003d \"select 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command3);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(HistoryCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                String.join(\"\\n\", command3, command2, command1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 5,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/travel/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.showPlaceAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalIndexes.INDEX_FIRST_PLACE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.getTypicalTravelBuddy;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        model \u003d new ModelManager(getTypicalTravelBuddy(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getTravelBuddy(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        showPlaceAtIndex(model, INDEX_FIRST_PLACE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 12,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/travel/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.deleteFirstPlace;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.getTypicalTravelBuddy;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalTravelBuddy(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalTravelBuddy(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        deleteFirstPlace(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        deleteFirstPlace(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        model.undoTravelBuddy();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        model.undoTravelBuddy();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        deleteFirstPlace(expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        deleteFirstPlace(expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        expectedModel.undoTravelBuddy();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        expectedModel.undoTravelBuddy();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        expectedModel.redoTravelBuddy();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        expectedModel.redoTravelBuddy();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 17,
      "PremBagda": 4,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/travel/logic/commands/SearchCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.commons.core.Messages.MESSAGE_PLACES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.DANIEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.getTypicalTravelBuddy;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nivenang"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SearchCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nivenang"
        },
        "content": "public class SearchCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTravelBuddy(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalTravelBuddy(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        SearchCommand searchFirstCommand \u003d new SearchCommand(firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        SearchCommand searchSecondCommand \u003d new SearchCommand(secondPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(searchFirstCommand.equals(searchFirstCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        SearchCommand searchFirstCommandCopy \u003d new SearchCommand(firstPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(searchFirstCommand.equals(searchFirstCommandCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(searchFirstCommand.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(searchFirstCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // different place -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(searchFirstCommand.equals(searchSecondCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void execute_zeroKeywords_noPlaceFound() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PLACES_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        SearchCommand command \u003d new SearchCommand(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        expectedModel.updateFilteredPlaceList(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPlaceList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void execute_multipleKeywords_multiplePlacesFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PLACES_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Cemetery University Zoo\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        SearchCommand command \u003d new SearchCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        expectedModel.updateFilteredPlaceList(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertEquals(Arrays.asList(DANIEL, ELLE, FIONA), model.getFilteredPlaceList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 16,
      "PremBagda": 6,
      "nivenang": 14,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/travel/logic/commands/SearchCountryCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nivenang"
        },
        "content": "package seedu.travel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static seedu.travel.commons.core.Messages.MESSAGE_PLACES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.CARL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.DANIEL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.ELLE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.FIONA;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.GEORGE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.getTypicalTravelBuddy;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.model.place.CountryCodeContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nivenang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nivenang"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SearchCountryCommand}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nivenang"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nivenang"
        },
        "content": "public class SearchCountryCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTravelBuddy(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalTravelBuddy(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        CountryCodeContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                new CountryCodeContainsKeywordsPredicate(Collections.singletonList(\"SGP\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        CountryCodeContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                new CountryCodeContainsKeywordsPredicate(Collections.singletonList(\"JPN\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        SearchCountryCommand searchCountryFirstCommand \u003d new SearchCountryCommand(firstPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        SearchCountryCommand searchCountrySecondCommand \u003d new SearchCountryCommand(secondPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(searchCountryFirstCommand.equals(searchCountryFirstCommand));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        SearchCountryCommand searchCountryFirstCommandCopy \u003d new SearchCountryCommand(firstPredicate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(searchCountryFirstCommand.equals(searchCountryFirstCommandCopy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(searchCountryFirstCommand.equals(1));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(searchCountryFirstCommand.equals(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // different place -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(searchCountryFirstCommand.equals(searchCountrySecondCommand));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void execute_zeroKeywords_noPlaceFound() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PLACES_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        CountryCodeContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        SearchCountryCommand command \u003d new SearchCountryCommand(predicate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        expectedModel.updateFilteredPlaceList(predicate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPlaceList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void execute_multipleKeywords_multiplePlacesFound() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PLACES_LISTED_OVERVIEW, 7);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        CountryCodeContainsKeywordsPredicate predicate \u003d preparePredicate(\"SGP JPN\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        SearchCountryCommand command \u003d new SearchCountryCommand(predicate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        expectedModel.updateFilteredPlaceList(predicate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE), model.getFilteredPlaceList());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Parses {@code userInput} into a {@code CountryCodeContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private CountryCodeContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        return new CountryCodeContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nivenang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nivenang": 89
    }
  },
  {
    "path": "src/test/java/seedu/travel/logic/commands/SearchRatingCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.commons.core.Messages.MESSAGE_PLACES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.CARL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.ELLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.GEORGE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.getTypicalTravelBuddy;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.RatingContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nivenang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nivenang"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SearchRatingCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nivenang"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nivenang"
        },
        "content": "public class SearchRatingCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTravelBuddy(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalTravelBuddy(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        RatingContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                new RatingContainsKeywordsPredicate(Collections.singletonList(\"1\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        RatingContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                new RatingContainsKeywordsPredicate(Collections.singletonList(\"2\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        SearchRatingCommand searchRatingFirstCommand \u003d new SearchRatingCommand(firstPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        SearchRatingCommand searchRatingSecondCommand \u003d new SearchRatingCommand(secondPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(searchRatingFirstCommand.equals(searchRatingFirstCommand));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        SearchRatingCommand searchRatingFirstCommandCopy \u003d new SearchRatingCommand(firstPredicate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(searchRatingFirstCommand.equals(searchRatingFirstCommandCopy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(searchRatingFirstCommand.equals(1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(searchRatingFirstCommand.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // different place -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(searchRatingFirstCommand.equals(searchRatingSecondCommand));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void execute_zeroKeywords_noPlaceFound() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PLACES_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        RatingContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        SearchRatingCommand command \u003d new SearchRatingCommand(predicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        expectedModel.updateFilteredPlaceList(predicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPlaceList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void execute_multipleKeywords_multiplePlacesFound() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PLACES_LISTED_OVERVIEW, 5);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        RatingContainsKeywordsPredicate predicate \u003d preparePredicate(\"1 4 5\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        SearchRatingCommand command \u003d new SearchRatingCommand(predicate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        expectedModel.updateFilteredPlaceList(predicate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BENSON, CARL, ELLE, GEORGE), model.getFilteredPlaceList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Parses {@code userInput} into a {@code RatingContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private RatingContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        return new RatingContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nivenang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 18,
      "nivenang": 69
    }
  },
  {
    "path": "src/test/java/seedu/travel/logic/commands/SearchTagsCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.commons.core.Messages.MESSAGE_PLACES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.ELLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.GEORGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.getTypicalTravelBuddy;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nivenang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nivenang"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SearchTagsCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nivenang"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nivenang"
        },
        "content": "public class SearchTagsCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTravelBuddy(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalTravelBuddy(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        TagContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                new TagContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        TagContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                new TagContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        SearchTagsCommand searchFirstTagCommand \u003d new SearchTagsCommand(firstPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        SearchTagsCommand searchSecondTagCommand \u003d new SearchTagsCommand(secondPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(searchFirstTagCommand.equals(searchFirstTagCommand));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        SearchTagsCommand searchFirstTagCommandCopy \u003d new SearchTagsCommand(firstPredicate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(searchFirstTagCommand.equals(searchFirstTagCommandCopy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(searchFirstTagCommand.equals(1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(searchFirstTagCommand.equals(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // different place -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(searchFirstTagCommand.equals(searchSecondTagCommand));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void execute_zeroKeywords_noPlaceFound() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PLACES_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        TagContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        SearchTagsCommand command \u003d new SearchTagsCommand(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        expectedModel.updateFilteredPlaceList(predicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPlaceList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void execute_multipleKeywords_multiplePlacesFound() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PLACES_LISTED_OVERVIEW, 4);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        TagContainsKeywordsPredicate predicate \u003d preparePredicate(\"shoppingMall temple school\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        SearchTagsCommand command \u003d new SearchTagsCommand(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        expectedModel.updateFilteredPlaceList(predicate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BENSON, ELLE, GEORGE), model.getFilteredPlaceList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private TagContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        return new TagContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nivenang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 17,
      "nivenang": 69
    }
  },
  {
    "path": "src/test/java/seedu/travel/logic/commands/SearchYearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nivenang"
        },
        "content": "package seedu.travel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static seedu.travel.commons.core.Messages.MESSAGE_PLACES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.CARL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.DANIEL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.GEORGE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.getTypicalTravelBuddy;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.model.place.YearContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nivenang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nivenang"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SearchYearCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nivenang"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nivenang"
        },
        "content": "public class SearchYearCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTravelBuddy(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalTravelBuddy(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        YearContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                new YearContainsKeywordsPredicate(Collections.singletonList(\"2018\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        YearContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                new YearContainsKeywordsPredicate(Collections.singletonList(\"2013\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        SearchYearCommand searchYearFirstCommand \u003d new SearchYearCommand(firstPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        SearchYearCommand searchYearSecondCommand \u003d new SearchYearCommand(secondPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(searchYearFirstCommand.equals(searchYearFirstCommand));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        SearchYearCommand searchYearFirstCommandCopy \u003d new SearchYearCommand(firstPredicate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(searchYearFirstCommand.equals(searchYearFirstCommandCopy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(searchYearFirstCommand.equals(1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(searchYearFirstCommand.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // different place -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(searchYearFirstCommand.equals(searchYearSecondCommand));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void execute_zeroKeywords_noPlaceFound() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PLACES_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        YearContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        SearchYearCommand command \u003d new SearchYearCommand(predicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        expectedModel.updateFilteredPlaceList(predicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPlaceList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void execute_multipleKeywords_multiplePlacesFound() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PLACES_LISTED_OVERVIEW, 5);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        YearContainsKeywordsPredicate predicate \u003d preparePredicate(\"2016 2017\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        SearchYearCommand command \u003d new SearchYearCommand(predicate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        expectedModel.updateFilteredPlaceList(predicate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BENSON, CARL, DANIEL, GEORGE), model.getFilteredPlaceList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Parses {@code userInput} into a {@code YearContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private YearContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        return new YearContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nivenang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nivenang": 87
    }
  },
  {
    "path": "src/test/java/seedu/travel/logic/commands/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.showPlaceAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalIndexes.INDEX_FIRST_PLACE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalIndexes.INDEX_SECOND_PLACE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalIndexes.INDEX_THIRD_PLACE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.getTypicalTravelBuddy;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTravelBuddy(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalTravelBuddy(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Index lastPlaceIndex \u003d Index.fromOneBased(model.getFilteredPlaceList().size());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PLACE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_PLACE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertExecutionSuccess(lastPlaceIndex);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPlaceList().size() + 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PLACE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        showPlaceAtIndex(model, INDEX_FIRST_PLACE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        showPlaceAtIndex(expectedModel, INDEX_FIRST_PLACE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PLACE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        showPlaceAtIndex(model, INDEX_FIRST_PLACE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        showPlaceAtIndex(expectedModel, INDEX_FIRST_PLACE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_PLACE;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of travel book list"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getTravelBuddy().getPlaceList().size());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PLACE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_PLACE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_PLACE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_PLACE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // different place -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index},"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * and checks that the model\u0027s selected place is set to the place at {@code index} in the filtered place list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_PLACE_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        expectedModel.setSelectedPlace(model.getFilteredPlaceList().get(index.getZeroBased()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 32,
      "PremBagda": 6,
      "-": 70
    }
  },
  {
    "path": "src/test/java/seedu/travel/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.deleteFirstPlace;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.getTypicalTravelBuddy;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalTravelBuddy(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalTravelBuddy(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        deleteFirstPlace(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        deleteFirstPlace(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        deleteFirstPlace(expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        deleteFirstPlace(expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        expectedModel.undoTravelBuddy();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        expectedModel.undoTravelBuddy();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 13,
      "PremBagda": 4,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/travel/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.ADDRESS_DESC_AMK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.ADDRESS_DESC_BEDOK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.COUNTRY_CODE_DESC_AMK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.COUNTRY_CODE_DESC_BEDOK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.DATE_VISITED_DESC_AMK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.DATE_VISITED_DESC_BEDOK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.DESCRIPTION_AMK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.DESCRIPTION_BEDOK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.INVALID_COUNTRY_CODE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.INVALID_DESCRIPTION;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.INVALID_FORMAT_DATE_VISITED_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.INVALID_FUTURE_DATE_VISITED_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.INVALID_RATING_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.NAME_DESC_AMK;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.NAME_DESC_BEDOK;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.RATING_DESC_AMK;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.RATING_DESC_BEDOK;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.TAG_DESC_EWL;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.TAG_DESC_MRT;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_ADDRESS_BEDOK;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_COUNTRY_CODE_BEDOK;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_DATE_VISITED_BEDOK;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BEDOK;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_NAME_BEDOK;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_RATING_BEDOK;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_TAG_EWL;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_TAG_MRT;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.AMK;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.BEDOK;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Address;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.CountryCode;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import seedu.travel.model.place.DateVisited;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Description;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Place;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Rating;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.tag.Tag;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.testutil.PlaceBuilder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        Place expectedPlace \u003d new PlaceBuilder(BEDOK).withTags(VALID_TAG_MRT).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BEDOK + COUNTRY_CODE_DESC_BEDOK"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + DATE_VISITED_DESC_BEDOK + RATING_DESC_BEDOK + DESCRIPTION_BEDOK + ADDRESS_DESC_BEDOK + TAG_DESC_MRT,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                new AddCommand(expectedPlace));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMK + NAME_DESC_BEDOK + COUNTRY_CODE_DESC_BEDOK"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + DATE_VISITED_DESC_BEDOK + RATING_DESC_BEDOK + DESCRIPTION_BEDOK + ADDRESS_DESC_BEDOK + TAG_DESC_MRT,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                new AddCommand(expectedPlace));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // multiple country codes - last country code accepted"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BEDOK + COUNTRY_CODE_DESC_AMK + COUNTRY_CODE_DESC_BEDOK"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + DATE_VISITED_DESC_BEDOK + RATING_DESC_BEDOK + DESCRIPTION_BEDOK"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + ADDRESS_DESC_BEDOK + TAG_DESC_MRT, new AddCommand(expectedPlace));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // multiple date visited - last date visited accepted"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BEDOK + COUNTRY_CODE_DESC_BEDOK + DATE_VISITED_DESC_AMK"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + DATE_VISITED_DESC_BEDOK + RATING_DESC_BEDOK + DESCRIPTION_BEDOK"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + ADDRESS_DESC_BEDOK + TAG_DESC_MRT, new AddCommand(expectedPlace));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // multiple ratings - last rating accepted"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BEDOK + COUNTRY_CODE_DESC_BEDOK + DATE_VISITED_DESC_BEDOK"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + RATING_DESC_AMK + RATING_DESC_BEDOK + DESCRIPTION_BEDOK"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                + ADDRESS_DESC_BEDOK + TAG_DESC_MRT, new AddCommand(expectedPlace));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // multiple descriptions - last description accepted"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BEDOK + COUNTRY_CODE_DESC_BEDOK + DATE_VISITED_DESC_BEDOK"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + RATING_DESC_BEDOK + DESCRIPTION_AMK + DESCRIPTION_BEDOK"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                + ADDRESS_DESC_BEDOK + TAG_DESC_MRT, new AddCommand(expectedPlace));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BEDOK + COUNTRY_CODE_DESC_BEDOK + DATE_VISITED_DESC_BEDOK"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + RATING_DESC_BEDOK + DESCRIPTION_BEDOK + ADDRESS_DESC_AMK"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                + ADDRESS_DESC_BEDOK + TAG_DESC_MRT, new AddCommand(expectedPlace));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        Place expectedPlaceMultipleTags \u003d new PlaceBuilder(BEDOK).withTags(VALID_TAG_MRT, VALID_TAG_EWL)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BEDOK + COUNTRY_CODE_DESC_BEDOK + DATE_VISITED_DESC_BEDOK"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + RATING_DESC_BEDOK + DESCRIPTION_BEDOK + ADDRESS_DESC_BEDOK"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                + TAG_DESC_EWL + TAG_DESC_MRT, new AddCommand(expectedPlaceMultipleTags));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        Place expectedPlace \u003d new PlaceBuilder(AMK).withTags().build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMK + COUNTRY_CODE_DESC_AMK + DATE_VISITED_DESC_AMK"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + RATING_DESC_AMK + DESCRIPTION_AMK + ADDRESS_DESC_AMK, new AddCommand(expectedPlace));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BEDOK + COUNTRY_CODE_DESC_BEDOK + DATE_VISITED_DESC_BEDOK"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + RATING_DESC_BEDOK + DESCRIPTION_BEDOK + ADDRESS_DESC_BEDOK, expectedMessage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // missing country code prefix"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BEDOK + VALID_COUNTRY_CODE_BEDOK + DATE_VISITED_DESC_BEDOK"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + RATING_DESC_BEDOK + DESCRIPTION_BEDOK + ADDRESS_DESC_BEDOK, expectedMessage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // missing date visited prefix"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            NAME_DESC_BEDOK + COUNTRY_CODE_DESC_BEDOK + VALID_DATE_VISITED_BEDOK + RATING_DESC_BEDOK"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + DESCRIPTION_BEDOK + ADDRESS_DESC_BEDOK, expectedMessage);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // missing rating prefix"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BEDOK + COUNTRY_CODE_DESC_BEDOK + DATE_VISITED_DESC_BEDOK"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + VALID_RATING_BEDOK + DESCRIPTION_BEDOK + ADDRESS_DESC_BEDOK, expectedMessage);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // missing description prefix"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            NAME_DESC_BEDOK + COUNTRY_CODE_DESC_BEDOK + DATE_VISITED_DESC_BEDOK + RATING_DESC_BEDOK"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + VALID_DESCRIPTION_BEDOK + ADDRESS_DESC_BEDOK, expectedMessage);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BEDOK + COUNTRY_CODE_DESC_BEDOK + DATE_VISITED_DESC_BEDOK"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + RATING_DESC_BEDOK + DESCRIPTION_BEDOK + VALID_ADDRESS_BEDOK, expectedMessage);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BEDOK + VALID_COUNTRY_CODE_BEDOK + VALID_DATE_VISITED_BEDOK"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            + VALID_RATING_BEDOK + VALID_DESCRIPTION_BEDOK + VALID_ADDRESS_BEDOK, expectedMessage);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + COUNTRY_CODE_DESC_BEDOK + DATE_VISITED_DESC_BEDOK"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + RATING_DESC_BEDOK + DESCRIPTION_BEDOK"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                + ADDRESS_DESC_BEDOK + TAG_DESC_EWL + TAG_DESC_MRT, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // invalid country code"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BEDOK + INVALID_COUNTRY_CODE_DESC + DATE_VISITED_DESC_BEDOK"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + RATING_DESC_BEDOK + DESCRIPTION_BEDOK"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + ADDRESS_DESC_BEDOK + TAG_DESC_EWL + TAG_DESC_MRT, CountryCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // incorrect format of date visited"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BEDOK + COUNTRY_CODE_DESC_BEDOK + INVALID_FORMAT_DATE_VISITED_DESC"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + RATING_DESC_BEDOK + DESCRIPTION_BEDOK"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + ADDRESS_DESC_BEDOK + TAG_DESC_EWL + TAG_DESC_MRT, DateVisited.MESSAGE_INCORRECT_FORMAT);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // future date visited added"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BEDOK + COUNTRY_CODE_DESC_BEDOK + INVALID_FUTURE_DATE_VISITED_DESC"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + RATING_DESC_BEDOK + DESCRIPTION_BEDOK"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + ADDRESS_DESC_BEDOK + TAG_DESC_EWL + TAG_DESC_MRT, DateVisited.MESSAGE_FUTURE_DATE_ADDED);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // invalid rating"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BEDOK + COUNTRY_CODE_DESC_BEDOK + DATE_VISITED_DESC_BEDOK"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + INVALID_RATING_DESC + DESCRIPTION_BEDOK"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                + ADDRESS_DESC_BEDOK + TAG_DESC_EWL + TAG_DESC_MRT, Rating.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BEDOK + COUNTRY_CODE_DESC_BEDOK + DATE_VISITED_DESC_BEDOK"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + RATING_DESC_BEDOK + INVALID_DESCRIPTION"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                + ADDRESS_DESC_BEDOK + TAG_DESC_EWL + TAG_DESC_MRT, Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BEDOK + COUNTRY_CODE_DESC_BEDOK + DATE_VISITED_DESC_BEDOK"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + RATING_DESC_BEDOK + DESCRIPTION_BEDOK"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                + INVALID_ADDRESS_DESC + TAG_DESC_EWL + TAG_DESC_MRT, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BEDOK + COUNTRY_CODE_DESC_BEDOK + DATE_VISITED_DESC_BEDOK"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + RATING_DESC_BEDOK + DESCRIPTION_BEDOK"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                + ADDRESS_DESC_BEDOK + INVALID_TAG_DESC + VALID_TAG_MRT, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + COUNTRY_CODE_DESC_BEDOK + DATE_VISITED_DESC_BEDOK"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + RATING_DESC_BEDOK + DESCRIPTION_BEDOK"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                + INVALID_ADDRESS_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BEDOK + RATING_DESC_BEDOK"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + COUNTRY_CODE_DESC_BEDOK + DATE_VISITED_DESC_BEDOK + DESCRIPTION_BEDOK + ADDRESS_DESC_BEDOK"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + TAG_DESC_EWL + TAG_DESC_MRT,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 45,
      "PremBagda": 87,
      "nivenang": 16,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/travel/logic/parser/ArgumentTokenizerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/seedu/travel/logic/parser/CommandParserTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/travel/logic/parser/DeleteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalIndexes.INDEX_FIRST_PLACE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PLACE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 7,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/travel/logic/parser/DeleteMultipleCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalIndexes.INDEX_FIRST_PLACE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalIndexes.INDEX_FOURTH_PLACE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.DeleteMultipleCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nivenang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nivenang"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nivenang"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nivenang"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nivenang"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nivenang"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nivenang"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nivenang"
        },
        "content": "public class DeleteMultipleCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private DeleteMultipleCommandParser parser \u003d new DeleteMultipleCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertParseSuccess(parser, \"1 4\", new DeleteMultipleCommand(INDEX_FIRST_PLACE, INDEX_FOURTH_PLACE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertParseFailure(parser, \"a b\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteMultipleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nivenang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 8,
      "nivenang": 26
    }
  },
  {
    "path": "src/test/java/seedu/travel/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.ADDRESS_DESC_AMK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.ADDRESS_DESC_BEDOK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.COUNTRY_CODE_DESC_AMK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.COUNTRY_CODE_DESC_BEDOK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.DATE_VISITED_DESC_AMK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.DATE_VISITED_DESC_BEDOK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.DESCRIPTION_AMK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.DESCRIPTION_BEDOK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.INVALID_COUNTRY_CODE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.INVALID_DESCRIPTION;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.INVALID_FORMAT_DATE_VISITED_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.INVALID_FUTURE_DATE_VISITED_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.INVALID_RATING_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.NAME_DESC_AMK;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.RATING_DESC_AMK;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.RATING_DESC_BEDOK;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.TAG_DESC_EWL;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.TAG_DESC_MRT;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_ADDRESS_AMK;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_ADDRESS_BEDOK;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_COUNTRY_CODE_AMK;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_COUNTRY_CODE_BEDOK;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_DATE_VISITED_AMK;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_DATE_VISITED_BEDOK;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_DESCRIPTION_AMK;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BEDOK;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_NAME_AMK;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_RATING_AMK;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_RATING_BEDOK;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_TAG_EWL;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_TAG_MRT;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalIndexes.INDEX_FIRST_PLACE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalIndexes.INDEX_SECOND_PLACE;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalIndexes.INDEX_THIRD_PLACE;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.index.Index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.EditCommand.EditPlaceDescriptor;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Address;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.CountryCode;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import seedu.travel.model.place.DateVisited;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Description;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Name;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Rating;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.tag.Tag;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.testutil.EditPlaceDescriptorBuilder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMK, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMK, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMK, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertParseFailure(parser, \"1\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertParseFailure(parser, \"1\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            + INVALID_COUNTRY_CODE_DESC, CountryCode.MESSAGE_CONSTRAINTS); // invalid country code"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertParseFailure(parser, \"1\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            + INVALID_FORMAT_DATE_VISITED_DESC, DateVisited.MESSAGE_INCORRECT_FORMAT); // invalid date format"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_RATING_DESC, Rating.MESSAGE_CONSTRAINTS); // invalid rating"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DESCRIPTION,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                Description.MESSAGE_CONSTRAINTS); // invalid description"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                Address.MESSAGE_CONSTRAINTS); // invalid travel"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // invalid country code followed by valid description"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_COUNTRY_CODE_DESC"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            + DESCRIPTION_AMK, CountryCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // invalid date visited followed by valid description"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_FORMAT_DATE_VISITED_DESC"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            + DESCRIPTION_AMK, DateVisited.MESSAGE_INCORRECT_FORMAT);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // invalid rating followed by valid description"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_RATING_DESC + DESCRIPTION_AMK, Rating.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // valid country code followed by invalid country code."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertParseFailure(parser, \"1\" + COUNTRY_CODE_DESC_BEDOK"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            + INVALID_COUNTRY_CODE_DESC, CountryCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // valid date visited followed by invalid date visited."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertParseFailure(parser, \"1\" + DATE_VISITED_DESC_BEDOK"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            + INVALID_FUTURE_DATE_VISITED_DESC, DateVisited.MESSAGE_FUTURE_DATE_ADDED);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // valid rating followed by invalid rating. The test case for invalid rating followed by valid rating"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertParseFailure(parser, \"1\" + RATING_DESC_BEDOK + INVALID_RATING_DESC, Rating.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Place} being edited,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_MRT"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                + TAG_DESC_EWL + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_MRT"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                + TAG_EMPTY + TAG_DESC_EWL, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_MRT"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                + TAG_DESC_EWL, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_COUNTRY_CODE_DESC"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            + INVALID_FUTURE_DATE_VISITED_DESC + INVALID_DESCRIPTION + VALID_ADDRESS_AMK + VALID_RATING_AMK,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PLACE;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + RATING_DESC_AMK + COUNTRY_CODE_DESC_AMK"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + DATE_VISITED_DESC_AMK + TAG_DESC_EWL + DESCRIPTION_AMK + ADDRESS_DESC_AMK"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + NAME_DESC_AMK + TAG_DESC_MRT;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        EditPlaceDescriptor descriptor \u003d new EditPlaceDescriptorBuilder().withName(VALID_NAME_AMK)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                .withCountryCode(VALID_COUNTRY_CODE_AMK)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                .withDateVisited(VALID_DATE_VISITED_AMK)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                .withRating(VALID_RATING_AMK).withDescription(VALID_DESCRIPTION_AMK).withAddress(VALID_ADDRESS_AMK)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                .withTags(VALID_TAG_EWL, VALID_TAG_MRT).build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PLACE;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + COUNTRY_CODE_DESC_AMK + RATING_DESC_BEDOK + DESCRIPTION_AMK;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        EditPlaceDescriptor descriptor \u003d new EditPlaceDescriptorBuilder().withCountryCode(VALID_COUNTRY_CODE_AMK)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                .withRating(VALID_RATING_BEDOK)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_AMK).build();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PLACE;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMK;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        EditPlaceDescriptor descriptor \u003d new EditPlaceDescriptorBuilder().withName(VALID_NAME_AMK).build();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // Country Code"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // userInput \u003d targetIndex.getOneBased() + COUNTRY_CODE_DESC_AMK;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // descriptor \u003d new EditPlaceDescriptorBuilder().withCountryCode(VALID_COUNTRY_CODE_AMK).build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // Date visited"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // userInput \u003d targetIndex.getOneBased() + DATE_VISITED_DESC_AMK;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // descriptor \u003d new EditPlaceDescriptorBuilder().withDateVisited(VALID_DATE_VISITED_AMK).build();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // rating"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + RATING_DESC_AMK;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        descriptor \u003d new EditPlaceDescriptorBuilder().withRating(VALID_RATING_AMK).build();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // description"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DESCRIPTION_AMK;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        descriptor \u003d new EditPlaceDescriptorBuilder().withDescription(VALID_DESCRIPTION_AMK).build();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMK;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        descriptor \u003d new EditPlaceDescriptorBuilder().withAddress(VALID_ADDRESS_AMK).build();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_MRT;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        descriptor \u003d new EditPlaceDescriptorBuilder().withTags(VALID_TAG_MRT).build();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PLACE;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        String userInput \u003d"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            targetIndex.getOneBased() + COUNTRY_CODE_DESC_AMK + RATING_DESC_AMK + ADDRESS_DESC_AMK + DESCRIPTION_AMK"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + TAG_DESC_MRT + RATING_DESC_AMK + DATE_VISITED_DESC_AMK + ADDRESS_DESC_BEDOK + COUNTRY_CODE_DESC_BEDOK"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + DESCRIPTION_AMK + TAG_DESC_MRT + RATING_DESC_BEDOK + ADDRESS_DESC_BEDOK + DESCRIPTION_BEDOK"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + DATE_VISITED_DESC_BEDOK + TAG_DESC_EWL;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        EditPlaceDescriptor descriptor \u003d new EditPlaceDescriptorBuilder().withCountryCode(VALID_COUNTRY_CODE_BEDOK)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                .withDateVisited(VALID_DATE_VISITED_BEDOK)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                .withRating(VALID_RATING_BEDOK)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_BEDOK).withAddress(VALID_ADDRESS_BEDOK)"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                .withTags(VALID_TAG_MRT, VALID_TAG_EWL).build();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PLACE;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_RATING_DESC + RATING_DESC_BEDOK;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        EditPlaceDescriptor descriptor \u003d new EditPlaceDescriptorBuilder().withRating(VALID_RATING_BEDOK).build();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + COUNTRY_CODE_DESC_BEDOK + DESCRIPTION_BEDOK"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + INVALID_RATING_DESC + ADDRESS_DESC_BEDOK + DATE_VISITED_DESC_BEDOK + RATING_DESC_BEDOK;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        descriptor \u003d new EditPlaceDescriptorBuilder().withRating(VALID_RATING_BEDOK)"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                .withCountryCode(VALID_COUNTRY_CODE_BEDOK)"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                .withDateVisited(VALID_DATE_VISITED_BEDOK)"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_BEDOK)"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                .withAddress(VALID_ADDRESS_BEDOK).build();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PLACE;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        EditPlaceDescriptor descriptor \u003d new EditPlaceDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 55,
      "PremBagda": 71,
      "nivenang": 36,
      "-": 111
    }
  },
  {
    "path": "src/test/java/seedu/travel/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalIndexes.INDEX_FIRST_PLACE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.model.place.CountryCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.model.place.DateVisited;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Rating;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.testutil.Assert;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private static final String INVALID_COUNTRY_CODE \u003d \"SGXX\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private static final String INVALID_RATING \u003d \"65\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \"@I love this place\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private static final String INVALID_DATE_VISITED_FORMAT \u003d \"5252345\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private static final String INVALID_DATE_VISITED_YEAR \u003d \"02/11/1819\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private static final String VALID_COUNTRY_CODE \u003d \"SGP\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private static final String VALID_RATING \u003d \"5\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d \"I love this place\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private static final String VALID_DATE_VISITED \u003d \"06/09/2018\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertEquals(INDEX_FIRST_PLACE, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertEquals(INDEX_FIRST_PLACE, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void parseCountryCode_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCountryCode((String) null));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void parseCountryCode_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseCountryCode(INVALID_COUNTRY_CODE));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void parseCountryCode_validValueWithoutWhitespace_returnsCountryCode() throws Exception {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        CountryCode expectedCountryCode \u003d new CountryCode(VALID_COUNTRY_CODE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertEquals(expectedCountryCode, ParserUtil.parseCountryCode(VALID_COUNTRY_CODE));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void parseCountryCode_validValueWithWhitespace_returnsTrimmedCountryCode() throws Exception {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        String countryCodeWithWhitespace \u003d WHITESPACE + VALID_COUNTRY_CODE + WHITESPACE;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        CountryCode expectedCountryCode \u003d new CountryCode(VALID_COUNTRY_CODE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertEquals(expectedCountryCode, ParserUtil.parseCountryCode(countryCodeWithWhitespace));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void parseRating_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseRating((String) null));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void parseRating_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseRating(INVALID_RATING));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void parseRating_validValueWithoutWhitespace_returnsRating() throws Exception {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        Rating expectedRating \u003d new Rating(VALID_RATING);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertEquals(expectedRating, ParserUtil.parseRating(VALID_RATING));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void parseRating_validValueWithWhitespace_returnsTrimmedRating() throws Exception {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        String ratingWithWhitespace \u003d WHITESPACE + VALID_RATING + WHITESPACE;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        Rating expectedRating \u003d new Rating(VALID_RATING);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertEquals(expectedRating, ParserUtil.parseRating(ratingWithWhitespace));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void parseDateVisited_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDateVisited((String) null));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void parseDateVisited_invalidDateFormat_throwsParseException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseDateVisited(INVALID_DATE_VISITED_FORMAT));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void parseDateVisited_invalidDateYear_throwsParseException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseDateVisited(INVALID_DATE_VISITED_YEAR));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void parseDateVisited_validValueWithoutWhitespace_returnsRating() throws Exception {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        DateVisited expectedDateVisited \u003d new DateVisited(VALID_DATE_VISITED);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertEquals(expectedDateVisited, ParserUtil.parseDateVisited(VALID_DATE_VISITED));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void parseDateVisited_validValueWithWhitespace_returnsTrimmedDateVisited() throws Exception {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        String dateVisitedWithWhitespace \u003d WHITESPACE + VALID_DATE_VISITED + WHITESPACE;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        DateVisited expectedDateVisited \u003d new DateVisited(VALID_DATE_VISITED);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertEquals(expectedDateVisited, ParserUtil.parseDateVisited(dateVisitedWithWhitespace));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void parseDescription_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDescription((String) null));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void parseDescription_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseDescription(INVALID_DESCRIPTION));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void parseDescription_validValueWithoutWhitespace_returnsDescription() throws Exception {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(VALID_DESCRIPTION));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void parseDescription_validValueWithWhitespace_returnsTrimmedDescription() throws Exception {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        String descriptionWithWhitespace \u003d WHITESPACE + VALID_DESCRIPTION + WHITESPACE;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(descriptionWithWhitespace));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 25,
      "nivenang": 59,
      "-": 182
    }
  },
  {
    "path": "src/test/java/seedu/travel/logic/parser/SearchCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nivenang"
        },
        "content": "public class SearchCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private SearchCommandParser parser \u003d new SearchCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                SearchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void parse_validArgs_returnsSearchCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        SearchCommand expectedSearchCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                new SearchCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"AMK\", \"Bedok\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertParseSuccess(parser, \"AMK Bedok\", expectedSearchCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertParseSuccess(parser, \" \\n AMK \\n \\t Bedok  \\t\", expectedSearchCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 6,
      "nivenang": 9,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/travel/logic/parser/SearchCountryCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nivenang"
        },
        "content": "package seedu.travel.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static seedu.travel.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static seedu.travel.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static seedu.travel.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.logic.commands.SearchCountryCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.model.place.CountryCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.model.place.CountryCodeContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nivenang"
        },
        "content": "public class SearchCountryCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private SearchCountryCommandParser parser \u003d new SearchCountryCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                SearchCountryCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void parse_invalidArg_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertParseFailure(parser, \"SGXX JP\", String.format(CountryCode.MESSAGE_CONSTRAINTS,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                SearchCountryCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void parse_validArgs_returnsSearchCountryCommand() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        SearchCountryCommand expectedSearchCountryCommand \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                new SearchCountryCommand(new CountryCodeContainsKeywordsPredicate(Arrays.asList(\"SGP\", \"JPN\")));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertParseSuccess(parser, \"SGP JPN\", expectedSearchCountryCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertParseSuccess(parser, \" \\n SGP \\n \\t JPN  \\t\", expectedSearchCountryCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nivenang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nivenang": 42
    }
  },
  {
    "path": "src/test/java/seedu/travel/logic/parser/SearchRatingCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.SearchRatingCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.model.place.Rating;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.RatingContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nivenang"
        },
        "content": "public class SearchRatingCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private SearchRatingCommandParser parser \u003d new SearchRatingCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                SearchRatingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void parse_invalidArg_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertParseFailure(parser, \"7 5\", String.format(Rating.MESSAGE_CONSTRAINTS,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                SearchRatingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void parse_validArgs_returnsSearchRatingCommand() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        SearchRatingCommand expectedSearchRatingCommand \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                new SearchRatingCommand(new RatingContainsKeywordsPredicate(Arrays.asList(\"4\", \"5\")));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertParseSuccess(parser, \"4 5\", expectedSearchRatingCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertParseSuccess(parser, \" \\n 4 \\n \\t 5  \\t\", expectedSearchRatingCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nivenang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 6,
      "nivenang": 36
    }
  },
  {
    "path": "src/test/java/seedu/travel/logic/parser/SearchTagsCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.SearchTagsCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nivenang"
        },
        "content": "public class SearchTagsCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private SearchTagsCommandParser parser \u003d new SearchTagsCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                SearchTagsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void parse_validArgs_returnsSearchCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        SearchTagsCommand expectedSearchTagsCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                new SearchTagsCommand(new TagContainsKeywordsPredicate(Arrays.asList(\"school\", \"temple\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertParseSuccess(parser, \"school temple\", expectedSearchTagsCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertParseSuccess(parser, \" \\n school \\n \\t temple  \\t\", expectedSearchTagsCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nivenang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 6,
      "nivenang": 29
    }
  },
  {
    "path": "src/test/java/seedu/travel/logic/parser/SearchYearCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nivenang"
        },
        "content": "package seedu.travel.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static seedu.travel.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static seedu.travel.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static seedu.travel.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.logic.commands.SearchYearCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.model.place.DateVisited;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.model.place.YearContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nivenang"
        },
        "content": "public class SearchYearCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private SearchYearCommandParser parser \u003d new SearchYearCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                SearchYearCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void parse_invalidArg_throwsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertParseFailure(parser, \"1819\", String.format(DateVisited.MESSAGE_CONSTRAINTS_SEARCH,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                SearchYearCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertParseFailure(parser, \"2017-2016\", String.format(DateVisited.MESSAGE_CONSTRAINTS_SEARCH,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                SearchYearCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertParseFailure(parser, \"1819-2000\", String.format(DateVisited.MESSAGE_CONSTRAINTS_SEARCH,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                SearchYearCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertParseFailure(parser, \"2000-9999\", String.format(DateVisited.MESSAGE_CONSTRAINTS_SEARCH,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                SearchYearCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void parse_validArgs_returnsSearchYearCommand() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        SearchYearCommand expectedSearchYearCommand \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                new SearchYearCommand(new YearContainsKeywordsPredicate(Arrays.asList(\"2018\", \"2019\")));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertParseSuccess(parser, \"2018 2019\", expectedSearchYearCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertParseSuccess(parser, \" \\n 2018 \\n \\t 2019  \\t\", expectedSearchYearCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void parse_validArgsRange_returnsSearchYearCommand() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        SearchYearCommand expectedSearchYearCommand \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                new SearchYearCommand(new YearContainsKeywordsPredicate(Arrays.asList(\"2016\", \"2017\", \"2018\")));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertParseSuccess(parser, \"2016-2018\", expectedSearchYearCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // leading and trailing whitespaces"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertParseSuccess(parser, \" \\n 2016-2018  \\t\", expectedSearchYearCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void isYearARange_invalidYearRange_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // invalid year range input"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(parser.isYearARange(\"1819-2000\")); // invalid lower bound"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(parser.isYearARange(\"19332-2000\")); // invalid lower bound format"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(parser.isYearARange(\"1999-2999\")); // invalid upper bound"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(parser.isYearARange(\"1999-29999\")); // invalid upper bound format"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(parser.isYearARange(\"1994*2000\")); // invalid format"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(parser.isYearARange(\"2000-1994\")); // upper bound less than lower bound"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void isYearARange_validYearRange_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // valid year range input"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(parser.isYearARange(\"1999-2004\")); // valid arguments"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(parser.isYearARange(\"1900-1910\")); // lower bound boundary case"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(parser.isYearARange(\"2006-2019\")); // upper bound boundary case"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nivenang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nivenang": 80
    }
  },
  {
    "path": "src/test/java/seedu/travel/logic/parser/SelectCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalIndexes.INDEX_FIRST_PLACE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Test scope: similar to {@code DeleteCommandParserTest}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @see DeleteCommandParserTest"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private SelectCommandParser parser \u003d new SelectCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsSelectCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertParseSuccess(parser, \"1\", new SelectCommand(INDEX_FIRST_PLACE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 7,
      "nivenang": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/travel/logic/parser/TravelBuddyParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalIndexes.INDEX_FIRST_PLACE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.EditCommand.EditPlaceDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.logic.commands.SearchCountryCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.SearchRatingCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.SearchTagsCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.logic.commands.SearchYearCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.model.place.CountryCodeContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Place;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.RatingContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.model.place.YearContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.testutil.EditPlaceDescriptorBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.testutil.PlaceBuilder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.testutil.PlaceUtil;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "public class TravelBuddyParserTest {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private final TravelBuddyParser parser \u003d new TravelBuddyParser();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Place place \u003d new PlaceBuilder().build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PlaceUtil.getAddCommand(place));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertEquals(new AddCommand(place), command);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void parseCommand_addAlias() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Place place \u003d new PlaceBuilder().build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(AddCommand.COMMAND_ALIAS"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + \" \" + PlaceUtil.getPlaceDetails(place));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertEquals(new AddCommand(place), command);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void parseCommand_clearAlias() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS) instanceof ClearCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PLACE.getOneBased());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PLACE), command);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void parseCommand_deleteAlias() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                DeleteCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PLACE.getOneBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PLACE), command);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Place place \u003d new PlaceBuilder().build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        EditPlaceDescriptor descriptor \u003d new EditPlaceDescriptorBuilder(place).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                + INDEX_FIRST_PLACE.getOneBased() + \" \" + PlaceUtil.getEditPlaceDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PLACE, descriptor), command);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void parseCommand_editAlias() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Place place \u003d new PlaceBuilder().build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        EditPlaceDescriptor descriptor \u003d new EditPlaceDescriptorBuilder(place).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_ALIAS + \" \""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                + INDEX_FIRST_PLACE.getOneBased() + \" \" + PlaceUtil.getEditPlaceDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PLACE, descriptor), command);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void parseCommand_search() throws Exception {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        SearchCommand command \u003d (SearchCommand) parser.parseCommand(SearchCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertEquals(new SearchCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void parseCommand_searchAlias() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        SearchCommand command \u003d (SearchCommand) parser.parseCommand(SearchCommand.COMMAND_ALIAS"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertEquals(new SearchCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void parseCommand_searchRating() throws Exception {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"1\", \"4\", \"5\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        SearchRatingCommand command \u003d (SearchRatingCommand) parser.parseCommand("
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                SearchRatingCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                        + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertEquals(new SearchRatingCommand(new RatingContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void parseCommand_searchTags() throws Exception {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"school\", \"temple\", \"airport\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        SearchTagsCommand command \u003d (SearchTagsCommand) parser.parseCommand(SearchTagsCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertEquals(new SearchTagsCommand(new TagContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void parseCommand_searchCountry() throws Exception {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"DEU\", \"FRA\", \"ITA\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        SearchCountryCommand command \u003d (SearchCountryCommand) parser.parseCommand("
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                SearchCountryCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                        + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertEquals(new SearchCountryCommand(new CountryCodeContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void parseCommand_searchYear() throws Exception {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"2011\", \"2015\", \"2017\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        SearchYearCommand command \u003d (SearchYearCommand) parser.parseCommand("
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                SearchYearCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                        + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertEquals(new SearchYearCommand(new YearContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void parseCommand_historyAlias() throws Exception {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void parseCommand_listAlias() throws Exception {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS) instanceof ListCommand);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PLACE.getOneBased());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PLACE), command);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void parseCommand_selectAlias() throws Exception {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                SelectCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PLACE.getOneBased());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PLACE), command);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void parseCommand_redoCommandAlias_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS) instanceof RedoCommand);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void parseCommand_undoCommandAlias_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS) instanceof UndoCommand);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 105,
      "PremBagda": 10,
      "nivenang": 43,
      "-": 104
    }
  },
  {
    "path": "src/test/java/seedu/travel/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BEDOK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.model.Model.PREDICATE_SHOW_ALL_PLACES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.BEDOK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.BENSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Place;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.exceptions.PlaceNotFoundException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.testutil.PlaceBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.testutil.TravelBuddyBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertEquals(new TravelBuddy(), new TravelBuddy(modelManager.getTravelBuddy()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertEquals(null, modelManager.getSelectedPlace());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        userPrefs.setTravelBuddyFilePath(Paths.get(\"travel/book/file/path\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        userPrefs.setTravelBuddyFilePath(Paths.get(\"new/travel/book/file/path\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void setTravelBuddyFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        modelManager.setTravelBuddyFilePath(null);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void setTravelBuddyFilePath_validPath_setsTravelBuddyFilePath() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Path path \u003d Paths.get(\"travel/book/file/path\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        modelManager.setTravelBuddyFilePath(path);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertEquals(path, modelManager.getTravelBuddyFilePath());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void hasPlace_nullPlace_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        modelManager.hasPlace(null);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void hasPlace_placeNotInTravelBuddy_returnsFalse() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertFalse(modelManager.hasPlace(ALICE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void hasPlace_placeInTravelBuddy_returnsTrue() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        modelManager.addPlace(ALICE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertTrue(modelManager.hasPlace(ALICE));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void deletePlace_placeIsSelectedAndFirstPlaceInFilteredPlaceList_selectionCleared() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        modelManager.addPlace(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        modelManager.setSelectedPlace(ALICE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        modelManager.deletePlace(ALICE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertEquals(null, modelManager.getSelectedPlace());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void deletePlace_placeIsSelectedAndSecondPlaceInFilteredPlaceList_firstPlaceSelected() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        modelManager.addPlace(ALICE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        modelManager.addPlace(BEDOK);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BEDOK), modelManager.getFilteredPlaceList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        modelManager.setSelectedPlace(BEDOK);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        modelManager.deletePlace(BEDOK);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertEquals(ALICE, modelManager.getSelectedPlace());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void setPlace_placeIsSelected_selectedPlaceUpdated() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        modelManager.addPlace(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        modelManager.setSelectedPlace(ALICE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        Place updatedAlice \u003d new PlaceBuilder(ALICE).withDescription(VALID_DESCRIPTION_BEDOK).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        modelManager.setPlace(ALICE, updatedAlice);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertEquals(updatedAlice, modelManager.getSelectedPlace());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void getFilteredPlaceList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        modelManager.getFilteredPlaceList().remove(0);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void setSelectedPlace_placeNotInFilteredPlaceList_throwsPlaceNotFoundException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        thrown.expect(PlaceNotFoundException.class);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        modelManager.setSelectedPlace(ALICE);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void setSelectedPlace_placeInFilteredPlaceList_setsSelectedPlace() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        modelManager.addPlace(ALICE);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertEquals(Collections.singletonList(ALICE), modelManager.getFilteredPlaceList());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        modelManager.setSelectedPlace(ALICE);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertEquals(ALICE, modelManager.getSelectedPlace());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        TravelBuddy travelBuddy \u003d new TravelBuddyBuilder().withPlace(ALICE).withPlace(BENSON).build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        TravelBuddy differentTravelBuddy \u003d new TravelBuddy();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        modelManager \u003d new ModelManager(travelBuddy, userPrefs);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(travelBuddy, userPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // different travelBuddy -\u003e returns false"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentTravelBuddy, userPrefs)));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        modelManager.updateFilteredPlaceList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(travelBuddy, userPrefs)));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        modelManager.updateFilteredPlaceList(PREDICATE_SHOW_ALL_PLACES);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        differentUserPrefs.setTravelBuddyFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(travelBuddy, differentUserPrefs)));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 33,
      "PremBagda": 30,
      "nivenang": 5,
      "-": 120
    }
  },
  {
    "path": "src/test/java/seedu/travel/model/TravelBuddyTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_ADDRESS_BEDOK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_TAG_EWL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.getTypicalTravelBuddy;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Place;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.exceptions.DuplicatePlaceException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.testutil.PlaceBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "public class TravelBuddyTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private final TravelBuddy travelBuddy \u003d new TravelBuddy();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertEquals(Collections.emptyList(), travelBuddy.getPlaceList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        travelBuddy.resetData(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void resetData_withValidReadOnlyTravelBuddy_replacesData() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        TravelBuddy newData \u003d getTypicalTravelBuddy();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        travelBuddy.resetData(newData);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertEquals(newData, travelBuddy);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void resetData_withDuplicatePlaces_throwsDuplicatePlaceException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // Two places with the same identity fields"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        Place editedAlice \u003d new PlaceBuilder(ALICE).withAddress(VALID_ADDRESS_BEDOK).withTags(VALID_TAG_EWL)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        List\u003cPlace\u003e newPlaces \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        TravelBuddyStub newData \u003d new TravelBuddyStub(newPlaces);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        thrown.expect(DuplicatePlaceException.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        travelBuddy.resetData(newData);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void hasPlace_nullPlace_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        travelBuddy.hasPlace(null);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void hasPlace_placeNotInTravelBuddy_returnsFalse() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertFalse(travelBuddy.hasPlace(ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void hasPlace_placeInTravelBuddy_returnsTrue() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        travelBuddy.addPlace(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertTrue(travelBuddy.hasPlace(ALICE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void hasPlace_placeWithSameIdentityFieldsInTravelBuddy_returnsTrue() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        travelBuddy.addPlace(ALICE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        Place editedAlice \u003d new PlaceBuilder(ALICE).withAddress(VALID_ADDRESS_BEDOK).withTags(VALID_TAG_EWL)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertTrue(travelBuddy.hasPlace(editedAlice));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void getPlaceList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        travelBuddy.getPlaceList().remove(0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener_withInvalidationListener_listenerAdded() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        travelBuddy.addListener(listener);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        travelBuddy.addPlace(ALICE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, counter.get());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener_withInvalidationListener_listenerRemoved() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        travelBuddy.addListener(listener);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        travelBuddy.removeListener(listener);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        travelBuddy.addPlace(ALICE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, counter.get());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * A stub ReadOnlyTravelBuddy whose places list can violate interface constraints."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private static class TravelBuddyStub implements ReadOnlyTravelBuddy {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        private final ObservableList\u003cPlace\u003e places \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        TravelBuddyStub(Collection\u003cPlace\u003e places) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            this.places.setAll(places);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        public ObservableList\u003cPlace\u003e getPlaceList() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            return places;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 36,
      "PremBagda": 10,
      "nivenang": 2,
      "-": 93
    }
  },
  {
    "path": "src/test/java/seedu/travel/model/UserPrefsTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void setTravelBuddyFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPrefs.setTravelBuddyFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 4,
      "-": 17
    }
  },
  {
    "path": "src/test/java/seedu/travel/model/VersionedTravelBuddyTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.AMK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.BEDOK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.testutil.TravelBuddyBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "public class VersionedTravelBuddyTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private final ReadOnlyTravelBuddy travelBuddyAtAmk \u003d new TravelBuddyBuilder().withPlace(AMK).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private final ReadOnlyTravelBuddy travelBuddyAtBedok \u003d new TravelBuddyBuilder().withPlace(BEDOK).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private final ReadOnlyTravelBuddy travelBuddyAtCarl \u003d new TravelBuddyBuilder().withPlace(CARL).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private final ReadOnlyTravelBuddy emptyTravelBuddy \u003d new TravelBuddyBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void commit_singleTravelBuddy_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        VersionedTravelBuddy versionedTravelBuddy \u003d prepareTravelBuddyList(emptyTravelBuddy);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        versionedTravelBuddy.commit();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertTravelBuddyListStatus(versionedTravelBuddy,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                Collections.singletonList(emptyTravelBuddy),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                emptyTravelBuddy,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void commit_multipleTravelBuddyPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        VersionedTravelBuddy versionedTravelBuddy \u003d prepareTravelBuddyList("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                emptyTravelBuddy, travelBuddyAtAmk, travelBuddyAtBedok);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        versionedTravelBuddy.commit();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertTravelBuddyListStatus(versionedTravelBuddy,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                Arrays.asList(emptyTravelBuddy, travelBuddyAtAmk, travelBuddyAtBedok),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                travelBuddyAtBedok,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void commit_multipleTravelBuddyPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        VersionedTravelBuddy versionedTravelBuddy \u003d prepareTravelBuddyList("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                emptyTravelBuddy, travelBuddyAtAmk, travelBuddyAtBedok);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTravelBuddy, 2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        versionedTravelBuddy.commit();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertTravelBuddyListStatus(versionedTravelBuddy,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                Collections.singletonList(emptyTravelBuddy),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                emptyTravelBuddy,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void canUndo_multipleTravelBuddyPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        VersionedTravelBuddy versionedTravelBuddy \u003d prepareTravelBuddyList("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                emptyTravelBuddy, travelBuddyAtAmk, travelBuddyAtBedok);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertTrue(versionedTravelBuddy.canUndo());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void canUndo_multipleTravelBuddyPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        VersionedTravelBuddy versionedTravelBuddy \u003d prepareTravelBuddyList("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                emptyTravelBuddy, travelBuddyAtAmk, travelBuddyAtBedok);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTravelBuddy, 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertTrue(versionedTravelBuddy.canUndo());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void canUndo_singleTravelBuddy_returnsFalse() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        VersionedTravelBuddy versionedTravelBuddy \u003d prepareTravelBuddyList(emptyTravelBuddy);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertFalse(versionedTravelBuddy.canUndo());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void canUndo_multipleTravelBuddyPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        VersionedTravelBuddy versionedTravelBuddy \u003d prepareTravelBuddyList("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                emptyTravelBuddy, travelBuddyAtAmk, travelBuddyAtBedok);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTravelBuddy, 2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertFalse(versionedTravelBuddy.canUndo());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void canRedo_multipleTravelBuddyPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        VersionedTravelBuddy versionedTravelBuddy \u003d prepareTravelBuddyList("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                emptyTravelBuddy, travelBuddyAtAmk, travelBuddyAtBedok);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTravelBuddy, 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertTrue(versionedTravelBuddy.canRedo());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void canRedo_multipleTravelBuddyPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        VersionedTravelBuddy versionedTravelBuddy \u003d prepareTravelBuddyList("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                emptyTravelBuddy, travelBuddyAtAmk, travelBuddyAtBedok);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTravelBuddy, 2);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertTrue(versionedTravelBuddy.canRedo());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void canRedo_singleTravelBuddy_returnsFalse() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        VersionedTravelBuddy versionedTravelBuddy \u003d prepareTravelBuddyList(emptyTravelBuddy);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertFalse(versionedTravelBuddy.canRedo());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void canRedo_multipleTravelBuddyPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        VersionedTravelBuddy versionedTravelBuddy \u003d prepareTravelBuddyList("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                emptyTravelBuddy, travelBuddyAtAmk, travelBuddyAtBedok);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertFalse(versionedTravelBuddy.canRedo());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void undo_multipleTravelBuddyPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        VersionedTravelBuddy versionedTravelBuddy \u003d prepareTravelBuddyList("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                emptyTravelBuddy, travelBuddyAtAmk, travelBuddyAtBedok);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        versionedTravelBuddy.undo();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertTravelBuddyListStatus(versionedTravelBuddy,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                Collections.singletonList(emptyTravelBuddy),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                travelBuddyAtAmk,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                Collections.singletonList(travelBuddyAtBedok));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void undo_multipleTravelBuddyPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        VersionedTravelBuddy versionedTravelBuddy \u003d prepareTravelBuddyList("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                emptyTravelBuddy, travelBuddyAtAmk, travelBuddyAtBedok);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTravelBuddy, 1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        versionedTravelBuddy.undo();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertTravelBuddyListStatus(versionedTravelBuddy,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                emptyTravelBuddy,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                Arrays.asList(travelBuddyAtAmk, travelBuddyAtBedok));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void undo_singleTravelBuddy_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        VersionedTravelBuddy versionedTravelBuddy \u003d prepareTravelBuddyList(emptyTravelBuddy);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertThrows(VersionedTravelBuddy.NoUndoableStateException.class, versionedTravelBuddy::undo);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void undo_multipleTravelBuddyPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        VersionedTravelBuddy versionedTravelBuddy \u003d prepareTravelBuddyList("
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                emptyTravelBuddy, travelBuddyAtAmk, travelBuddyAtBedok);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTravelBuddy, 2);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertThrows(VersionedTravelBuddy.NoUndoableStateException.class, versionedTravelBuddy::undo);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void redo_multipleTravelBuddyPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        VersionedTravelBuddy versionedTravelBuddy \u003d prepareTravelBuddyList("
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                emptyTravelBuddy, travelBuddyAtAmk, travelBuddyAtBedok);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTravelBuddy, 1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        versionedTravelBuddy.redo();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertTravelBuddyListStatus(versionedTravelBuddy,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                Arrays.asList(emptyTravelBuddy, travelBuddyAtAmk),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                travelBuddyAtBedok,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void redo_multipleTravelBuddyPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        VersionedTravelBuddy versionedTravelBuddy \u003d prepareTravelBuddyList("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                emptyTravelBuddy, travelBuddyAtAmk, travelBuddyAtBedok);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTravelBuddy, 2);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        versionedTravelBuddy.redo();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertTravelBuddyListStatus(versionedTravelBuddy,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                Collections.singletonList(emptyTravelBuddy),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                travelBuddyAtAmk,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                Collections.singletonList(travelBuddyAtBedok));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void redo_singleTravelBuddy_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        VersionedTravelBuddy versionedTravelBuddy \u003d prepareTravelBuddyList(emptyTravelBuddy);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertThrows(VersionedTravelBuddy.NoRedoableStateException.class, versionedTravelBuddy::redo);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void redo_multipleTravelBuddyPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        VersionedTravelBuddy versionedTravelBuddy \u003d prepareTravelBuddyList("
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                emptyTravelBuddy, travelBuddyAtAmk, travelBuddyAtBedok);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertThrows(VersionedTravelBuddy.NoRedoableStateException.class, versionedTravelBuddy::redo);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        VersionedTravelBuddy versionedTravelBuddy \u003d prepareTravelBuddyList(travelBuddyAtAmk, travelBuddyAtBedok);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        VersionedTravelBuddy copy \u003d prepareTravelBuddyList(travelBuddyAtAmk, travelBuddyAtBedok);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertTrue(versionedTravelBuddy.equals(copy));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertTrue(versionedTravelBuddy.equals(versionedTravelBuddy));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertFalse(versionedTravelBuddy.equals(null));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertFalse(versionedTravelBuddy.equals(1));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        VersionedTravelBuddy differentTravelBuddyList \u003d prepareTravelBuddyList(travelBuddyAtBedok,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                travelBuddyAtCarl);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertFalse(versionedTravelBuddy.equals(differentTravelBuddyList));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        VersionedTravelBuddy differentCurrentStatePointer \u003d prepareTravelBuddyList("
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                travelBuddyAtAmk, travelBuddyAtBedok);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTravelBuddy, 1);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertFalse(versionedTravelBuddy.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Asserts that {@code versionedTravelBuddy} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * states before {@code versionedTravelBuddy#currentStatePointer} is equal to {@code expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * and states after {@code versionedTravelBuddy#currentStatePointer} is equal to {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private void assertTravelBuddyListStatus(VersionedTravelBuddy versionedTravelBuddy,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                                             List\u003cReadOnlyTravelBuddy\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                                             ReadOnlyTravelBuddy expectedCurrentState,"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                                             List\u003cReadOnlyTravelBuddy\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertEquals(new TravelBuddy(versionedTravelBuddy), expectedCurrentState);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        while (versionedTravelBuddy.canUndo()) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            versionedTravelBuddy.undo();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        for (ReadOnlyTravelBuddy expectedTravelBuddy : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            assertEquals(expectedTravelBuddy, new TravelBuddy(versionedTravelBuddy));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            versionedTravelBuddy.redo();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        for (ReadOnlyTravelBuddy expectedTravelBuddy : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            versionedTravelBuddy.redo();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            assertEquals(expectedTravelBuddy, new TravelBuddy(versionedTravelBuddy));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertFalse(versionedTravelBuddy.canRedo());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedTravelBuddy.undo());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Creates and returns a {@code VersionedTravelBuddy} with the {@code travelBuddyStates} added into it, and the"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * {@code VersionedTravelBuddy#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private VersionedTravelBuddy prepareTravelBuddyList(ReadOnlyTravelBuddy... travelBuddyStates) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertFalse(travelBuddyStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        VersionedTravelBuddy versionedTravelBuddy \u003d new VersionedTravelBuddy(travelBuddyStates[0]);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        for (int i \u003d 1; i \u003c travelBuddyStates.length; i++) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            versionedTravelBuddy.resetData(travelBuddyStates[i]);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            versionedTravelBuddy.commit();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        return versionedTravelBuddy;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Shifts the {@code versionedTravelBuddy#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedTravelBuddy versionedTravelBuddy, int count) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            versionedTravelBuddy.undo();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 299
    }
  },
  {
    "path": "src/test/java/seedu/travel/model/place/AddressTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.model.place;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // null travel"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long travel"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 4,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/travel/model/place/CountryCodeContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nivenang"
        },
        "content": "package seedu.travel.model.place;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.testutil.PlaceBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nivenang"
        },
        "content": "public class CountryCodeContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"SGP\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"SGP\", \"JPN\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        CountryCodeContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                new CountryCodeContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        CountryCodeContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                new CountryCodeContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        CountryCodeContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                new CountryCodeContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // different place -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void test_countryCodeContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        CountryCodeContainsKeywordsPredicate predicate \u003d new CountryCodeContainsKeywordsPredicate("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                Collections.singletonList(\"CHN\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(predicate.test(new PlaceBuilder().withCountryCode(\"CHN\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        predicate \u003d new CountryCodeContainsKeywordsPredicate(Arrays.asList(\"DEU\", \"JPN\", \"USA\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(predicate.test(new PlaceBuilder().withCountryCode(\"DEU\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void test_countryCodeDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        CountryCodeContainsKeywordsPredicate predicate \u003d new CountryCodeContainsKeywordsPredicate("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(predicate.test(new PlaceBuilder().withCountryCode(\"KOR\").build()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        predicate \u003d new CountryCodeContainsKeywordsPredicate(Collections.singletonList(\"FRA\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(predicate.test(new PlaceBuilder().withCountryCode(\"ITA\").build()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nivenang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nivenang": 69
    }
  },
  {
    "path": "src/test/java/seedu/travel/model/place/CountryCodeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.model.place;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "public class CountryCodeTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new CountryCode(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void constructor_invalidCountryCode_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        String invalidCountryCode \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new CountryCode(invalidCountryCode));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void isValidCountryCode() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // null country code"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e CountryCode.isValidCountryCode(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // invalid country code"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertFalse(CountryCode.isValidCountryCode(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertFalse(CountryCode.isValidCountryCode(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertFalse(CountryCode.isValidCountryCode(\"  \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertFalse(CountryCode.isValidCountryCode(\"SG\")); // only 2 letters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertFalse(CountryCode.isValidCountryCode(\"123\")); // numeric"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertFalse(CountryCode.isValidCountryCode(\"p\")); // only 1 letters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertFalse(CountryCode.isValidCountryCode(\"SGX\")); // not a country code"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // valid country code"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertTrue(CountryCode.isValidCountryCode(\"SGP\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertTrue(CountryCode.isValidCountryCode(\"JPN\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertTrue(CountryCode.isValidCountryCode(\"USA\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 2,
      "PremBagda": 40
    }
  },
  {
    "path": "src/test/java/seedu/travel/model/place/DateVisitedTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "package seedu.travel.model.place;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import seedu.travel.testutil.Assert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "public class DateVisitedTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new DateVisited(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void constructor_invalidDateVisited_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        String invalidDateVisited \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new DateVisited(invalidDateVisited));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void isValidDateVisited() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // null date visited"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e DateVisited.isValidDateVisited(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e DateVisited.isCorrectDateFormat(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // incorrect date visited format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertFalse(DateVisited.isCorrectDateFormat(\"\")); // empty string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertFalse(DateVisited.isCorrectDateFormat(\" \")); // spaces only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertFalse(DateVisited.isCorrectDateFormat(\"  \")); // spaces only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertFalse(DateVisited.isCorrectDateFormat(\"10\")); // only 2 numbers"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertFalse(DateVisited.isCorrectDateFormat(\"12/13\")); // 4 numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertFalse(DateVisited.isCorrectDateFormat(\"p\")); // only 1 letters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertFalse(DateVisited.isCorrectDateFormat(\"10-10-2000\")); // not correct format date"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertFalse(DateVisited.isCorrectDateFormat(\"10/17/2000\")); // not correct format date"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertFalse(DateVisited.isCorrectDateFormat(\"99/08/2000\")); // not correct format date"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertFalse(DateVisited.isCorrectDateFormat(\"10/10/0000\")); // not correct format date"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // invalid future date visited added"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertFalse(DateVisited.isValidDateVisited(\"\")); // empty string"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertFalse(DateVisited.isValidDateVisited(\" \")); // spaces only"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertFalse(DateVisited.isValidDateVisited(\"  \")); // spaces only"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertFalse(DateVisited.isValidDateVisited(\"10/10/2999\")); // future date"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // correct date visited format"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertTrue(DateVisited.isCorrectDateFormat(\"10/10/2001\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertTrue(DateVisited.isCorrectDateFormat(\"01/01/2015\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // valid date visited"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertTrue(DateVisited.isValidDateVisited(\"10/10/2009\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertTrue(DateVisited.isValidDateVisited(\"01/01/2018\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void isValidYearVisited() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // null year visited"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e DateVisited.isValidYear(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // invalid year visited"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(DateVisited.isValidYear(\"\")); // empty string"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(DateVisited.isValidYear(\" \")); // spaces only"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(DateVisited.isValidYear(\"invalidyear\")); // non-integer input"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(DateVisited.isValidYear(\"1819\")); // date before 1900"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(DateVisited.isValidYear(String.valueOf(LocalDateTime.now().getYear() + 1))); // future date"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // valid year visited"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(DateVisited.isValidYear(\"1900\")); // lower boundary case"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(DateVisited.isValidYear(\"2001\")); // middle case"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(DateVisited.isValidYear(String.valueOf(LocalDateTime.now().getYear()))); // upper boundary case"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PremBagda": 54,
      "nivenang": 20
    }
  },
  {
    "path": "src/test/java/seedu/travel/model/place/DescriptionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.model.place;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "public class DescriptionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Description(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void constructor_invalidDescription_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        String invalidDescription \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Description(invalidDescription));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void isValidDescription() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // null description"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Description.isValidDescription(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // blank description"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertFalse(Description.isValidDescription(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertFalse(Description.isValidDescription(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertFalse(Description.isValidDescription(\"1 love this place\")); // begin with a digit"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertFalse(Description.isValidDescription(\"@ love this place\")); // begin with a symbol"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertFalse(Description.isValidDescription(\" I love this place\")); // begin with a space"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // valid description"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertTrue(Description.isValidDescription(\"I love this place\")); // begin with uppercase alphabet"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertTrue(Description.isValidDescription(\"i love this place\")); // begin with lowercase alphabet"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertTrue(Description.isValidDescription(\"I love this place.\")); // ends with a symbol"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertTrue(Description.isValidDescription(\"I love this place     \")); // ends with trailing spaces"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertTrue(Description.isValidDescription(\"I love this place. It reminds me of home\")); // Multiple sentences"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 26,
      "-": 18
    }
  },
  {
    "path": "src/test/java/seedu/travel/model/place/NameContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.model.place;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.testutil.PlaceBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // different place -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertTrue(predicate.test(new PlaceBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertTrue(predicate.test(new PlaceBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertTrue(predicate.test(new PlaceBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertTrue(predicate.test(new PlaceBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertFalse(predicate.test(new PlaceBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertFalse(predicate.test(new PlaceBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // Keywords match country code, rating, description and travel, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"None\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertFalse(predicate.test(new PlaceBuilder().withName(\"Alice\").withCountryCode(\"SGP\").withRating(\"4\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                .withDescription(\"None\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 5,
      "PremBagda": 8,
      "-": 62
    }
  },
  {
    "path": "src/test/java/seedu/travel/model/place/NameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.model.place;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 2,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/travel/model/place/PlaceTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.model.place;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_ADDRESS_BEDOK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_COUNTRY_CODE_AMERICA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BEDOK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_NAME_BEDOK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_RATING_BEDOK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_TAG_EWL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.BEDOK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.testutil.PlaceBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "public class PlaceTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Place place \u003d new PlaceBuilder().build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        place.getTags().remove(0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void isSamePlace() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertTrue(ALICE.isSamePlace(ALICE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertFalse(ALICE.isSamePlace(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        Place editedAlice \u003d new PlaceBuilder(ALICE).withName(VALID_NAME_BEDOK).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertFalse(ALICE.isSamePlace(editedAlice));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // same name, different rating -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        editedAlice \u003d new PlaceBuilder(ALICE).withRating(VALID_RATING_BEDOK).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertTrue(ALICE.isSamePlace(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // same name, different description -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        editedAlice \u003d new PlaceBuilder(ALICE).withDescription(VALID_DESCRIPTION_BEDOK).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertTrue(ALICE.isSamePlace(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // same name, different travel -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        editedAlice \u003d new PlaceBuilder(ALICE).withAddress(VALID_ADDRESS_BEDOK).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertTrue(ALICE.isSamePlace(editedAlice));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // same name, different tags -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        editedAlice \u003d new PlaceBuilder(ALICE).withTags(VALID_TAG_EWL).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertTrue(ALICE.isSamePlace(editedAlice));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Place aliceCopy \u003d new PlaceBuilder(ALICE).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // different place -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(ALICE.equals(BEDOK));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        Place editedAlice \u003d new PlaceBuilder(ALICE).withName(VALID_NAME_BEDOK).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // different country code -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        editedAlice \u003d new PlaceBuilder(ALICE).withCountryCode(VALID_COUNTRY_CODE_AMERICA).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // different rating -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        editedAlice \u003d new PlaceBuilder(ALICE).withRating(VALID_RATING_BEDOK).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        editedAlice \u003d new PlaceBuilder(ALICE).withDescription(VALID_DESCRIPTION_BEDOK).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // different travel -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        editedAlice \u003d new PlaceBuilder(ALICE).withAddress(VALID_ADDRESS_BEDOK).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        editedAlice \u003d new PlaceBuilder(ALICE).withTags(VALID_TAG_EWL).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 17,
      "PremBagda": 16,
      "nivenang": 13,
      "-": 56
    }
  },
  {
    "path": "src/test/java/seedu/travel/model/place/RatingContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.model.place;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.testutil.PlaceBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nivenang"
        },
        "content": "public class RatingContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"1\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"1\", \"2\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        RatingContainsKeywordsPredicate firstPredicate \u003d new RatingContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        RatingContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                new RatingContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        RatingContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                new RatingContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // different place -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void test_ratingContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        RatingContainsKeywordsPredicate predicate \u003d new RatingContainsKeywordsPredicate(Collections.singletonList(\"4\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(predicate.test(new PlaceBuilder().withRating(\"4\").build()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        predicate \u003d new RatingContainsKeywordsPredicate(Arrays.asList(\"4\", \"5\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(predicate.test(new PlaceBuilder().withRating(\"5\").build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void test_ratingDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        RatingContainsKeywordsPredicate predicate \u003d new RatingContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(predicate.test(new PlaceBuilder().withRating(\"3\").build()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        predicate \u003d new RatingContainsKeywordsPredicate(Collections.singletonList(\"5\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(predicate.test(new PlaceBuilder().withRating(\"3\").build()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nivenang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 2,
      "nivenang": 64
    }
  },
  {
    "path": "src/test/java/seedu/travel/model/place/RatingTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.model.place;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nivenang"
        },
        "content": "public class RatingTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Rating(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void constructor_invalidRating_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        String invalidRating \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Rating(invalidRating));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void isValidRating() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // null rating"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Rating.isValidRating(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // invalid ratings"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(Rating.isValidRating(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(Rating.isValidRating(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(Rating.isValidRating(\"91\")); // more than 2 digits"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(Rating.isValidRating(\"rating\")); // non-numeric"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(Rating.isValidRating(\"p\")); // alphabets"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(Rating.isValidRating(\"6\")); // single digit outside range"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // valid ratings"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(Rating.isValidRating(\"1\")); // exactly 1 number in range"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(Rating.isValidRating(\"5\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(Rating.isValidRating(\"3\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nivenang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 2,
      "nivenang": 39
    }
  },
  {
    "path": "src/test/java/seedu/travel/model/place/TagContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.model.place;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.testutil.PlaceBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nivenang"
        },
        "content": "public class TagContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        TagContainsKeywordsPredicate firstPredicate \u003d new TagContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        TagContainsKeywordsPredicate secondPredicate \u003d new TagContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        TagContainsKeywordsPredicate firstPredicateCopy \u003d new TagContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // different place -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void test_tagContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        TagContainsKeywordsPredicate predicate \u003d new TagContainsKeywordsPredicate(Collections.singletonList(\"school\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(predicate.test(new PlaceBuilder().withTags(\"school\", \"temple\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"school\", \"temple\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(predicate.test(new PlaceBuilder().withTags(\"school\", \"temple\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"school\", \"shoppingMall\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(predicate.test(new PlaceBuilder().withTags(\"airport\", \"shoppingMall\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"sChOOl\", \"tEmPlE\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(predicate.test(new PlaceBuilder().withTags(\"school\", \"temple\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void test_tagDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        TagContainsKeywordsPredicate predicate \u003d new TagContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(predicate.test(new PlaceBuilder().withTags(\"airport\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"airport\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(predicate.test(new PlaceBuilder().withTags(\"school\", \"temple\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // Keywords match name, country code, rating, description and travel, but does not match tags"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"NUS\", \"None\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertFalse(predicate.test(new PlaceBuilder().withName(\"NUS\").withCountryCode(\"SGP\").withRating(\"4\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                .withDescription(\"None\").withAddress(\"Main Street\").withTags(\"school\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nivenang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 3,
      "PremBagda": 1,
      "nivenang": 71
    }
  },
  {
    "path": "src/test/java/seedu/travel/model/place/UniquePlaceListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.model.place;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_ADDRESS_BEDOK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_TAG_EWL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.BEDOK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.exceptions.DuplicatePlaceException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.exceptions.PlaceNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.testutil.PlaceBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "public class UniquePlaceListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private final UniquePlaceList uniquePlaceList \u003d new UniquePlaceList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void contains_nullPlace_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        uniquePlaceList.contains(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void contains_placeNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertFalse(uniquePlaceList.contains(ALICE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void contains_placeInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        uniquePlaceList.add(ALICE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertTrue(uniquePlaceList.contains(ALICE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void contains_placeWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        uniquePlaceList.add(ALICE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        Place editedAlice \u003d new PlaceBuilder(ALICE).withAddress(VALID_ADDRESS_BEDOK).withTags(VALID_TAG_EWL)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertTrue(uniquePlaceList.contains(editedAlice));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void add_nullPlace_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        uniquePlaceList.add(null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void add_duplicatePlace_throwsDuplicatePlaceException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        uniquePlaceList.add(ALICE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        thrown.expect(DuplicatePlaceException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        uniquePlaceList.add(ALICE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void setPlace_nullTargetPlace_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        uniquePlaceList.setPlace(null, ALICE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void setPlace_nullEditedPlace_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        uniquePlaceList.setPlace(ALICE, null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void setPlace_targetPlaceNotInList_throwsPlaceNotFoundException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        thrown.expect(PlaceNotFoundException.class);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        uniquePlaceList.setPlace(ALICE, ALICE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void setPlace_editedPlaceIsSamePlace_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        uniquePlaceList.add(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        uniquePlaceList.setPlace(ALICE, ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        UniquePlaceList expectedUniquePlaceList \u003d new UniquePlaceList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        expectedUniquePlaceList.add(ALICE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertEquals(expectedUniquePlaceList, uniquePlaceList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void setPlace_editedPlaceHasSameIdentity_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        uniquePlaceList.add(ALICE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        Place editedAlice \u003d new PlaceBuilder(ALICE).withAddress(VALID_ADDRESS_BEDOK).withTags(VALID_TAG_EWL)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        uniquePlaceList.setPlace(ALICE, editedAlice);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        UniquePlaceList expectedUniquePlaceList \u003d new UniquePlaceList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        expectedUniquePlaceList.add(editedAlice);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertEquals(expectedUniquePlaceList, uniquePlaceList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void setPlace_editedPlaceHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        uniquePlaceList.add(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        uniquePlaceList.setPlace(ALICE, BEDOK);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        UniquePlaceList expectedUniquePlaceList \u003d new UniquePlaceList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        expectedUniquePlaceList.add(BEDOK);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertEquals(expectedUniquePlaceList, uniquePlaceList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void setPlace_editedPlaceHasNonUniqueIdentity_throwsDuplicatePlaceException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        uniquePlaceList.add(ALICE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        uniquePlaceList.add(BEDOK);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        thrown.expect(DuplicatePlaceException.class);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        uniquePlaceList.setPlace(ALICE, BEDOK);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void remove_nullPlace_throwsNullPointerException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        uniquePlaceList.remove(null);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void remove_placeDoesNotExist_throwsPlaceNotFoundException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        thrown.expect(PlaceNotFoundException.class);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        uniquePlaceList.remove(ALICE);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void remove_existingPlace_removesPlace() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        uniquePlaceList.add(ALICE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        uniquePlaceList.remove(ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        UniquePlaceList expectedUniquePlaceList \u003d new UniquePlaceList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertEquals(expectedUniquePlaceList, uniquePlaceList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void setPlaces_nullUniquePlaceList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        uniquePlaceList.setPlaces((UniquePlaceList) null);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void setPlaces_uniquePlaceList_replacesOwnListWithProvidedUniquePlaceList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        uniquePlaceList.add(ALICE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        UniquePlaceList expectedUniquePlaceList \u003d new UniquePlaceList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        expectedUniquePlaceList.add(BEDOK);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        uniquePlaceList.setPlaces(expectedUniquePlaceList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertEquals(expectedUniquePlaceList, uniquePlaceList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void setPlaces_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        uniquePlaceList.setPlaces((List\u003cPlace\u003e) null);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void setPlaces_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        uniquePlaceList.add(ALICE);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        List\u003cPlace\u003e placeList \u003d Collections.singletonList(BEDOK);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        uniquePlaceList.setPlaces(placeList);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        UniquePlaceList expectedUniquePlaceList \u003d new UniquePlaceList();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        expectedUniquePlaceList.add(BEDOK);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertEquals(expectedUniquePlaceList, uniquePlaceList);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void setPlaces_listWithDuplicatePlaces_throwsDuplicatePlaceException() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        List\u003cPlace\u003e listWithDuplicatePlaces \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        thrown.expect(DuplicatePlaceException.class);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        uniquePlaceList.setPlaces(listWithDuplicatePlaces);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        uniquePlaceList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 8,
      "PremBagda": 168,
      "nivenang": 9
    }
  },
  {
    "path": "src/test/java/seedu/travel/model/place/YearContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nivenang"
        },
        "content": "package seedu.travel.model.place;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.testutil.PlaceBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nivenang"
        },
        "content": "public class YearContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"2015\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"2015\", \"2018\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        YearContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                new YearContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        YearContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                new YearContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        YearContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                new YearContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // different place -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void test_yearContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        YearContainsKeywordsPredicate predicate \u003d new YearContainsKeywordsPredicate("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                Collections.singletonList(\"2015\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(predicate.test(new PlaceBuilder().withDateVisited(\"05/06/2015\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        predicate \u003d new YearContainsKeywordsPredicate(Arrays.asList(\"1996\", \"2000\", \"2009\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertTrue(predicate.test(new PlaceBuilder().withDateVisited(\"01/02/2000\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void test_yearDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        YearContainsKeywordsPredicate predicate \u003d new YearContainsKeywordsPredicate("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(predicate.test(new PlaceBuilder().withDateVisited(\"20/05/2016\").build()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        predicate \u003d new YearContainsKeywordsPredicate(Collections.singletonList(\"2014\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(predicate.test(new PlaceBuilder().withDateVisited(\"15/12/2013\").build()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nivenang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nivenang": 69
    }
  },
  {
    "path": "src/test/java/seedu/travel/model/tag/TagTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 2,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/travel/storage/JsonAdaptedPlaceTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.storage.JsonAdaptedPlace.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.CountryCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import seedu.travel.model.place.DateVisited;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Rating;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.testutil.Assert;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "public class JsonAdaptedPlaceTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private static final String INVALID_COUNTRY_CODE \u003d \"@GP\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private static final String INVALID_DATE_VISITED \u003d \"10!99*2000\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private static final String INVALID_RATING \u003d \"65\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \" Invalid description\"; // must begin with alphabet"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private static final String VALID_COUNTRY_CODE \u003d BENSON.getCountryCode().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private static final String VALID_DATE_VISITED \u003d BENSON.getDateVisited().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private static final String VALID_RATING \u003d BENSON.getRating().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d BENSON.getDescription().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void toModelType_validPlaceDetails_returnsPlace() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        JsonAdaptedPlace place \u003d new JsonAdaptedPlace(BENSON);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertEquals(BENSON, place.toModelType());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        JsonAdaptedPlace place \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                new JsonAdaptedPlace(INVALID_NAME, VALID_COUNTRY_CODE, VALID_DATE_VISITED, VALID_RATING,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                    VALID_DESCRIPTION, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, place::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        JsonAdaptedPlace place \u003d new JsonAdaptedPlace(null, VALID_COUNTRY_CODE, VALID_DATE_VISITED, VALID_RATING,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                VALID_DESCRIPTION, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, place::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void toModelType_invalidCountryCode_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        JsonAdaptedPlace place \u003d new JsonAdaptedPlace(VALID_NAME, INVALID_COUNTRY_CODE, VALID_DATE_VISITED,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                VALID_RATING, VALID_DESCRIPTION, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        String expectedMessage \u003d CountryCode.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, place::toModelType);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void toModelType_nullCountryCode_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        JsonAdaptedPlace place \u003d new JsonAdaptedPlace(VALID_NAME, null, VALID_DATE_VISITED, VALID_RATING,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                VALID_DESCRIPTION, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, CountryCode.class.getSimpleName());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, place::toModelType);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void toModelType_invalidDateVisited_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        JsonAdaptedPlace place \u003d new JsonAdaptedPlace(VALID_NAME, VALID_COUNTRY_CODE, INVALID_DATE_VISITED,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                VALID_RATING, VALID_DESCRIPTION, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        String expectedMessage \u003d DateVisited.MESSAGE_INCORRECT_FORMAT;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, place::toModelType);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void toModelType_nullDateVisited_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        JsonAdaptedPlace place \u003d new JsonAdaptedPlace(VALID_NAME, VALID_COUNTRY_CODE, null, VALID_RATING,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            VALID_DESCRIPTION, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, DateVisited.class.getSimpleName());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, place::toModelType);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void toModelType_invalidRating_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        JsonAdaptedPlace place \u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                new JsonAdaptedPlace(VALID_NAME, VALID_COUNTRY_CODE, VALID_DATE_VISITED, INVALID_RATING,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                    VALID_DESCRIPTION, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        String expectedMessage \u003d Rating.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, place::toModelType);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void toModelType_nullRating_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        JsonAdaptedPlace place \u003d new JsonAdaptedPlace(VALID_NAME, VALID_COUNTRY_CODE, VALID_DATE_VISITED, null,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                VALID_DESCRIPTION, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Rating.class.getSimpleName());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, place::toModelType);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void toModelType_invalidDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        JsonAdaptedPlace place \u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                new JsonAdaptedPlace(VALID_NAME, VALID_COUNTRY_CODE, VALID_DATE_VISITED, VALID_RATING,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                    INVALID_DESCRIPTION, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        String expectedMessage \u003d Description.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, place::toModelType);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void toModelType_nullDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        JsonAdaptedPlace place \u003d new JsonAdaptedPlace(VALID_NAME, VALID_COUNTRY_CODE, VALID_DATE_VISITED,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                VALID_RATING, null, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, place::toModelType);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        JsonAdaptedPlace place \u003d"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                new JsonAdaptedPlace(VALID_NAME, VALID_COUNTRY_CODE, VALID_DATE_VISITED, VALID_RATING,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                    VALID_DESCRIPTION, INVALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, place::toModelType);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        JsonAdaptedPlace place \u003d new JsonAdaptedPlace(VALID_NAME, VALID_COUNTRY_CODE, VALID_DATE_VISITED,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                VALID_RATING, VALID_DESCRIPTION, null, VALID_TAGS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, place::toModelType);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        JsonAdaptedPlace place \u003d new JsonAdaptedPlace(VALID_NAME, VALID_COUNTRY_CODE, VALID_DATE_VISITED,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                VALID_RATING, VALID_DESCRIPTION, VALID_ADDRESS, invalidTags);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, place::toModelType);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 16,
      "PremBagda": 72,
      "nivenang": 6,
      "-": 62
    }
  },
  {
    "path": "src/test/java/seedu/travel/storage/JsonSerializableTravelBuddyTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.TravelBuddy;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.testutil.TypicalPlaces;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "public class JsonSerializableTravelBuddyTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableTravelBuddyTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private static final Path TYPICAL_PLACES_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPlacesTravelBuddy.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private static final Path INVALID_PLACE_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPlaceTravelBuddy.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private static final Path DUPLICATE_PLACE_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePlaceTravelBuddy.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void toModelType_typicalPlacesFile_success() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        JsonSerializableTravelBuddy dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PLACES_FILE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                JsonSerializableTravelBuddy.class).get();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        TravelBuddy travelBuddyFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        TravelBuddy typicalPlacesTravelBuddy \u003d TypicalPlaces.getTypicalTravelBuddy();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertEquals(travelBuddyFromFile, typicalPlacesTravelBuddy);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void toModelType_invalidPlaceFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        JsonSerializableTravelBuddy dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PLACE_FILE,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                JsonSerializableTravelBuddy.class).get();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void toModelType_duplicatePlaces_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        JsonSerializableTravelBuddy dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PLACE_FILE,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                JsonSerializableTravelBuddy.class).get();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        thrown.expectMessage(JsonSerializableTravelBuddy.MESSAGE_DUPLICATE_PLACE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 52,
      "PremBagda": 3
    }
  },
  {
    "path": "src/test/java/seedu/travel/storage/JsonTravelBuddyStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.HOON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.IDA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.getTypicalTravelBuddy;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.ReadOnlyTravelBuddy;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.TravelBuddy;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "public class JsonTravelBuddyStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonTravelBuddyStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void readTravelBuddy_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        readTravelBuddy(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private java.util.Optional\u003cReadOnlyTravelBuddy\u003e readTravelBuddy(String filePath) throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        return new JsonTravelBuddyStorage(Paths.get(filePath)).readTravelBuddy(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertFalse(readTravelBuddy(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        readTravelBuddy(\"notJsonFormatTravelBuddy.json\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void readTravelBuddy_invalidPlaceTravelBuddy_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        readTravelBuddy(\"invalidPlaceTravelBuddy.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void readTravelBuddy_invalidAndValidPlaceTravelBuddy_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        readTravelBuddy(\"invalidAndValidPlaceTravelBuddy.json\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void readAndSaveTravelBuddy_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempTravelBuddy.json\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        TravelBuddy original \u003d getTypicalTravelBuddy();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        JsonTravelBuddyStorage jsonTravelBuddyStorage \u003d new JsonTravelBuddyStorage(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        jsonTravelBuddyStorage.saveTravelBuddy(original, filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        ReadOnlyTravelBuddy readBack \u003d jsonTravelBuddyStorage.readTravelBuddy(filePath).get();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertEquals(original, new TravelBuddy(readBack));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        original.addPlace(HOON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        original.removePlace(ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        jsonTravelBuddyStorage.saveTravelBuddy(original, filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        readBack \u003d jsonTravelBuddyStorage.readTravelBuddy(filePath).get();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertEquals(original, new TravelBuddy(readBack));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        original.addPlace(IDA);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        jsonTravelBuddyStorage.saveTravelBuddy(original); // file path not specified"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        readBack \u003d jsonTravelBuddyStorage.readTravelBuddy().get(); // file path not specified"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertEquals(original, new TravelBuddy(readBack));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void saveTravelBuddy_nullTravelBuddy_throwsNullPointerException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        saveTravelBuddy(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Saves {@code travelBuddy} at the specified {@code filePath}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private void saveTravelBuddy(ReadOnlyTravelBuddy travelBuddy, String filePath) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            new JsonTravelBuddyStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                    .saveTravelBuddy(travelBuddy, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void saveTravelBuddy_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        saveTravelBuddy(new TravelBuddy(), null);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 124
    }
  },
  {
    "path": "src/test/java/seedu/travel/storage/JsonUserPrefsStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(\"NotJsonFormatUserPrefs.json\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        userPrefs.setTravelBuddyFilePath(Paths.get(\"data\", \"travelBuddy.json\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(new UserPrefs(), null);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 5,
      "-": 129
    }
  },
  {
    "path": "src/test/java/seedu/travel/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.getTypicalTravelBuddy;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.ReadOnlyTravelBuddy;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.TravelBuddy;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        JsonTravelBuddyStorage travelBuddyStorage \u003d new JsonTravelBuddyStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        storageManager \u003d new StorageManager(travelBuddyStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void travelBuddyReadSave() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "         * {@link JsonTravelBuddyStorage} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonTravelBuddyStorageTest} class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        TravelBuddy original \u003d getTypicalTravelBuddy();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        storageManager.saveTravelBuddy(original);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        ReadOnlyTravelBuddy retrieved \u003d storageManager.readTravelBuddy().get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertEquals(original, new TravelBuddy(retrieved));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void getTravelBuddyFilePath() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertNotNull(storageManager.getTravelBuddyFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 17,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/travel/testutil/Assert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code callable} throws the {@code expected} Exception."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expected, VoidCallable callable) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expected, null, callable);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code callable} throws the {@code expectedException} and the {@code expectedMessage}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code assertThrows(Class\u003c? extends Throwable\u003e, VoidCallable)} instead."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see assertThrows(Class\u003c? extends Throwable\u003e, VoidCallable}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedException, String expectedMessage,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                                    VoidCallable callable) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            callable.call();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable actualException) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            String errorMessage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!actualException.getClass().isAssignableFrom(expectedException)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                errorMessage \u003d String.format(\"Expected exception thrown: %s, actual: %s\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                        expectedException.getName(), actualException.getClass().getName());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (expectedMessage !\u003d null \u0026\u0026 !expectedMessage.equals(actualException.getMessage())) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                errorMessage \u003d String.format("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"Expected message thrown: %s, actual: %s\", expectedMessage, actualException.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(errorMessage, actualException);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new AssertionError(String.format("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Expected %s to be thrown, but nothing was thrown.\", expectedException.getName()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function which does not return anything and may throw an exception."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface VoidCallable {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        void call() throws Exception;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 1,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/travel/testutil/EditPlaceDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.EditCommand.EditPlaceDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.CountryCode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import seedu.travel.model.place.DateVisited;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Place;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Rating;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PremBagda"
        },
        "content": " * A utility class to help with building EditPlaceDescriptor objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PremBagda"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "public class EditPlaceDescriptorBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private EditPlaceDescriptor descriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public EditPlaceDescriptorBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        descriptor \u003d new EditPlaceDescriptor();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public EditPlaceDescriptorBuilder(EditPlaceDescriptor descriptor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        this.descriptor \u003d new EditPlaceDescriptor(descriptor);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Returns an {@code EditPlaceDescriptor} with fields containing {@code place}\u0027s details"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public EditPlaceDescriptorBuilder(Place place) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        descriptor \u003d new EditPlaceDescriptor();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        descriptor.setName(place.getName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        descriptor.setCountryCode(place.getCountryCode());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        descriptor.setDateVisited(place.getDateVisited());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        descriptor.setRating(place.getRating());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        descriptor.setDescription(place.getDescription());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        descriptor.setAddress(place.getAddress());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        descriptor.setTags(place.getTags());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPlaceDescriptor} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public EditPlaceDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Sets the {@code CountryCode} of the {@code EditPlaceDescriptor} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public EditPlaceDescriptorBuilder withCountryCode(String countryCode) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        descriptor.setCountryCode(new CountryCode(countryCode));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Sets the {@code DateVisited} of the {@code EditPlaceDescriptor} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public EditPlaceDescriptorBuilder withDateVisited(String dateVisited) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        descriptor.setDateVisited(new DateVisited(dateVisited));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Sets the {@code Rating} of the {@code EditPlaceDescriptor} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public EditPlaceDescriptorBuilder withRating(String rating) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        descriptor.setRating(new Rating(rating));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Sets the {@code Description} of the {@code EditPlaceDescriptor} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public EditPlaceDescriptorBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        descriptor.setDescription(new Description(description));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPlaceDescriptor} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public EditPlaceDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPlaceDescriptor}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public EditPlaceDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public EditPlaceDescriptor build() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 13,
      "PremBagda": 90,
      "nivenang": 4
    }
  },
  {
    "path": "src/test/java/seedu/travel/testutil/PlaceBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.CountryCode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import seedu.travel.model.place.DateVisited;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Place;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Rating;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PremBagda"
        },
        "content": " * A utility class to help with building Place objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PremBagda"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "public class PlaceBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Haw Par Villa\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public static final String DEFAULT_COUNTRY_CODE \u003d \"SGP\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public static final String DEFAULT_DATE_VISITED \u003d \"19/10/2018\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String DEFAULT_RATING \u003d \"4\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Unique park using giant statues \u0026 dioramas \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            + \"to retell historic Chinese legends \u0026 religious mythology.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"262 Pasir Panjang Rd, Singapore 118628\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private CountryCode countryCode;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private DateVisited dateVisited;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private Rating rating;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public PlaceBuilder() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        countryCode \u003d new CountryCode(DEFAULT_COUNTRY_CODE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        dateVisited \u003d new DateVisited(DEFAULT_DATE_VISITED);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        rating \u003d new Rating(DEFAULT_RATING);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Initializes the PlaceBuilder with the data of {@code placeToCopy}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public PlaceBuilder(Place placeToCopy) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        name \u003d placeToCopy.getName();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        countryCode \u003d placeToCopy.getCountryCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        dateVisited \u003d placeToCopy.getDateVisited();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        rating \u003d placeToCopy.getRating();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        description \u003d placeToCopy.getDescription();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        address \u003d placeToCopy.getAddress();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(placeToCopy.getTags());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Sets the {@code Name} of the {@code Place} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public PlaceBuilder withName(String name) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Sets the {@code CountryCode} of the {@code Place} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public PlaceBuilder withCountryCode(String countryCode) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        this.countryCode \u003d new CountryCode(countryCode);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Sets the {@code DateVisited} of the {@code Place} that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public PlaceBuilder withDateVisited(String dateVisited) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        this.dateVisited \u003d new DateVisited(dateVisited);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Place} that we are building."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public PlaceBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Sets the {@code Address} of the {@code Place} that we are building."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public PlaceBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Sets the {@code Rating} of the {@code Place} that we are building."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public PlaceBuilder withRating(String rating) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        this.rating \u003d new Rating(rating);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Sets the {@code Description} of the {@code Place} that we are building."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public PlaceBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public Place build() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return new Place(name, countryCode, dateVisited, rating, description, address, tags);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 15,
      "PremBagda": 94,
      "nivenang": 11
    }
  },
  {
    "path": "src/test/java/seedu/travel/testutil/PlaceUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.parser.CliSyntax.PREFIX_COUNTRY_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import static seedu.travel.logic.parser.CliSyntax.PREFIX_DATE_VISITED;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.EditCommand.EditPlaceDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Place;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PremBagda"
        },
        "content": " * A utility class for Place."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "public class PlaceUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Returns an add command string for adding the {@code place}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public static String getAddCommand(Place place) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPlaceDetails(place);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Returns the part of command string for the given {@code place}\u0027s details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public static String getPlaceDetails(Place place) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        sb.append(PREFIX_NAME + place.getName().fullName + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        sb.append(PREFIX_COUNTRY_CODE + place.getCountryCode().code + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        sb.append(PREFIX_DATE_VISITED + place.getDateVisited().getDate() + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        sb.append(PREFIX_RATING + place.getRating().value + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        sb.append(PREFIX_DESCRIPTION + place.getDescription().value + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        sb.append(PREFIX_ADDRESS + place.getAddress().value + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        place.getTags().stream().forEach("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Returns the part of command string for the given {@code EditPlaceDescriptor}\u0027s details."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public static String getEditPlaceDescriptorDetails(EditPlaceDescriptor descriptor) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        descriptor.getCountryCode().ifPresent(countryCode -\u003e sb.append(PREFIX_COUNTRY_CODE)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            .append(countryCode.code).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        descriptor.getDateVisited().ifPresent(dateVisited -\u003e sb.append(PREFIX_DATE_VISITED)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            .append(dateVisited.getDate()).append(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        descriptor.getRating().ifPresent(rating -\u003e sb.append(PREFIX_RATING).append(rating.value).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        descriptor.getDescription().ifPresent(description -\u003e sb.append(PREFIX_DESCRIPTION).append(description.value)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                .append(\" \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 16,
      "PremBagda": 17,
      "nivenang": 2,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/travel/testutil/SerializableTestClass.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/travel/testutil/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Place;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Returns the middle index of the place in the {@code model}\u0027s place list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPlaceList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Returns the last index of the place in the {@code model}\u0027s place list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPlaceList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Returns the place in the {@code model}\u0027s place list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public static Place getPlace(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return model.getFilteredPlaceList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 4,
      "PremBagda": 7,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/travel/testutil/TravelBuddyBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.TravelBuddy;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Place;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " * A utility class to help with building TravelBuddy objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " *     {@code TravelBuddy ab \u003d new TravelBuddyBuilder().withPlace(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "public class TravelBuddyBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private TravelBuddy travelBuddy;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public TravelBuddyBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        travelBuddy \u003d new TravelBuddy();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public TravelBuddyBuilder(TravelBuddy travelBuddy) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        this.travelBuddy \u003d travelBuddy;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Adds a new {@code Place} to the {@code TravelBuddy} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public TravelBuddyBuilder withPlace(Place place) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        travelBuddy.addPlace(place);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public TravelBuddy build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        return travelBuddy;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 34
    }
  },
  {
    "path": "src/test/java/seedu/travel/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static final Index INDEX_FIRST_PLACE \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static final Index INDEX_SECOND_PLACE \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static final Index INDEX_THIRD_PLACE \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static final Index INDEX_FOURTH_PLACE \u003d Index.fromOneBased(4);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static final Index INDEX_FIFTH_PLACE \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 14
    }
  },
  {
    "path": "src/test/java/seedu/travel/testutil/TypicalPlaces.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_ADDRESS_AMK;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_ADDRESS_BEDOK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_ADDRESS_CLEMENTI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_ADDRESS_DG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_COUNTRY_CODE_AMK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_COUNTRY_CODE_BEDOK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_COUNTRY_CODE_CLEMENTI;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_COUNTRY_CODE_DG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_DATE_VISITED_AMK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_DATE_VISITED_BEDOK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_DATE_VISITED_CLEMENTI;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_DATE_VISITED_DG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_DESCRIPTION_AMK;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BEDOK;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_DESCRIPTION_CLEMENTI;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_DESCRIPTION_DG;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_NAME_AMK;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_NAME_BEDOK;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_NAME_CLEMENTI;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_NAME_DG;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_RATING_AMK;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_RATING_BEDOK;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_RATING_CLEMENTI;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_RATING_DG;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_TAG_EWL;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_TAG_MRT;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.TravelBuddy;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Place;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PremBagda"
        },
        "content": " * A utility class containing a list of {@code Place} objects to be used in tests."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "public class TypicalPlaces {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static final Place ALICE \u003d new PlaceBuilder()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withName(\"VivoCity\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            .withCountryCode(\"SGP\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            .withDateVisited(\"10/10/2016\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withAddress(\"1 Harbourfront Walk, Singapore 098585\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withDescription(\"Expansive, modern shopping center hosting a wide range of retailers, \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                    + \"restaurants \u0026 theaters.\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withRating(\"1\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withTags(\"shoppingMall\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static final Place BENSON \u003d new PlaceBuilder()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withName(\"Changi Airport Singapore\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            .withCountryCode(\"SGP\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            .withDateVisited(\"01/04/2017\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withAddress(\"Airport Boulevard\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withDescription(\"Passenger \u0026 cargo hub with 4 modern terminals plus buses \u0026 trains to the city center.\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withRating(\"5\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withTags(\"airport\", \"shoppingMall\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static final Place CARL \u003d new PlaceBuilder()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withName(\"Universal Studios Singapore\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            .withCountryCode(\"SGP\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            .withDateVisited(\"08/04/2016\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withRating(\"4\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withDescription(\"Movie amusement centre with sets \u0026 rides on themes from \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                    + \"Hollywood to sci-fi, plus live entertainment.\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withAddress(\"8 Sentosa Gateway, 0982693\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withTags(\"amusementPark\", \"recreation\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static final Place DANIEL \u003d new PlaceBuilder()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withName(\"Yanaka Cemetery Park\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withCountryCode(\"JPN\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            .withDateVisited(\"02/05/2016\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withRating(\"3\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withDescription(\"Hilly, cherry tree–planted cemetery with graves\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                    + \" of renowned artists \u0026 actors \u0026 a 5-story pagoda.\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withAddress(\"7-chōme-5-24 Yanaka, Taito City, Tōkyō-to 110-0001, Japan\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withTags(\"cemetery\", \"placeOfInterest\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static final Place ELLE \u003d new PlaceBuilder()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withName(\"National University of Singapore\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            .withCountryCode(\"SGP\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            .withDateVisited(\"05/05/2018\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withRating(\"4\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withDescription(\"The National University of Singapore is an autonomous research university in Singapore.\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withAddress(\"21 Lower Kent Ridge Rd, Singapore 119077\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withTags(\"school\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static final Place FIONA \u003d new PlaceBuilder()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withName(\"Singapore Zoo\")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            .withCountryCode(\"SGP\")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            .withDateVisited(\"08/05/2018\")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withRating(\"3\")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withDescription(\"Rainforest zoo with tram rides, trails \u0026 viewing platforms \""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                    + \"to see wildlife habitats \u0026 exhibits.\")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withAddress(\"80 Mandai Lake Rd, Singapore 729826\")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withTags(\"zoo\", \"animals\")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static final Place GEORGE \u003d new PlaceBuilder()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withName(\"Buddha Tooth Relic Temple\")"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            .withCountryCode(\"SGP\")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            .withDateVisited(\"02/10/2017\")"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withRating(\"4\")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withDescription(\"Tang dynasty–style temple housing religious relics, \""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                    + \"with ornate rooms \u0026 a tranquil rooftop garden.\")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withAddress(\"288 South Bridge Rd, Singapore 058840\")"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withTags(\"temple\", \"heritageSite\")"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static final Place HOON \u003d new PlaceBuilder()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withName(\"Changi General Hospital\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            .withCountryCode(\"SGP\")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            .withDateVisited(\"02/05/2015\")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withRating(\"2\")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withDescription(\"Singapore\u0027s first purpose-built general hospital to\""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                    + \" serve communities in the east and north-east regions.\")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withAddress(\"2 Simei Street 3, Singapore 529889\")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static final Place IDA \u003d new PlaceBuilder()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withName(\"Singapore Botanic Gardens\")"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            .withCountryCode(\"SGP\")"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            .withDateVisited(\"02/12/2018\")"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withRating(\"5\")"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withDescription(\"Botanical gardens with sculptures, a swan lake\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                    + \" \u0026 significant collection of tropical trees.\")"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withAddress(\"1 Cluny Rd, Singapore 259569\")"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    // Manually added - Place\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final Place AMK \u003d new PlaceBuilder()"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withName(VALID_NAME_AMK)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            .withCountryCode(VALID_COUNTRY_CODE_AMK)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            .withDateVisited(VALID_DATE_VISITED_AMK)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withRating(VALID_RATING_AMK)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_AMK)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withAddress(VALID_ADDRESS_AMK)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withTags(VALID_TAG_MRT)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final Place BEDOK \u003d new PlaceBuilder()"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withName(VALID_NAME_BEDOK)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            .withCountryCode(VALID_COUNTRY_CODE_BEDOK)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            .withDateVisited(VALID_DATE_VISITED_BEDOK)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withRating(VALID_RATING_BEDOK)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_BEDOK)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withAddress(VALID_ADDRESS_BEDOK)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withTags(VALID_TAG_EWL, VALID_TAG_MRT)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final Place CLEMENTI \u003d new PlaceBuilder()"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withName(VALID_NAME_CLEMENTI)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            .withCountryCode(VALID_COUNTRY_CODE_CLEMENTI)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            .withDateVisited(VALID_DATE_VISITED_CLEMENTI)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withRating(VALID_RATING_CLEMENTI)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_CLEMENTI)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withAddress(VALID_ADDRESS_CLEMENTI)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withTags(VALID_TAG_EWL)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final Place DG \u003d new PlaceBuilder()"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withName(VALID_NAME_DG)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            .withCountryCode(VALID_COUNTRY_CODE_DG)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            .withDateVisited(VALID_DATE_VISITED_DG)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withRating(VALID_RATING_DG)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_DG)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            .withAddress(VALID_ADDRESS_DG)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String KEYWORD_MATCHING_SINGAPORE \u003d \"Singapore\"; // A keyword that matches SINGAPORE"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String KEYWORD_MATCHING_SHOPPING_MALL \u003d \"shoppingMall\"; // A keyword that matches shoppingMall"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String KEYWORD_MATCHING_FOUR \u003d \"4\"; // A keyword that matches 4"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String KEYWORD_MATCHING_SGP \u003d \"SGP\"; // A keyword that matches the country code SGP"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public static final String KEYWORD_MATCHING_2016 \u003d \"2016\"; // A keyword that matches the year 2016"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private TypicalPlaces() {} // prevents instantiation"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Returns an {@code TravelBuddy} with all the typical places."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public static TravelBuddy getTypicalTravelBuddy() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        TravelBuddy ab \u003d new TravelBuddy();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        for (Place place : getTypicalPlaces()) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            ab.addPlace(place);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public static List\u003cPlace\u003e getTypicalPlaces() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 46,
      "PremBagda": 39,
      "nivenang": 84,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/travel/ui/BrowserPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Place;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private SimpleObjectProperty\u003cPlace\u003e selectedPlace \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanelHandle browserPanelHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel(selectedPlace));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(browserPanel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // default web page"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BrowserPanel.DEFAULT_PAGE, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // associated web page of a place"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        guiRobot.interact(() -\u003e selectedPlace.set(ALICE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        URL expectedPlaceUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + ALICE.getName().fullName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(browserPanelHandle);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertEquals(expectedPlaceUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 3,
      "PremBagda": 6,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/travel/ui/CommandBoxTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBoxTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ArrayList\u003cString\u003e history \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandBoxHandle commandBoxHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(commandText -\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandText.equals(COMMAND_THAT_SUCCEEDS)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                return new CommandResult(\"Command successful\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(\"Command failed\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }, history);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(commandBox);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithSuccessfulCommand() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithFailedCommand() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify that style is changed correctly even after multiple consecutive failed commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_handleKeyPress() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.A);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithUp() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands (latest command is failure)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, thirdCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithDown() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that fails, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text remains \u003cbr\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForFailedCommand() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that succeeds, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text is cleared \u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForSuccessfulCommand() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(keycode);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommand, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 4,
      "-": 155
    }
  },
  {
    "path": "src/test/java/seedu/travel/ui/GuiUnitTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.ui.testutil.UiPartRule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " * A GUI unit test class for TravelBuddy."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class GuiUnitTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final UiPartRule uiPartRule \u003d new UiPartRule();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector of the node to retrieve."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 3,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/travel/ui/HelpWindowTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assume.assumeFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.ui.HelpWindow.USERGUIDE_FILE_PATH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindowTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindowHandle helpWindowHandle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e helpWindow \u003d new HelpWindow());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.registerStage(helpWindow::getRoot);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindowHandle \u003d new HelpWindowHandle(helpWindow.getRoot());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedHelpPage \u003d HelpWindow.class.getResource(USERGUIDE_FILE_PATH);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedHelpPage, helpWindowHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isShowing_helpWindowIsShowing_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::show);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(helpWindow.isShowing());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isShowing_helpWindowIsHiding_returnsFalse() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(helpWindow.isShowing());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus_helpWindowNotFocused_focused() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: This test skip can be removed once this bug is fixed:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // https://github.com/javafxports/openjdk-jfx/issues/50"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        //"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // When there are two stages (stage1 and stage2) shown,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // stage1 is in focus and stage2.requestFocus() is called,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // we expect that stage1.isFocused() will return false while"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // stage2.isFocused() returns true. However, as reported in the bug report,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // both stage1.isFocused() and stage2.isFocused() returns true,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // which fails the test."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assumeFalse(\"Test skipped in headless mode: Window focus behavior is buggy.\", guiRobot.isHeadlessMode());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::show);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Focus on another stage to remove focus from the helpWindow"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Stage temporaryStage \u003d new Stage();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            temporaryStage.show();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            temporaryStage.requestFocus();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(helpWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::focus);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(helpWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 2,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/travel/ui/ListElementPointerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListElementPointerTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FIRST_ELEMENT \u003d \"first\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SECOND_ELEMENT \u003d \"second\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e pointerElements;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer pointer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements.add(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_defensiveCopy_backingListUnmodified() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(list);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer emptyPointer \u003d new ListElementPointer(Collections.emptyList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(emptyPointer, pointer);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void emptyList() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentFailure();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void singleElementList() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(list);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void multipleElementsList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdElement \u003d \"third\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(thirdElement);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(thirdElement);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer firstPointer \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPointer.equals(firstPointer));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer firstPointerCopy \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPointer.equals(firstPointerCopy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // different elements -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer differentElementPointer \u003d new ListElementPointer(Collections.singletonList(SECOND_ELEMENT));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(differentElementPointer));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        firstPointerCopy.previous();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(firstPointerCopy));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasNext()} returns true and the return value"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#next()} equals to {@code element}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNextSuccess(String element) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasNext());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.next());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasPrevious()} returns true and the return value"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#previous()} equals to {@code element}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreviousSuccess(String element) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasPrevious());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.previous());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasCurrent()} returns true and the return value"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#current()} equals to {@code element}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCurrentSuccess(String element) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasCurrent());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.current());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasNext()} returns false and the following"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#next()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNextFailure() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasNext());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.next();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasPrevious()} returns false and the following"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#previous()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreviousFailure() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasPrevious());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.previous();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasCurrent()} returns false and the following"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#current()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCurrentFailure() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasCurrent());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.current();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 1,
      "-": 174
    }
  },
  {
    "path": "src/test/java/seedu/travel/ui/MainWindowCloseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StageHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.storage.JsonTravelBuddyStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.storage.StorageManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains tests for closing of the {@code MainWindow}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowCloseTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public final TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private EmptyMainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        JsonTravelBuddyStorage jsonTravelBuddyStorage \u003d new JsonTravelBuddyStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        StorageManager storageManager \u003d new StorageManager(jsonTravelBuddyStorage, jsonUserPrefsStorage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.setupStage(stage -\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            this.stage \u003d stage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(stage, new LogicManager(new ModelManager(), storageManager));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle \u003d new EmptyMainWindowHandle(stage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle.focus();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_menuBarExitButton_allWindowsClosed() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuExitButton();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_externalRequest_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuHelpButton();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.closeMainWindowExternally();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * A handle for an empty {@code MainWindow}. The components in {@code MainWindow} are not initialized."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EmptyMainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        private EmptyMainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            super(stage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} by clicking on the menu bar\u0027s exit button."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuExitButton() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"File\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Exit\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} through an external request {@code MainWindow} (e.g pressing the \u0027X\u0027 button on"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "         * the {@code MainWindow} or closing the app through the taskbar)."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        private void closeMainWindowExternally() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(() -\u003e stage.fireEvent(new WindowEvent(stage, WindowEvent.WINDOW_CLOSE_REQUEST)));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * Opens the {@code HelpWindow} by clicking on the menu bar\u0027s help button."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuHelpButton() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Help\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"F1\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 8,
      "-": 90
    }
  },
  {
    "path": "src/test/java/seedu/travel/ui/PlaceCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.ui.testutil.GuiTestAssert.assertCardDisplaysPlace;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import guitests.guihandles.PlaceCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Place;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.testutil.PlaceBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "public class PlaceCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Place placeWithNoTags \u003d new PlaceBuilder().withTags(new String[0]).build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        PlaceCard placeCard \u003d new PlaceCard(placeWithNoTags, 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        uiPartRule.setUiPart(placeCard);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertCardDisplay(placeCard, placeWithNoTags, 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Place placeWithTags \u003d new PlaceBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        placeCard \u003d new PlaceCard(placeWithTags, 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        uiPartRule.setUiPart(placeCard);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertCardDisplay(placeCard, placeWithTags, 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Place place \u003d new PlaceBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        PlaceCard placeCard \u003d new PlaceCard(place, 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // same place, same index -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        PlaceCard copy \u003d new PlaceCard(place, 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertTrue(placeCard.equals(copy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertTrue(placeCard.equals(placeCard));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertFalse(placeCard.equals(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertFalse(placeCard.equals(0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // different place, same index -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Place differentPlace \u003d new PlaceBuilder().withName(\"differentName\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertFalse(placeCard.equals(new PlaceCard(differentPlace, 0)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // same place, different index -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertFalse(placeCard.equals(new PlaceCard(place, 1)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Asserts that {@code placeCard} displays the details of {@code expectedPlace} correctly and matches"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private void assertCardDisplay(PlaceCard placeCard, Place expectedPlace, int expectedId) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        PlaceCardHandle placeCardHandle \u003d new PlaceCardHandle(placeCard.getRoot());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", placeCardHandle.getId());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // verify place details are displayed correctly"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertCardDisplaysPlace(expectedPlace, placeCardHandle);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 4,
      "PremBagda": 68
    }
  },
  {
    "path": "src/test/java/seedu/travel/ui/PlaceListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalIndexes.INDEX_SECOND_PLACE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.getTypicalPlaces;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.ui.testutil.GuiTestAssert.assertCardDisplaysPlace;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import guitests.guihandles.PlaceCardHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import guitests.guihandles.PlaceListPanelHandle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.CountryCode;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import seedu.travel.model.place.DateVisited;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Place;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Rating;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "public class PlaceListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private static final ObservableList\u003cPlace\u003e TYPICAL_PLACES \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            FXCollections.observableList(getTypicalPlaces());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private final SimpleObjectProperty\u003cPlace\u003e selectedPlace \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private PlaceListPanelHandle placeListPanelHandle;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        initUi(TYPICAL_PLACES);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_PLACES.size(); i++) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            placeListPanelHandle.navigateToCard(TYPICAL_PLACES.get(i));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            Place expectedPlace \u003d TYPICAL_PLACES.get(i);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            PlaceCardHandle actualCard \u003d placeListPanelHandle.getPlaceCardHandle(i);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            assertCardDisplaysPlace(expectedPlace, actualCard);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void selection_modelSelectedPlaceChanged_selectionChanges() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        initUi(TYPICAL_PLACES);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Place secondPlace \u003d TYPICAL_PLACES.get(INDEX_SECOND_PLACE.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        guiRobot.interact(() -\u003e selectedPlace.set(secondPlace));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        PlaceCardHandle expectedPlace \u003d placeListPanelHandle.getPlaceCardHandle(INDEX_SECOND_PLACE.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        PlaceCardHandle selectedPlace \u003d placeListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertCardEquals(expectedPlace, selectedPlace);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Verifies that creating and deleting large number of places in {@code PlaceListPanel} requires lesser than"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public void performanceTest() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        ObservableList\u003cPlace\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        }, \"Creation and deletion of place cards exceeded time limit\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Returns a list of places containing {@code placeCount} places that is used to populate the"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * {@code PlaceListPanel}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private ObservableList\u003cPlace\u003e createBackingList(int placeCount) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        ObservableList\u003cPlace\u003e backingList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        for (int i \u003d 0; i \u003c placeCount; i++) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            Name name \u003d new Name(i + \"a\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            CountryCode countryCode \u003d new CountryCode(\"SGP\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            DateVisited dateVisited \u003d new DateVisited(\"05/04/2018\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            Rating rating \u003d new Rating(\"1\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            Description description \u003d new Description(\"aaa\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            Address address \u003d new Address(\"a\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            Place place \u003d new Place(name, countryCode, dateVisited, rating, description, address,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                Collections.emptySet());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            backingList.add(place);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return backingList;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Initializes {@code placeListPanelHandle} with a {@code PlaceListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code PlaceListPanel}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private void initUi(ObservableList\u003cPlace\u003e backingList) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        PlaceListPanel placeListPanel \u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                new PlaceListPanel(backingList, selectedPlace, selectedPlace::set);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        uiPartRule.setUiPart(placeListPanel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        placeListPanelHandle \u003d new PlaceListPanelHandle(getChildNode(placeListPanel.getRoot(),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                PlaceListPanelHandle.PLACE_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaungohsc": 1,
      "chung-ming": 20,
      "PremBagda": 89
    }
  },
  {
    "path": "src/test/java/seedu/travel/ui/ResultDisplayTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplayTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplayHandle resultDisplayHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(resultDisplay);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayHandle \u003d new ResultDisplayHandle(getChildNode(resultDisplay.getRoot(),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // default result text"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // new result received"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e resultDisplay.setFeedbackToUser(\"Dummy feedback to user\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"Dummy feedback to user\", resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/travel/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.ALICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.TravelBuddy;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STUB_SAVE_LOCATION \u003d Paths.get(\"Stub\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path RELATIVE_PATH \u003d Paths.get(\".\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private final TravelBuddy travelBuddy \u003d new TravelBuddy();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setUpBeforeClass() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // inject fixed clock"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void tearDownAfterClass() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // restore original clock"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION, travelBuddy);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // initial state"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(), SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        // after travel book is updated"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        guiRobot.interact(() -\u003e travelBuddy.addPlace(ALICE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * sync status matches that of {@code expectedSyncStatus}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 9,
      "-": 66
    }
  },
  {
    "path": "src/test/java/seedu/travel/ui/TestFxmlObject.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/travel/ui/UiPartTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.testutil.Assert;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.getRoot().toURI().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFilePathInView + \" does not exist.\", testFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 3,
      "-": 115
    }
  },
  {
    "path": "src/test/java/seedu/travel/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import guitests.guihandles.PlaceCardHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import guitests.guihandles.PlaceListPanelHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Place;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private static final String LABEL_DEFAULT_STYLE \u003d \"label\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public static void assertCardEquals(PlaceCardHandle expectedCard, PlaceCardHandle actualCard) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertEquals(expectedCard.getCountryCode(), actualCard.getCountryCode());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertEquals(expectedCard.getDescription(), actualCard.getDescription());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertEquals(expectedCard.getRating(), actualCard.getRating());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        expectedCard.getTags().forEach(tag -\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            assertEquals(expectedCard.getTagStyleClasses(tag), actualCard.getTagStyleClasses(tag)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedPlace}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public static void assertCardDisplaysPlace(Place expectedPlace, PlaceCardHandle actualCard) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertEquals(expectedPlace.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertEquals(expectedPlace.getCountryCode().code, actualCard.getCountryCode());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertEquals(expectedPlace.getRating().value, actualCard.getRating());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertEquals(expectedPlace.getDescription().value, actualCard.getDescription());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertEquals(expectedPlace.getAddress().value, actualCard.getAddress());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertTagsEqual(expectedPlace, actualCard);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Returns the color style for {@code tagName}\u0027s label. The tag\u0027s color is determined by looking up the color"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * in {@code PlaceCard#TAG_COLOR_STYLES}, using an index generated by the hash code of the tag\u0027s content."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * @param tagName Name of the tag."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private static String getTagColorStyleFor(String tagName) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        switch (tagName) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        case \"shoppingMall\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            return \"teal\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        case \"zoo\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        case \"cemetery\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        case \"heritageSite\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            return \"orange\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        case \"amusementPark\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        case \"animals\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            return \"brown\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        case \"temple\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        case \"mrt\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            return \"grey\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        case \"placeOfInterest\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        case \"recreation\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            return \"green\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        case \"airport\":"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            return \"salmon\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        case \"school\":"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            return \"black\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        case \"eastWestLine\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nivenang"
        },
        "content": "            return \"yellow\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            throw new AssertionError(tagName + \" does not have a color assigned.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Asserts that the tags in {@code actualCard} matches all the tags in {@code expectedPlace} with the correct"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * color."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private static void assertTagsEqual(Place expectedPlace, PlaceCardHandle actualCard) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        List\u003cString\u003e expectedTags \u003d expectedPlace.getTags().stream()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            .map(tag -\u003e tag.tagName).collect(Collectors.toList());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertEquals(expectedTags, actualCard.getTags());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        expectedTags.forEach(tag -\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            assertEquals(Arrays.asList(LABEL_DEFAULT_STYLE, getTagColorStyleFor(tag)),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                actualCard.getTagStyleClasses(tag)));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Asserts that the list in {@code placeListPanelHandle} displays the details of {@code places} correctly and"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public static void assertListMatching(PlaceListPanelHandle placeListPanelHandle, Place... places) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        for (int i \u003d 0; i \u003c places.length; i++) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            placeListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            assertCardDisplaysPlace(places[i], placeListPanelHandle.getPlaceCardHandle(i));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Asserts that the list in {@code placeListPanelHandle} displays the details of {@code places} correctly and"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public static void assertListMatching(PlaceListPanelHandle placeListPanelHandle, List\u003cPlace\u003e places) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertListMatching(placeListPanelHandle, places.toArray(new Place[0]));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Asserts the size of the list in {@code placeListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public static void assertListSize(PlaceListPanelHandle placeListPanelHandle, int size) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        int numberOfPeople \u003d placeListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 4,
      "PremBagda": 60,
      "nivenang": 23,
      "-": 48
    }
  },
  {
    "path": "src/test/java/seedu/travel/ui/testutil/StageRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TestRule;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runner.Description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runners.model.Statement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Properly sets up and tears down a JavaFx stage for our testing purposes."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StageRule implements TestRule {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void before() throws Throwable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void after() throws Throwable {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Statement apply(final Statement base, final Description description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Statement() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            public void evaluate() throws Throwable {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                before();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                    base.evaluate();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                } finally {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                    after();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/travel/ui/testutil/UiPartRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "package seedu.travel.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Parent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.ui.UiPart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides an isolated stage to test an individual {@code UiPart}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartRule extends StageRule {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String[] CSS_FILES \u003d {\"view/DarkTheme.css\", \"view/Extensions.css\"};"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUiPart(final UiPart\u003c? extends Parent\u003e uiPart) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupScene(() -\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                Scene scene \u003d new Scene(uiPart.getRoot());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                scene.getStylesheets().setAll(CSS_FILES);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                return scene;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Timeout should not happen.\", te);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 2,
      "-": 27
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.ADDRESS_DESC_AMK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.ADDRESS_DESC_BEDOK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.COUNTRY_CODE_DESC_AMK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.COUNTRY_CODE_DESC_BEDOK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.DATE_VISITED_DESC_AMK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.DATE_VISITED_DESC_BEDOK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.DESCRIPTION_AMK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.DESCRIPTION_BEDOK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.INVALID_COUNTRY_CODE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.INVALID_DESCRIPTION;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.INVALID_FORMAT_DATE_VISITED_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.INVALID_FUTURE_DATE_VISITED_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.INVALID_RATING_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.NAME_DESC_AMK;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.NAME_DESC_BEDOK;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.RATING_DESC_AMK;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.RATING_DESC_BEDOK;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.TAG_DESC_EWL;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.TAG_DESC_MRT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_ADDRESS_BEDOK;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_DATE_VISITED_BEDOK;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BEDOK;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_NAME_BEDOK;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_RATING_BEDOK;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.ALICE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.AMK;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.BEDOK;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.CARL;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.HOON;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.IDA;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.KEYWORD_MATCHING_SINGAPORE;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.Messages;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.index.Index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.Model;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Address;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.CountryCode;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import seedu.travel.model.place.DateVisited;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Description;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Name;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Place;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Rating;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.tag.Tag;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.testutil.PlaceBuilder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.testutil.PlaceUtil;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "public class AddCommandSystemTest extends TravelBuddySystemTest {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: add a place without tags to a non-empty travel book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        Place toAdd \u003d AMK;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        String command \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMK + \"  \" + COUNTRY_CODE_DESC_AMK + \"  \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + DATE_VISITED_DESC_AMK + \"  \" + RATING_DESC_AMK + \"  \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                + DESCRIPTION_AMK + \"   \" + ADDRESS_DESC_AMK + \"   \" + TAG_DESC_MRT + \" \";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        model.addPlace(toAdd);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: add a place with all fields same as another place in the travel book except name -\u003e added */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        toAdd \u003d new PlaceBuilder(AMK).withName(VALID_NAME_BEDOK).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        command \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            AddCommand.COMMAND_WORD + NAME_DESC_BEDOK + COUNTRY_CODE_DESC_AMK + DATE_VISITED_DESC_AMK"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + RATING_DESC_AMK + DESCRIPTION_AMK + ADDRESS_DESC_AMK + TAG_DESC_MRT;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: add to empty travel book -\u003e added */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        deleteAllPlaces();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ALICE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        /* Case: add a place with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        toAdd \u003d BEDOK;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        command \u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            AddCommand.COMMAND_WORD + TAG_DESC_MRT + RATING_DESC_BEDOK + COUNTRY_CODE_DESC_BEDOK"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + ADDRESS_DESC_BEDOK + NAME_DESC_BEDOK + TAG_DESC_EWL + DESCRIPTION_BEDOK + DATE_VISITED_DESC_BEDOK;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        /* Case: add a place, missing tags -\u003e added */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        /* Case: filters the place list before adding -\u003e added */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        showPlacesWithName(KEYWORD_MATCHING_SINGAPORE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        /* ------------------------ Perform add operation while a place card is selected --------------------------- */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        /* Case: selects first card in the place list, add a place -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        selectPlace(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(CARL);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        /* Case: add a duplicate place -\u003e rejected */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        command \u003d PlaceUtil.getAddCommand(HOON);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PLACE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        /* Case: add a duplicate place except with different date -\u003e rejected */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        toAdd \u003d new PlaceBuilder(HOON).withDateVisited(VALID_DATE_VISITED_BEDOK).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        command \u003d PlaceUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PLACE);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        /* Case: add a duplicate place except with different rating -\u003e rejected */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        toAdd \u003d new PlaceBuilder(HOON).withRating(VALID_RATING_BEDOK).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        command \u003d PlaceUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PLACE);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: add a duplicate place except with different description -\u003e rejected */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        toAdd \u003d new PlaceBuilder(HOON).withDescription(VALID_DESCRIPTION_BEDOK).build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        command \u003d PlaceUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PLACE);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: add a duplicate place except with different travel -\u003e rejected */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        toAdd \u003d new PlaceBuilder(HOON).withAddress(VALID_ADDRESS_BEDOK).build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        command \u003d PlaceUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PLACE);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        /* Case: add a duplicate place except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        command \u003d PlaceUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PLACE);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + RATING_DESC_AMK + COUNTRY_CODE_DESC_AMK + DATE_VISITED_DESC_AMK"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + DESCRIPTION_AMK + ADDRESS_DESC_AMK;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        /* Case: missing country code  -\u003e rejected */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMK + RATING_DESC_AMK + DATE_VISITED_DESC_AMK"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + DESCRIPTION_AMK + ADDRESS_DESC_AMK;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        /* Case: missing date -\u003e rejected */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMK + RATING_DESC_AMK + COUNTRY_CODE_DESC_AMK"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            + DESCRIPTION_AMK + ADDRESS_DESC_AMK;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        /* Case: missing rating -\u003e rejected */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMK + COUNTRY_CODE_DESC_AMK + DATE_VISITED_DESC_AMK"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + DESCRIPTION_AMK + ADDRESS_DESC_AMK;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: missing description -\u003e rejected */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMK + COUNTRY_CODE_DESC_AMK + DATE_VISITED_DESC_AMK"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + RATING_DESC_AMK + ADDRESS_DESC_AMK;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing address -\u003e rejected */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMK + RATING_DESC_AMK + COUNTRY_CODE_DESC_AMK"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + DATE_VISITED_DESC_AMK + DESCRIPTION_AMK;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        command \u003d \"adds \" + PlaceUtil.getPlaceDetails(toAdd);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + COUNTRY_CODE_DESC_AMK + DATE_VISITED_DESC_AMK"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                    + RATING_DESC_AMK"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                    + DESCRIPTION_AMK + ADDRESS_DESC_AMK;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        /* Case: invalid country code -\u003e rejected */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMK + INVALID_COUNTRY_CODE_DESC + RATING_DESC_AMK"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + DESCRIPTION_AMK + DATE_VISITED_DESC_AMK + ADDRESS_DESC_AMK;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertCommandFailure(command, CountryCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        /* Case: incorrect date visited -\u003e rejected */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMK + COUNTRY_CODE_DESC_AMK + INVALID_FORMAT_DATE_VISITED_DESC"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + RATING_DESC_AMK"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + DESCRIPTION_AMK + ADDRESS_DESC_AMK;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertCommandFailure(command, DateVisited.MESSAGE_INCORRECT_FORMAT);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        /* Case: invalid date visited -\u003e rejected */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMK + COUNTRY_CODE_DESC_AMK + INVALID_FUTURE_DATE_VISITED_DESC"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + RATING_DESC_AMK + DESCRIPTION_AMK + ADDRESS_DESC_AMK;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertCommandFailure(command, DateVisited.MESSAGE_FUTURE_DATE_ADDED);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        /* Case: invalid rating -\u003e rejected */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMK + COUNTRY_CODE_DESC_AMK + DATE_VISITED_DESC_AMK"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + INVALID_RATING_DESC + DESCRIPTION_AMK + ADDRESS_DESC_AMK;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandFailure(command, Rating.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: invalid description -\u003e rejected */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMK + COUNTRY_CODE_DESC_AMK + DATE_VISITED_DESC_AMK"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + RATING_DESC_AMK + INVALID_DESCRIPTION + ADDRESS_DESC_AMK;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertCommandFailure(command, Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMK + COUNTRY_CODE_DESC_AMK + DATE_VISITED_DESC_AMK"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + RATING_DESC_AMK + DESCRIPTION_AMK + INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMK + COUNTRY_CODE_DESC_AMK + DATE_VISITED_DESC_AMK"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + RATING_DESC_AMK + DESCRIPTION_AMK + ADDRESS_DESC_AMK + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * 4. {@code Storage} and {@code PlaceListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * {@code TravelBuddySystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * @see TravelBuddySystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private void assertCommandSuccess(Place toAdd) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertCommandSuccess(PlaceUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Place)}. Executes {@code command}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Place)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private void assertCommandSuccess(String command, Place toAdd) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        expectedModel.addPlace(toAdd);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Place)} except asserts that"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * 2. {@code Storage} and {@code PlaceListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Place)"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * 4. {@code Storage} and {@code PlaceListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * {@code TravelBuddySystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * @see TravelBuddySystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 65,
      "PremBagda": 89,
      "nivenang": 12,
      "-": 129
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.KEYWORD_MATCHING_SINGAPORE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "public class ClearCommandSystemTest extends TravelBuddySystemTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: clear non-empty travel book, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: undo clearing travel book -\u003e original travel book restored */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: redo clearing travel book -\u003e cleared */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: selects first card in place list and clears travel book -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original travel book"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        selectPlace(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: filters the place list before clearing -\u003e entire travel book cleared */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original travel book"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        showPlacesWithName(KEYWORD_MATCHING_SINGAPORE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: clear empty travel book -\u003e cleared */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * {@code TravelBuddySystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * @see TravelBuddySystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shaungohsc"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * {@code TravelBuddySystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * @see TravelBuddySystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaungohsc": 3,
      "chung-ming": 21,
      "PremBagda": 1,
      "nivenang": 1,
      "-": 78
    }
  },
  {
    "path": "src/test/java/systemtests/ClockRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TestRule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runner.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runners.model.Statement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * This rule makes the time stamp in the status bar predictable during a test."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Before the test starts, the rule replaces the clock in the status bar with a fixed clock."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * At the end of the test, the rule restores the original clock."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Clock#fixed(Instant, ZoneId)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClockRule implements TestRule {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Clock injectedClock;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void before() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void after() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public Statement apply(final Statement base, final Description description) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Statement() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            public void evaluate() throws Throwable {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                before();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    base.evaluate();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                } finally {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    after();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Clock getInjectedClock() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return injectedClock;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the clock in the status bar with a fixed clock having the current time as its instance."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setInjectedClockToCurrentTime() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 1,
      "-": 56
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.commons.core.Messages.MESSAGE_INVALID_PLACE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.DeleteCommand.MESSAGE_DELETE_PLACE_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TestUtil.getPlace;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalIndexes.INDEX_FIRST_PLACE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.KEYWORD_MATCHING_SINGAPORE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Place;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "public class DeleteCommandSystemTest extends TravelBuddySystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        /* Case: delete the first place in the list, command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_PLACE.getOneBased() + \"       \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Place deletedPlace \u003d removePlace(expectedModel, INDEX_FIRST_PLACE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PLACE_SUCCESS, deletedPlace);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        /* Case: delete the last place in the list -\u003e deleted */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Index lastPlaceIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertCommandSuccess(lastPlaceIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        /* Case: undo deleting the last place in the list -\u003e last place restored */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        /* Case: redo deleting the last place in the list -\u003e last place deleted again */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        removePlace(modelBeforeDeletingLast, lastPlaceIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        /* Case: delete the middle place in the list -\u003e deleted */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Index middlePlaceIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertCommandSuccess(middlePlaceIndex);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: filtered place list, delete index within bounds of travel book and place list -\u003e deleted */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        showPlacesWithName(KEYWORD_MATCHING_SINGAPORE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Index index \u003d INDEX_FIRST_PLACE;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPlaceList().size());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: filtered place list, delete index within bounds of travel book but out of bounds of place list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        showPlacesWithName(KEYWORD_MATCHING_SINGAPORE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        int invalidIndex \u003d getModel().getTravelBuddy().getPlaceList().size();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PLACE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        /* --------------------- Performing delete operation while a place card is selected ------------------------ */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        /* Case: delete the selected place -\u003e place list panel selects the place before the deleted place */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        showAllPlaces();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        selectPlace(selectedIndex);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        deletedPlace \u003d removePlace(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PLACE_SUCCESS, deletedPlace);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                getModel().getTravelBuddy().getPlaceList().size() + 1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PLACE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Removes the {@code Place} at the specified {@code index} in {@code model}\u0027s travel book."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * @return the removed place"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private Place removePlace(Model model, Index index) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Place targetPlace \u003d getPlace(model, index);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        model.deletePlace(targetPlace);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return targetPlace;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Deletes the place at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Place deletedPlace \u003d removePlace(expectedModel, toDelete);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PLACE_SUCCESS, deletedPlace);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * {@code TravelBuddySystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * @see TravelBuddySystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * @see TravelBuddySystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * {@code TravelBuddySystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * @see TravelBuddySystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 34,
      "PremBagda": 23,
      "nivenang": 2,
      "-": 134
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.ADDRESS_DESC_AMK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.ADDRESS_DESC_BEDOK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.ADDRESS_DESC_DG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.COUNTRY_CODE_DESC_AMERICA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.COUNTRY_CODE_DESC_BEDOK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.COUNTRY_CODE_DESC_DG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.DATE_VISITED_DESC_BEDOK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.DATE_VISITED_DESC_DG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.DESCRIPTION_AMK;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.DESCRIPTION_BEDOK;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.DESCRIPTION_DG;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.INVALID_COUNTRY_CODE_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.INVALID_DESCRIPTION;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.INVALID_FORMAT_DATE_VISITED_DESC;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.INVALID_FUTURE_DATE_VISITED_DESC;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.INVALID_RATING_DESC;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.NAME_DESC_AMK;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.NAME_DESC_BEDOK;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.NAME_DESC_CLEMENTI;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.NAME_DESC_DG;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.RATING_DESC_AMK;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.RATING_DESC_BEDOK;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.RATING_DESC_DG;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.TAG_DESC_EWL;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.TAG_DESC_MRT;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_NAME_AMK;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_NAME_CLEMENTI;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.CommandTestUtil.VALID_TAG_EWL;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.model.Model.PREDICATE_SHOW_ALL_PLACES;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalIndexes.INDEX_FIRST_PLACE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalIndexes.INDEX_SECOND_PLACE;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.BEDOK;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.DG;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.KEYWORD_MATCHING_SINGAPORE;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.Messages;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.index.Index;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.Model;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Address;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.CountryCode;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import seedu.travel.model.place.DateVisited;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Description;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Name;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Place;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Rating;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.tag.Tag;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.testutil.PlaceBuilder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.testutil.PlaceUtil;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chung-ming"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "public class EditCommandSystemTest extends TravelBuddySystemTest {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        Index index \u003d INDEX_FIRST_PLACE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BEDOK + \"  \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + COUNTRY_CODE_DESC_BEDOK + \" \" + DATE_VISITED_DESC_BEDOK + \" \""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                + RATING_DESC_BEDOK + \" \" + DESCRIPTION_BEDOK + \"  \" + ADDRESS_DESC_BEDOK + \" \" + TAG_DESC_EWL + \" \";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        Place editedPlace \u003d new PlaceBuilder(BEDOK).withTags(VALID_TAG_EWL).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertCommandSuccess(command, index, editedPlace);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        /* Case: undo editing the last place in the list -\u003e last place restored */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        /* Case: redo editing the last place in the list -\u003e last place edited again */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        model.setPlace(getModel().getFilteredPlaceList().get(INDEX_FIRST_PLACE.getZeroBased()), editedPlace);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        /* Case: edit a place with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BEDOK + COUNTRY_CODE_DESC_BEDOK"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + DATE_VISITED_DESC_BEDOK"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + RATING_DESC_BEDOK"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                + DESCRIPTION_BEDOK + ADDRESS_DESC_BEDOK + TAG_DESC_MRT + TAG_DESC_EWL;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, index, BEDOK);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        /* Case: edit a place with new values same as another place\u0027s values but with different name -\u003e edited */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertTrue(getModel().getTravelBuddy().getPlaceList().contains(BEDOK));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        index \u003d INDEX_SECOND_PLACE;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertNotEquals(getModel().getFilteredPlaceList().get(index.getZeroBased()), BEDOK);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMK + COUNTRY_CODE_DESC_BEDOK"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + DATE_VISITED_DESC_BEDOK + RATING_DESC_BEDOK"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                + DESCRIPTION_BEDOK + ADDRESS_DESC_BEDOK + TAG_DESC_MRT + TAG_DESC_EWL;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        editedPlace \u003d new PlaceBuilder(BEDOK).withName(VALID_NAME_AMK).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertCommandSuccess(command, index, editedPlace);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        /* Case: edit a place with new values same as another place\u0027s values but with different rating and description"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        index \u003d INDEX_SECOND_PLACE;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BEDOK + RATING_DESC_AMK"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + COUNTRY_CODE_DESC_BEDOK + DATE_VISITED_DESC_BEDOK"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                + DESCRIPTION_AMK + ADDRESS_DESC_BEDOK + TAG_DESC_MRT + TAG_DESC_EWL;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PLACE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        index \u003d INDEX_FIRST_PLACE;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Place placeToEdit \u003d getModel().getFilteredPlaceList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        editedPlace \u003d new PlaceBuilder(placeToEdit).withTags().build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertCommandSuccess(command, index, editedPlace);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        /* Case: filtered place list, edit index within bounds of travel buddy and place list -\u003e edited */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        showPlacesWithName(KEYWORD_MATCHING_SINGAPORE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        index \u003d INDEX_FIRST_PLACE;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPlaceList().size());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_CLEMENTI;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        placeToEdit \u003d getModel().getFilteredPlaceList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        editedPlace \u003d new PlaceBuilder(placeToEdit).withName(VALID_NAME_CLEMENTI).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertCommandSuccess(command, index, editedPlace);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        /* Case: filtered place list, edit index within bounds of travel buddy but out of bounds of place list"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        showPlacesWithName(KEYWORD_MATCHING_SINGAPORE);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        int invalidIndex \u003d getModel().getTravelBuddy().getPlaceList().size();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BEDOK,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                Messages.MESSAGE_INVALID_PLACE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        /* --------------------- Performing edit operation while a place card is selected -------------------------- */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        /* Case: selects first card in the place list, edit a place -\u003e edited, card selection remains unchanged but"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "         * browser url changes"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        showAllPlaces();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        index \u003d INDEX_FIRST_PLACE;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        selectPlace(index);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_DG + COUNTRY_CODE_DESC_DG"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + DATE_VISITED_DESC_DG + RATING_DESC_DG + DESCRIPTION_DG + ADDRESS_DESC_DG;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        // browser\u0027s url is updated to reflect the new place\u0027s name"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, index, DG, index);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BEDOK,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BEDOK,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredPlaceList().size() + 1;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BEDOK,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                Messages.MESSAGE_INVALID_PLACE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BEDOK,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PLACE.getOneBased(),"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PLACE.getOneBased()"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        /* Case: invalid country code -\u003e rejected */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PLACE.getOneBased()"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            + INVALID_COUNTRY_CODE_DESC, CountryCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        /* Case: invalid date visited -\u003e rejected */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PLACE.getOneBased()"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            + INVALID_FORMAT_DATE_VISITED_DESC, DateVisited.MESSAGE_INCORRECT_FORMAT);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "PremBagda"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        /* Case: future date visited entered -\u003e rejected */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PLACE.getOneBased()"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "            + INVALID_FUTURE_DATE_VISITED_DESC, DateVisited.MESSAGE_FUTURE_DATE_ADDED);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        /* Case: invalid rating -\u003e rejected */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PLACE.getOneBased()"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                + INVALID_RATING_DESC, Rating.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: invalid description -\u003e rejected */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PLACE.getOneBased()"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                + INVALID_DESCRIPTION, Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PLACE.getOneBased()"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PLACE.getOneBased()"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        /* Case: edit a place with new values same as another place\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        executeCommand(PlaceUtil.getAddCommand(BEDOK));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertTrue(getModel().getTravelBuddy().getPlaceList().contains(BEDOK));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        index \u003d INDEX_FIRST_PLACE;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(getModel().getFilteredPlaceList().get(index.getZeroBased()).equals(BEDOK));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BEDOK + COUNTRY_CODE_DESC_BEDOK"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + DATE_VISITED_DESC_BEDOK + RATING_DESC_BEDOK + DESCRIPTION_BEDOK + ADDRESS_DESC_BEDOK + TAG_DESC_MRT"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + TAG_DESC_EWL;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PLACE);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        /* Case: edit a place with new values same as another place\u0027s values but with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BEDOK + COUNTRY_CODE_DESC_BEDOK"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + DATE_VISITED_DESC_BEDOK + RATING_DESC_BEDOK"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                + DESCRIPTION_BEDOK + ADDRESS_DESC_BEDOK + TAG_DESC_EWL;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PLACE);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        /* Case: edit a place with new values same as another place\u0027s values but with different address -\u003e rejected */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BEDOK + COUNTRY_CODE_DESC_BEDOK"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + DATE_VISITED_DESC_BEDOK + RATING_DESC_BEDOK"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                + DESCRIPTION_BEDOK + ADDRESS_DESC_AMK + TAG_DESC_MRT + TAG_DESC_EWL;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PLACE);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        /* Case: edit a place with new values same as another place\u0027s values but with different country -\u003e rejected */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BEDOK + COUNTRY_CODE_DESC_AMERICA"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                + RATING_DESC_BEDOK"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                + DESCRIPTION_BEDOK + ADDRESS_DESC_AMK + TAG_DESC_MRT + TAG_DESC_EWL;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PLACE);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        /* Case: edit a place with new values same as another place\u0027s values but with different rating -\u003e rejected */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BEDOK + COUNTRY_CODE_DESC_BEDOK"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + DATE_VISITED_DESC_BEDOK + RATING_DESC_AMK"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                + DESCRIPTION_BEDOK + ADDRESS_DESC_BEDOK + TAG_DESC_MRT + TAG_DESC_EWL;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PLACE);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: edit a place with new values same as another place\u0027s values but with different description -\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        rejected */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BEDOK + COUNTRY_CODE_DESC_BEDOK"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "                + DATE_VISITED_DESC_BEDOK + RATING_DESC_BEDOK"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                + DESCRIPTION_AMK + ADDRESS_DESC_BEDOK + TAG_DESC_MRT + TAG_DESC_EWL;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PLACE);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Place, Index)} except that"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Place, Index)"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Place editedPlace) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedPlace, null);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the place at index {@code toEdit} being"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * updated to values specified {@code editedPlace}.\u003cbr\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Place editedPlace,"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        expectedModel.setPlace(expectedModel.getFilteredPlaceList().get(toEdit.getZeroBased()), editedPlace);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        expectedModel.updateFilteredPlaceList(PREDICATE_SHOW_ALL_PLACES);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_PLACE_SUCCESS, editedPlace), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * {@code TravelBuddySystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * @see TravelBuddySystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * @see TravelBuddySystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        expectedModel.updateFilteredPlaceList(PREDICATE_SHOW_ALL_PLACES);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * {@code TravelBuddySystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * @see TravelBuddySystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 87,
      "PremBagda": 64,
      "nivenang": 44,
      "-": 144
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalIndexes.INDEX_FIRST_PLACE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "public class HelpCommandSystemTest extends TravelBuddySystemTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        getPlaceListPanel().click();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        //getBrowserPanel().click();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        //getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        //assertHelpWindowNotOpen();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PLACE.getOneBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        //assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertListMatching(getPlaceListPanel(), getModel().getFilteredPlaceList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PLACE.getOneBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 13,
      "PremBagda": 2,
      "-": 91
    }
  },
  {
    "path": "src/test/java/systemtests/ModelHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Place;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods to set up {@code Model} for testing."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelHelper {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    private static final Predicate\u003cPlace\u003e PREDICATE_MATCHING_NO_PLACES \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public static void setFilteredList(Model model, List\u003cPlace\u003e toDisplay) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Optional\u003cPredicate\u003cPlace\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        model.updateFilteredPlaceList(predicate.orElse(PREDICATE_MATCHING_NO_PLACES));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ModelHelper#setFilteredList(Model, List)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public static void setFilteredList(Model model, Place... toDisplay) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        setFilteredList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code Place} equals to {@code other}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    private static Predicate\u003cPlace\u003e getPredicateMatching(Place other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return place -\u003e place.equals(other);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 4,
      "PremBagda": 6,
      "-": 29
    }
  },
  {
    "path": "src/test/java/systemtests/SampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.TravelBuddy;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.place.Place;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.testutil.TestUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "public class SampleDataTest extends TravelBuddySystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    protected TravelBuddy getInitialData() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public void travelBuddy_dataFileDoesNotExist_loadSampleData() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Place[] expectedList \u003d SampleDataUtil.getSamplePlaces();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertListMatching(getPlaceListPanel(), expectedList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 8,
      "PremBagda": 2,
      "-": 41
    }
  },
  {
    "path": "src/test/java/systemtests/SearchCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.commons.core.Messages.MESSAGE_PLACES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.CARL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.ELLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.FIONA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.KEYWORD_MATCHING_SINGAPORE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "public class SearchCommandSystemTest extends TravelBuddySystemTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: find multiple places in travel book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nivenang"
        },
        "content": "         * -\u003e 4 places found"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        String command \u003d \"   \" + SearchCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_SINGAPORE + \"   \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, CARL, ELLE, FIONA);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        /* Case: repeat previous find command where place list is displaying the places we are finding"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nivenang"
        },
        "content": "         * -\u003e 4 places found"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_SINGAPORE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        /* Case: find place where place list is not displaying the place we are finding -\u003e 1 place found */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchCommand.COMMAND_WORD + \" University\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, ELLE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: find multiple places in travel book, 2 keywords -\u003e 2 places found */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchCommand.COMMAND_WORD + \" University Zoo\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, ELLE, FIONA);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: find multiple places in travel book, 2 keywords in reversed order -\u003e 2 places found */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchCommand.COMMAND_WORD + \" Zoo University\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: find multiple places in travel book, 2 keywords with 1 repeat -\u003e 2 places found */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchCommand.COMMAND_WORD + \" Zoo University Zoo\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: find multiple places in travel book, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "         * -\u003e 2 places found"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchCommand.COMMAND_WORD + \" Zoo University NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: find same places in travel book after deleting 1 of them -\u003e 3 places found */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertFalse(getModel().getTravelBuddy().getPlaceList().contains(ELLE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_SINGAPORE;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, CARL, FIONA);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: find place in travel book, keyword is same as name but of different case -\u003e 3 places found */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchCommand.COMMAND_WORD + \" SiNgApOrE\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: find place in travel book, keyword is substring of name -\u003e 0 places found */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchCommand.COMMAND_WORD + \" Sin\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: find place in travel book, name is substring of keyword -\u003e 0 places found */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchCommand.COMMAND_WORD + \" Singapores\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: find place not in travel book -\u003e 0 places found */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchCommand.COMMAND_WORD + \" Mosque\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: find rating of place in travel book -\u003e 0 places found */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchCommand.COMMAND_WORD + \" \" + CARL.getRating().value;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: find travel of place in travel book -\u003e 0 places found */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchCommand.COMMAND_WORD + \" \" + CARL.getAddress().value;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: find description of place in travel book -\u003e 0 places found */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchCommand.COMMAND_WORD + \" \" + CARL.getDescription().value;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: find tags of place in travel book -\u003e 0 places found */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(CARL.getTags());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        /* Case: find while a place is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        showAllPlaces();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        selectPlace(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(getPlaceListPanel().getHandleToSelectedCard().getName().equals(CARL.getName().fullName));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchCommand.COMMAND_WORD + \" Universal\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: find place in empty travel book -\u003e 0 places found */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        deleteAllPlaces();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_SINGAPORE;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d \"sEaRcH Temple\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * box displays {@code Messages#MESSAGE_PLACES_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * {@code TravelBuddySystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * @see TravelBuddySystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                MESSAGE_PLACES_LISTED_OVERVIEW, expectedModel.getFilteredPlaceList().size());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * {@code TravelBuddySystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * @see TravelBuddySystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 37,
      "PremBagda": 7,
      "nivenang": 29,
      "-": 123
    }
  },
  {
    "path": "src/test/java/systemtests/SearchCountryCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nivenang"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static seedu.travel.commons.core.Messages.MESSAGE_PLACES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static seedu.travel.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.BENSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.DANIEL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.ELLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.FIONA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.GEORGE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.KEYWORD_MATCHING_SGP;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.logic.commands.SearchCountryCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nivenang"
        },
        "content": "public class SearchCountryCommandSystemTest extends TravelBuddySystemTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        /* Case: find multiple places in travel buddy, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nivenang"
        },
        "content": "         * -\u003e 6 places found"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nivenang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        String command \u003d \"   \" + SearchCountryCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_SGP + \"   \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, ALICE, BENSON, CARL, ELLE, FIONA, GEORGE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        /* Case: repeat previous search command where place list is displaying the places we are finding"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nivenang"
        },
        "content": "         * -\u003e 6 places found"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nivenang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchCountryCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_SGP;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        /* Case: find multiple places in travel book, 2 keywords -\u003e 7 places found */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchCountryCommand.COMMAND_WORD + \" SGP JPN\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        /* Case: find multiple places in travel book, 2 keywords in reversed order -\u003e 7 places found */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchCountryCommand.COMMAND_WORD + \" JPN SGP\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        /* Case: find multiple places in travel book, 2 keywords with 1 repeat -\u003e 7 places found */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchCountryCommand.COMMAND_WORD + \" JPN SGP JPN\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        /* Case: find multiple places in travel book, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nivenang"
        },
        "content": "         * -\u003e 7 places found"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nivenang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchCountryCommand.COMMAND_WORD + \" SGP JPN CHN\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        /* Case: undo previous search rating command -\u003e rejected */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        /* Case: redo previous search rating command -\u003e rejected */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        /* Case: find same places in travel book after deleting 1 of them -\u003e 5 places found */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(getModel().getTravelBuddy().getPlaceList().contains(ALICE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchCountryCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_SGP;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, CARL, ELLE, FIONA, GEORGE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        /* Case: find place in travel book, keyword is not found in travel book -\u003e 0 places found */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchCountryCommand.COMMAND_WORD + \" HKG\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        /* Case: find while a place is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        showAllPlaces();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        selectPlace(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(getPlaceListPanel().getHandleToSelectedCard().getName().equals(CARL.getName().fullName));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchCountryCommand.COMMAND_WORD + \" JPN\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        /* Case: find place in empty travel book -\u003e 0 places found */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        deleteAllPlaces();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchCountryCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_SGP;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d \"sEaRcHc SGP\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * box displays {@code Messages#MESSAGE_PLACES_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * {@code TravelBuddySystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * @see TravelBuddySystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                MESSAGE_PLACES_LISTED_OVERVIEW, expectedModel.getFilteredPlaceList().size());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * {@code TravelBuddySystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * @see TravelBuddySystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nivenang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nivenang": 152
    }
  },
  {
    "path": "src/test/java/systemtests/SearchRatingCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nivenang"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.commons.core.Messages.MESSAGE_PLACES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.BENSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.GEORGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.KEYWORD_MATCHING_FOUR;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.SearchRatingCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "public class SearchRatingCommandSystemTest extends TravelBuddySystemTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: find multiple places in travel book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nivenang"
        },
        "content": "         * -\u003e 3 places found"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nivenang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        String command \u003d \"   \" + SearchRatingCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_FOUR + \"   \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL, ELLE, GEORGE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        /* Case: repeat previous search command where place list is displaying the places we are finding"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nivenang"
        },
        "content": "         * -\u003e 3 places found"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nivenang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchRatingCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_FOUR;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: find multiple places in travel book, 2 keywords -\u003e 4 places found */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchRatingCommand.COMMAND_WORD + \" 4 5\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, CARL, ELLE, GEORGE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: find multiple places in travel book, 2 keywords in reversed order -\u003e 4 places found */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchRatingCommand.COMMAND_WORD + \" 5 4\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: find multiple places in travel book, 2 keywords with 1 repeat -\u003e 4 places found */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchRatingCommand.COMMAND_WORD + \" 5 4 5\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: find multiple places in travel book, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nivenang"
        },
        "content": "         * -\u003e 4 places found"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nivenang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchRatingCommand.COMMAND_WORD + \" 4 5 2\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        /* Case: undo previous search rating command -\u003e rejected */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        /* Case: redo previous search rating command -\u003e rejected */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: find same places in travel book after deleting 1 of them -\u003e 3 places found */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertFalse(getModel().getTravelBuddy().getPlaceList().contains(BENSON));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchRatingCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_FOUR;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL, ELLE, GEORGE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: find place in travel book, keyword is not found in travel book -\u003e 0 places found */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchRatingCommand.COMMAND_WORD + \" 2\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        /* Case: find while a place is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        showAllPlaces();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        selectPlace(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(getPlaceListPanel().getHandleToSelectedCard().getName().equals(CARL.getName().fullName));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchRatingCommand.COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, ALICE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: find place in empty travel book -\u003e 0 places found */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        deleteAllPlaces();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchRatingCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_FOUR;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d \"sEaRcHr 4\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * box displays {@code Messages#MESSAGE_PLACES_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * {@code TravelBuddySystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * @see TravelBuddySystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                MESSAGE_PLACES_LISTED_OVERVIEW, expectedModel.getFilteredPlaceList().size());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * {@code TravelBuddySystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * @see TravelBuddySystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nivenang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 30,
      "nivenang": 120
    }
  },
  {
    "path": "src/test/java/systemtests/SearchTagsCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nivenang"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.commons.core.Messages.MESSAGE_PLACES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.BENSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.KEYWORD_MATCHING_SHOPPING_MALL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.SearchTagsCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "public class SearchTagsCommandSystemTest extends TravelBuddySystemTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: find multiple places in travel book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nivenang"
        },
        "content": "         * -\u003e 2 places found"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nivenang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        String command \u003d \"   \" + SearchTagsCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_SHOPPING_MALL + \"   \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, ALICE, BENSON);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        /* Case: repeat previous find command where place list is displaying the places we are finding"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nivenang"
        },
        "content": "         * -\u003e 2 places found"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nivenang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchTagsCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_SHOPPING_MALL;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        /* Case: find place where place list is not displaying the place we are finding -\u003e 1 place found */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchTagsCommand.COMMAND_WORD + \" school\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, ELLE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: find multiple places in travel book, 2 keywords -\u003e 2 places found */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchTagsCommand.COMMAND_WORD + \" school zoo\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, ELLE, FIONA);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: find multiple places in travel book, 2 keywords in reversed order -\u003e 2 places found */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchTagsCommand.COMMAND_WORD + \" zoo school\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: find multiple places in travel book, 2 keywords with 1 repeat -\u003e 2 places found */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchTagsCommand.COMMAND_WORD + \" zoo school zoo\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: find multiple places in travel book, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nivenang"
        },
        "content": "         * -\u003e 2 places found"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nivenang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchTagsCommand.COMMAND_WORD + \" zoo school NonMatchingKeyword\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: find same places in travel book after deleting 1 of them -\u003e 0 places found */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertFalse(getModel().getTravelBuddy().getPlaceList().contains(ELLE));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchTagsCommand.COMMAND_WORD + \" \" + \"school\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: find place in travel book, keyword is same as tags but of different case -\u003e 2 places found */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchTagsCommand.COMMAND_WORD + \" sHopPinGmALL\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, ALICE, BENSON);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: find place in travel book, keyword is substring of name -\u003e 0 places found */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchTagsCommand.COMMAND_WORD + \" temp\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: find place in travel book, name is substring of keyword -\u003e 0 places found */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchTagsCommand.COMMAND_WORD + \" temples\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: find place not in travel book -\u003e 0 places found */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchTagsCommand.COMMAND_WORD + \" mosque\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: find name of place in travel book -\u003e 0 places found */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchTagsCommand.COMMAND_WORD + \" \" + CARL.getName().fullName;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: find rating of place in travel book -\u003e 0 places found */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchTagsCommand.COMMAND_WORD + \" \" + CARL.getRating().value;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: find travel of place in travel book -\u003e 0 places found */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchTagsCommand.COMMAND_WORD + \" \" + CARL.getAddress().value;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: find description of place in travel book -\u003e 0 places found */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchTagsCommand.COMMAND_WORD + \" \" + CARL.getDescription().value;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        /* Case: find while a place is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        showAllPlaces();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        selectPlace(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(getPlaceListPanel().getHandleToSelectedCard().getName().equals(CARL.getName().fullName));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchTagsCommand.COMMAND_WORD + \" amusementPark\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: find place in empty travel book -\u003e 0 places found */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        deleteAllPlaces();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchTagsCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_SHOPPING_MALL;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d \"sEaRcHt Temple\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * box displays {@code Messages#MESSAGE_PLACES_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * {@code TravelBuddySystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * @see TravelBuddySystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                MESSAGE_PLACES_LISTED_OVERVIEW, expectedModel.getFilteredPlaceList().size());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * {@code TravelBuddySystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * @see TravelBuddySystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nivenang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 37,
      "nivenang": 156
    }
  },
  {
    "path": "src/test/java/systemtests/SearchYearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nivenang"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static seedu.travel.commons.core.Messages.MESSAGE_PLACES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static seedu.travel.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.BENSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.DANIEL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.GEORGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.KEYWORD_MATCHING_2016;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.logic.commands.SearchYearCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nivenang"
        },
        "content": "import seedu.travel.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nivenang"
        },
        "content": "public class SearchYearCommandSystemTest extends TravelBuddySystemTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        /* Case: find multiple places in travel buddy, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nivenang"
        },
        "content": "         * -\u003e 3 places found"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nivenang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        String command \u003d \"   \" + SearchYearCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_2016 + \"   \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, ALICE, CARL, DANIEL);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        /* Case: repeat previous search command where place list is displaying the places we are finding"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nivenang"
        },
        "content": "         * -\u003e 3 places found"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nivenang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchYearCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_2016;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        /* Case: find multiple places in travel book, 2 keywords -\u003e 5 places found */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchYearCommand.COMMAND_WORD + \" 2016 2017\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, ALICE, BENSON, CARL, DANIEL, GEORGE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        /* Case: find multiple places in travel book, 2 keywords in reversed order -\u003e 5 places found */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchYearCommand.COMMAND_WORD + \" 2017 2016\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        /* Case: find multiple places in travel book, 2 keywords with 1 repeat -\u003e 5 places found */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchYearCommand.COMMAND_WORD + \" 2017 2016 2017\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        /* Case: find multiple places in travel book, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nivenang"
        },
        "content": "         * -\u003e 5 places found"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nivenang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchYearCommand.COMMAND_WORD + \" 2016 2017 1996\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        /* Case: find multiple places in travel book, valid range of years"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nivenang"
        },
        "content": "         * -\u003e 5 places found"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nivenang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchYearCommand.COMMAND_WORD + \" 2016-2017\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        /* Case: undo previous search rating command -\u003e rejected */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        /* Case: redo previous search rating command -\u003e rejected */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        /* Case: find same places in travel book after deleting 1 of them -\u003e 2 places found */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(getModel().getTravelBuddy().getPlaceList().contains(ALICE));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchYearCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_2016;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL, DANIEL);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        /* Case: find place in travel book, keyword is not found in travel book -\u003e 0 places found */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchYearCommand.COMMAND_WORD + \" 1997\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        /* Case: find while a place is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        showAllPlaces();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        selectPlace(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertFalse(getPlaceListPanel().getHandleToSelectedCard().getName().equals(CARL.getName().fullName));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchYearCommand.COMMAND_WORD + \" 2017\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, GEORGE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        /* Case: find place in empty travel book -\u003e 0 places found */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        deleteAllPlaces();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d SearchYearCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_2016;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        command \u003d \"sEaRcHyEaR 2016\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * box displays {@code Messages#MESSAGE_PLACES_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * {@code TravelBuddySystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * @see TravelBuddySystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nivenang"
        },
        "content": "                MESSAGE_PLACES_LISTED_OVERVIEW, expectedModel.getFilteredPlaceList().size());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * {@code TravelBuddySystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     * @see TravelBuddySystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nivenang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nivenang"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nivenang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nivenang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nivenang": 157
    }
  },
  {
    "path": "src/test/java/systemtests/SelectCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.commons.core.Messages.MESSAGE_INVALID_PLACE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.logic.commands.SelectCommand.MESSAGE_SELECT_PLACE_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalIndexes.INDEX_FIRST_PLACE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.testutil.TypicalPlaces.KEYWORD_MATCHING_SINGAPORE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "public class SelectCommandSystemTest extends TravelBuddySystemTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        /* Case: select the first card in the place list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PLACE.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST_PLACE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        /* Case: select the last card in the place list -\u003e selected */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        Index placeCount \u003d getLastIndex(getModel());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + placeCount.getOneBased();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertCommandSuccess(command, placeCount);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        /* Case: select the middle card in the place list -\u003e selected */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: filtered place list, select index within bounds of travel book but out of bounds of place list"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        showPlacesWithName(KEYWORD_MATCHING_SINGAPORE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        int invalidIndex \u003d getModel().getTravelBuddy().getPlaceList().size();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PLACE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: filtered place list, select index within bounds of travel book and place list -\u003e selected */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredPlaceList().size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredPlaceList().size() + 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PLACE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        /* Case: select from empty travel book -\u003e rejected */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        deleteAllPlaces();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PLACE.getOneBased(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                MESSAGE_INVALID_PLACE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing select command with the"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * {@code expectedSelectedCardIndex} of the selected place.\u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * 4. {@code Storage} and {@code PlaceListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * {@code TravelBuddySystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * @see TravelBuddySystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * @see TravelBuddySystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "                MESSAGE_SELECT_PLACE_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        int preExecutionSelectedCardIndex \u003d getPlaceListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * 4. {@code Storage} and {@code PlaceListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * {@code TravelBuddySystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * @see TravelBuddySystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 30,
      "PremBagda": 13,
      "nivenang": 1,
      "-": 110
    }
  },
  {
    "path": "src/test/java/systemtests/SystemTestSetupHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.TestApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.ReadOnlyTravelBuddy;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods that system tests require."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SystemTestSetupHelper {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets up a new {@code TestApp} and returns it."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    public TestApp setupApplication(Supplier\u003cReadOnlyTravelBuddy\u003e travelBuddy, Path saveFileLocation) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerStage(Stage::new);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(travelBuddy, saveFileLocation));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Application takes too long to set up.\", te);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes TestFX."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.hideStage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle setupMainWindowHandle() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupStage((stage) -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle.focus();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to set up.\", te);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tears down existing stages."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDownStage() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to tear down.\", te);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 4,
      "-": 70
    }
  },
  {
    "path": "src/test/java/systemtests/TravelBuddySystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import static seedu.travel.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "import guitests.guihandles.PlaceListPanelHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.TestApp;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.commons.core.index.Index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.Model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.model.TravelBuddy;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.testutil.TypicalPlaces;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.ui.BrowserPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "import seedu.travel.ui.CommandBox;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chung-ming"
        },
        "content": " * A system test class for TravelBuddy, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "public abstract class TravelBuddySystemTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        //waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    protected TravelBuddy getInitialData() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        return TypicalPlaces.getTypicalTravelBuddy();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    public PlaceListPanelHandle getPlaceListPanel() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        return mainWindowHandle.getPlaceListPanel();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    //public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    //return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        //waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Displays all places in the travel book."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    protected void showAllPlaces() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertEquals(getModel().getTravelBuddy().getPlaceList().size(), getModel().getFilteredPlaceList().size());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Displays all places with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    protected void showPlacesWithName(String keyword) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nivenang"
        },
        "content": "        executeCommand(SearchCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertTrue(getModel().getFilteredPlaceList().size() \u003c getModel().getTravelBuddy().getPlaceList().size());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Selects the place at {@code index} of the displayed list."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    protected void selectPlace(Index index) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertEquals(index.getZeroBased(), getPlaceListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "     * Deletes all places in the travel book."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "    protected void deleteAllPlaces() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertEquals(0, getModel().getTravelBuddy().getPlaceList().size());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same place objects as {@code expectedModel}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * and the place list panel displays the places in the model correctly."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        assertEquals(new TravelBuddy(expectedModel.getTravelBuddy()), testApp.readStorageTravelBuddy());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertListMatching(getPlaceListPanel(), expectedModel.getFilteredPlaceList());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code PlaceListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        //getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        getPlaceListPanel().rememberSelectedPlaceCard();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url is now displaying the"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * default page."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        //assertEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertFalse(getPlaceListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the place in the place list panel at"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * @see PlaceListPanelHandle#isSelectedPlaceCardChanged()"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        getPlaceListPanel().navigateToCard(getPlaceListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        String selectedCardName \u003d getPlaceListPanel().getHandleToSelectedCard().getName();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedUrl;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"URL expected to be valid.\", mue);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        //assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPlaceListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the place list panel remain unchanged."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "     * @see PlaceListPanelHandle#isSelectedPlaceCardChanged()"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        //assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertFalse(getPlaceListPanel().isSelectedPlaceCardChanged());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "PremBagda"
        },
        "content": "        assertListMatching(getPlaceListPanel(), getModel().getFilteredPlaceList());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "        //assertEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 34,
      "PremBagda": 25,
      "nivenang": 1,
      "-": 226
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003c?import seedu.travel.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chung-ming"
        },
        "content": "\u003cfx:root type\u003d\"seedu.travel.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "chung-ming": 1,
      "-": 5
    }
  }
]
